# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class QuotaNotificationExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition': 'str',
        'id': 'str',
        'threshold': 'str'
    }

    attribute_map = {
        'condition': 'condition',
        'id': 'id',
        'threshold': 'threshold'
    }

    def __init__(self, condition=None, id=None, threshold=None, _configuration=None):  # noqa: E501
        """QuotaNotificationExtended - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._condition = None
        self._id = None
        self._threshold = None
        self.discriminator = None

        self.condition = condition
        self.id = id
        self.threshold = threshold

    @property
    def condition(self):
        """Gets the condition of this QuotaNotificationExtended.  # noqa: E501

        The condition detected.  # noqa: E501

        :return: The condition of this QuotaNotificationExtended.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this QuotaNotificationExtended.

        The condition detected.  # noqa: E501

        :param condition: The condition of this QuotaNotificationExtended.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")  # noqa: E501
        allowed_values = ["exceeded", "denied", "violated", "expired"]  # noqa: E501
        if (self._configuration.client_side_validation and
                condition not in allowed_values):
            raise ValueError(
                "Invalid value for `condition` ({0}), must be one of {1}"  # noqa: E501
                .format(condition, allowed_values)
            )

        self._condition = condition

    @property
    def id(self):
        """Gets the id of this QuotaNotificationExtended.  # noqa: E501

        The system ID given to the rule.  # noqa: E501

        :return: The id of this QuotaNotificationExtended.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuotaNotificationExtended.

        The system ID given to the rule.  # noqa: E501

        :param id: The id of this QuotaNotificationExtended.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and len(id) > 17):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `17`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and len(id) < 11):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `11`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and not re.search(r'^[a-z]+-[a-z]+', id)):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/^[a-z]+-[a-z]+/`")  # noqa: E501

        self._id = id

    @property
    def threshold(self):
        """Gets the threshold of this QuotaNotificationExtended.  # noqa: E501

        The quota threshold detected.  # noqa: E501

        :return: The threshold of this QuotaNotificationExtended.  # noqa: E501
        :rtype: str
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this QuotaNotificationExtended.

        The quota threshold detected.  # noqa: E501

        :param threshold: The threshold of this QuotaNotificationExtended.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")  # noqa: E501
        allowed_values = ["hard", "soft", "advisory"]  # noqa: E501
        if (self._configuration.client_side_validation and
                threshold not in allowed_values):
            raise ValueError(
                "Invalid value for `threshold` ({0}), must be one of {1}"  # noqa: E501
                .format(threshold, allowed_values)
            )

        self._threshold = threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuotaNotificationExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuotaNotificationExtended):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuotaNotificationExtended):
            return True

        return self.to_dict() != other.to_dict()
