# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class OauthOauth2TokenExchanges(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_client_id': 'str',
        'customer_metadata_url': 'str',
        'id': 'str',
        'oauth2_client_id': 'str'
    }

    attribute_map = {
        'customer_client_id': 'customer_client_id',
        'customer_metadata_url': 'customer_metadata_url',
        'id': 'id',
        'oauth2_client_id': 'oauth2_client_id'
    }

    def __init__(self, customer_client_id=None, customer_metadata_url=None, id=None, oauth2_client_id=None, _configuration=None):  # noqa: E501
        """OauthOauth2TokenExchanges - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._customer_client_id = None
        self._customer_metadata_url = None
        self._id = None
        self._oauth2_client_id = None
        self.discriminator = None

        if customer_client_id is not None:
            self.customer_client_id = customer_client_id
        if customer_metadata_url is not None:
            self.customer_metadata_url = customer_metadata_url
        if id is not None:
            self.id = id
        if oauth2_client_id is not None:
            self.oauth2_client_id = oauth2_client_id

    @property
    def customer_client_id(self):
        """Gets the customer_client_id of this OauthOauth2TokenExchanges.  # noqa: E501

        External client created by customer IdP for customer server application, this client generates the original token to be exchanged.  # noqa: E501

        :return: The customer_client_id of this OauthOauth2TokenExchanges.  # noqa: E501
        :rtype: str
        """
        return self._customer_client_id

    @customer_client_id.setter
    def customer_client_id(self, customer_client_id):
        """Sets the customer_client_id of this OauthOauth2TokenExchanges.

        External client created by customer IdP for customer server application, this client generates the original token to be exchanged.  # noqa: E501

        :param customer_client_id: The customer_client_id of this OauthOauth2TokenExchanges.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                customer_client_id is not None and len(customer_client_id) > 255):
            raise ValueError("Invalid value for `customer_client_id`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                customer_client_id is not None and len(customer_client_id) < 1):
            raise ValueError("Invalid value for `customer_client_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._customer_client_id = customer_client_id

    @property
    def customer_metadata_url(self):
        """Gets the customer_metadata_url of this OauthOauth2TokenExchanges.  # noqa: E501

        URL to query client token signing public key (or certificate).  # noqa: E501

        :return: The customer_metadata_url of this OauthOauth2TokenExchanges.  # noqa: E501
        :rtype: str
        """
        return self._customer_metadata_url

    @customer_metadata_url.setter
    def customer_metadata_url(self, customer_metadata_url):
        """Sets the customer_metadata_url of this OauthOauth2TokenExchanges.

        URL to query client token signing public key (or certificate).  # noqa: E501

        :param customer_metadata_url: The customer_metadata_url of this OauthOauth2TokenExchanges.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                customer_metadata_url is not None and len(customer_metadata_url) > 2048):
            raise ValueError("Invalid value for `customer_metadata_url`, length must be less than or equal to `2048`")  # noqa: E501
        if (self._configuration.client_side_validation and
                customer_metadata_url is not None and len(customer_metadata_url) < 1):
            raise ValueError("Invalid value for `customer_metadata_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._customer_metadata_url = customer_metadata_url

    @property
    def id(self):
        """Gets the id of this OauthOauth2TokenExchanges.  # noqa: E501

        Unique identifier of the OAuth2 Token Exchange resource.  # noqa: E501

        :return: The id of this OauthOauth2TokenExchanges.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OauthOauth2TokenExchanges.

        Unique identifier of the OAuth2 Token Exchange resource.  # noqa: E501

        :param id: The id of this OauthOauth2TokenExchanges.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                id is not None and len(id) > 255):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and len(id) < 1):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def oauth2_client_id(self):
        """Gets the oauth2_client_id of this OauthOauth2TokenExchanges.  # noqa: E501

        Unique identifier of the OAuth2 client.  # noqa: E501

        :return: The oauth2_client_id of this OauthOauth2TokenExchanges.  # noqa: E501
        :rtype: str
        """
        return self._oauth2_client_id

    @oauth2_client_id.setter
    def oauth2_client_id(self, oauth2_client_id):
        """Sets the oauth2_client_id of this OauthOauth2TokenExchanges.

        Unique identifier of the OAuth2 client.  # noqa: E501

        :param oauth2_client_id: The oauth2_client_id of this OauthOauth2TokenExchanges.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                oauth2_client_id is not None and len(oauth2_client_id) > 255):
            raise ValueError("Invalid value for `oauth2_client_id`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                oauth2_client_id is not None and len(oauth2_client_id) < 1):
            raise ValueError("Invalid value for `oauth2_client_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._oauth2_client_id = oauth2_client_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OauthOauth2TokenExchanges, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OauthOauth2TokenExchanges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OauthOauth2TokenExchanges):
            return True

        return self.to_dict() != other.to_dict()
