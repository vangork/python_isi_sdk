# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class NfsExportCreateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_path': 'bool',
        'paths': 'list[str]',
        'zone': 'str'
    }

    attribute_map = {
        'create_path': 'create_path',
        'paths': 'paths',
        'zone': 'zone'
    }

    def __init__(self, create_path=None, paths=None, zone=None, _configuration=None):  # noqa: E501
        """NfsExportCreateParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._create_path = None
        self._paths = None
        self._zone = None
        self.discriminator = None

        if create_path is not None:
            self.create_path = create_path
        self.paths = paths
        if zone is not None:
            self.zone = zone

    @property
    def create_path(self):
        """Gets the create_path of this NfsExportCreateParams.  # noqa: E501

        Create path if does not exist.  # noqa: E501

        :return: The create_path of this NfsExportCreateParams.  # noqa: E501
        :rtype: bool
        """
        return self._create_path

    @create_path.setter
    def create_path(self, create_path):
        """Sets the create_path of this NfsExportCreateParams.

        Create path if does not exist.  # noqa: E501

        :param create_path: The create_path of this NfsExportCreateParams.  # noqa: E501
        :type: bool
        """

        self._create_path = create_path

    @property
    def paths(self):
        """Gets the paths of this NfsExportCreateParams.  # noqa: E501

        Specifies the paths under /ifs that are exported.  # noqa: E501

        :return: The paths of this NfsExportCreateParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this NfsExportCreateParams.

        Specifies the paths under /ifs that are exported.  # noqa: E501

        :param paths: The paths of this NfsExportCreateParams.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and paths is None:
            raise ValueError("Invalid value for `paths`, must not be `None`")  # noqa: E501

        self._paths = paths

    @property
    def zone(self):
        """Gets the zone of this NfsExportCreateParams.  # noqa: E501

        Specifies the zone in which the export is valid.  # noqa: E501

        :return: The zone of this NfsExportCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this NfsExportCreateParams.

        Specifies the zone in which the export is valid.  # noqa: E501

        :param zone: The zone of this NfsExportCreateParams.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                zone is not None and len(zone) > 255):
            raise ValueError("Invalid value for `zone`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                zone is not None and len(zone) < 0):
            raise ValueError("Invalid value for `zone`, length must be greater than or equal to `0`")  # noqa: E501

        self._zone = zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NfsExportCreateParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NfsExportCreateParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NfsExportCreateParams):
            return True

        return self.to_dict() != other.to_dict()
