# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class CloudAccountExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket': 'str',
        'id': 'str',
        'metadata_bucket': 'str',
        'pool': 'str',
        'state': 'str',
        'state_details': 'str',
        'type': 'str'
    }

    attribute_map = {
        'bucket': 'bucket',
        'id': 'id',
        'metadata_bucket': 'metadata_bucket',
        'pool': 'pool',
        'state': 'state',
        'state_details': 'state_details',
        'type': 'type'
    }

    def __init__(self, bucket=None, id=None, metadata_bucket=None, pool=None, state=None, state_details=None, type=None, _configuration=None):  # noqa: E501
        """CloudAccountExtended - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bucket = None
        self._id = None
        self._metadata_bucket = None
        self._pool = None
        self._state = None
        self._state_details = None
        self._type = None
        self.discriminator = None

        if bucket is not None:
            self.bucket = bucket
        if id is not None:
            self.id = id
        if metadata_bucket is not None:
            self.metadata_bucket = metadata_bucket
        if pool is not None:
            self.pool = pool
        if state is not None:
            self.state = state
        if state_details is not None:
            self.state_details = state_details
        if type is not None:
            self.type = type

    @property
    def bucket(self):
        """Gets the bucket of this CloudAccountExtended.  # noqa: E501

        The machine generated name of the account bucket to store data  # noqa: E501

        :return: The bucket of this CloudAccountExtended.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this CloudAccountExtended.

        The machine generated name of the account bucket to store data  # noqa: E501

        :param bucket: The bucket of this CloudAccountExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                bucket is not None and len(bucket) > 255):
            raise ValueError("Invalid value for `bucket`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bucket is not None and len(bucket) < 0):
            raise ValueError("Invalid value for `bucket`, length must be greater than or equal to `0`")  # noqa: E501

        self._bucket = bucket

    @property
    def id(self):
        """Gets the id of this CloudAccountExtended.  # noqa: E501

        A globally unique name for this account  # noqa: E501

        :return: The id of this CloudAccountExtended.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudAccountExtended.

        A globally unique name for this account  # noqa: E501

        :param id: The id of this CloudAccountExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                id is not None and len(id) > 255):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and len(id) < 0):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def metadata_bucket(self):
        """Gets the metadata_bucket of this CloudAccountExtended.  # noqa: E501

        The machine generated name of the account bucket to store metadata  # noqa: E501

        :return: The metadata_bucket of this CloudAccountExtended.  # noqa: E501
        :rtype: str
        """
        return self._metadata_bucket

    @metadata_bucket.setter
    def metadata_bucket(self, metadata_bucket):
        """Sets the metadata_bucket of this CloudAccountExtended.

        The machine generated name of the account bucket to store metadata  # noqa: E501

        :param metadata_bucket: The metadata_bucket of this CloudAccountExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                metadata_bucket is not None and len(metadata_bucket) > 255):
            raise ValueError("Invalid value for `metadata_bucket`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                metadata_bucket is not None and len(metadata_bucket) < 0):
            raise ValueError("Invalid value for `metadata_bucket`, length must be greater than or equal to `0`")  # noqa: E501

        self._metadata_bucket = metadata_bucket

    @property
    def pool(self):
        """Gets the pool of this CloudAccountExtended.  # noqa: E501

        Name of the pool referencing this account.  Empty if none.  # noqa: E501

        :return: The pool of this CloudAccountExtended.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this CloudAccountExtended.

        Name of the pool referencing this account.  Empty if none.  # noqa: E501

        :param pool: The pool of this CloudAccountExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                pool is not None and len(pool) > 768):
            raise ValueError("Invalid value for `pool`, length must be less than or equal to `768`")  # noqa: E501
        if (self._configuration.client_side_validation and
                pool is not None and len(pool) < 0):
            raise ValueError("Invalid value for `pool`, length must be greater than or equal to `0`")  # noqa: E501

        self._pool = pool

    @property
    def state(self):
        """Gets the state of this CloudAccountExtended.  # noqa: E501

        Indicates whether this account is in a good state (\"OK\"), disabled (\"disabled\") or inaccessible via the network (\"unreachable\")  # noqa: E501

        :return: The state of this CloudAccountExtended.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CloudAccountExtended.

        Indicates whether this account is in a good state (\"OK\"), disabled (\"disabled\") or inaccessible via the network (\"unreachable\")  # noqa: E501

        :param state: The state of this CloudAccountExtended.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "disabled", "unreachable"]  # noqa: E501
        if (self._configuration.client_side_validation and
                state not in allowed_values):
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_details(self):
        """Gets the state_details of this CloudAccountExtended.  # noqa: E501

        Gives further information to describe the state of this account  # noqa: E501

        :return: The state_details of this CloudAccountExtended.  # noqa: E501
        :rtype: str
        """
        return self._state_details

    @state_details.setter
    def state_details(self, state_details):
        """Sets the state_details of this CloudAccountExtended.

        Gives further information to describe the state of this account  # noqa: E501

        :param state_details: The state_details of this CloudAccountExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                state_details is not None and len(state_details) > 4096):
            raise ValueError("Invalid value for `state_details`, length must be less than or equal to `4096`")  # noqa: E501
        if (self._configuration.client_side_validation and
                state_details is not None and len(state_details) < 0):
            raise ValueError("Invalid value for `state_details`, length must be greater than or equal to `0`")  # noqa: E501

        self._state_details = state_details

    @property
    def type(self):
        """Gets the type of this CloudAccountExtended.  # noqa: E501

        The type of cloud protocol required.  E.g., \"isilon\" for Dell EMC PowerScale, \"ecs\" for Dell EMC ECS Appliance, \"virtustream\" for Virtustream Storage Cloud, \"azure\" for Microsoft Azure, \"s3\" for Amazon S3, \"c2s-s3\" for Amazon Commercial Cloud Services S3 and \"google\" for Google Cloud Platform and \"alibaba-cloud\" for Alibaba Cloud  # noqa: E501

        :return: The type of this CloudAccountExtended.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CloudAccountExtended.

        The type of cloud protocol required.  E.g., \"isilon\" for Dell EMC PowerScale, \"ecs\" for Dell EMC ECS Appliance, \"virtustream\" for Virtustream Storage Cloud, \"azure\" for Microsoft Azure, \"s3\" for Amazon S3, \"c2s-s3\" for Amazon Commercial Cloud Services S3 and \"google\" for Google Cloud Platform and \"alibaba-cloud\" for Alibaba Cloud  # noqa: E501

        :param type: The type of this CloudAccountExtended.  # noqa: E501
        :type: str
        """
        allowed_values = ["isilon", "ecs", "virtustream", "azure", "s3", "c2s-s3", "google", "alibaba-cloud"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudAccountExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudAccountExtended):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudAccountExtended):
            return True

        return self.to_dict() != other.to_dict()
