# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class SnapshotScheduleCreateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'path': 'str',
        'pattern': 'str',
        'schedule': 'str'
    }

    attribute_map = {
        'name': 'name',
        'path': 'path',
        'pattern': 'pattern',
        'schedule': 'schedule'
    }

    def __init__(self, name=None, path=None, pattern=None, schedule=None, _configuration=None):  # noqa: E501
        """SnapshotScheduleCreateParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._path = None
        self._pattern = None
        self._schedule = None
        self.discriminator = None

        self.name = name
        self.path = path
        self.pattern = pattern
        self.schedule = schedule

    @property
    def name(self):
        """Gets the name of this SnapshotScheduleCreateParams.  # noqa: E501

        The schedule name.  # noqa: E501

        :return: The name of this SnapshotScheduleCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SnapshotScheduleCreateParams.

        The schedule name.  # noqa: E501

        :param name: The name of this SnapshotScheduleCreateParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def path(self):
        """Gets the path of this SnapshotScheduleCreateParams.  # noqa: E501

        The /ifs path snapshotted.  # noqa: E501

        :return: The path of this SnapshotScheduleCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SnapshotScheduleCreateParams.

        The /ifs path snapshotted.  # noqa: E501

        :param path: The path of this SnapshotScheduleCreateParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def pattern(self):
        """Gets the pattern of this SnapshotScheduleCreateParams.  # noqa: E501

        Pattern expanded with strftime to create snapshot names.  # noqa: E501

        :return: The pattern of this SnapshotScheduleCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this SnapshotScheduleCreateParams.

        Pattern expanded with strftime to create snapshot names.  # noqa: E501

        :param pattern: The pattern of this SnapshotScheduleCreateParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and pattern is None:
            raise ValueError("Invalid value for `pattern`, must not be `None`")  # noqa: E501

        self._pattern = pattern

    @property
    def schedule(self):
        """Gets the schedule of this SnapshotScheduleCreateParams.  # noqa: E501

        The isidate compatible natural language description of the schedule.  # noqa: E501

        :return: The schedule of this SnapshotScheduleCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this SnapshotScheduleCreateParams.

        The isidate compatible natural language description of the schedule.  # noqa: E501

        :param schedule: The schedule of this SnapshotScheduleCreateParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")  # noqa: E501

        self._schedule = schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnapshotScheduleCreateParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotScheduleCreateParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SnapshotScheduleCreateParams):
            return True

        return self.to_dict() != other.to_dict()
