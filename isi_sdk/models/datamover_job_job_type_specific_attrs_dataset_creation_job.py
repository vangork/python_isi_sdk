# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class DatamoverJobJobTypeSpecificAttrsDatasetCreationJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_name': 'str',
        'base_path': 'str',
        'dataset_version': 'str',
        'retention': 'DatamoverBasePolicySrcDatasetRetention',
        'statistics': 'DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetCreationJobStatistics',
        'subpaths': 'list[str]'
    }

    attribute_map = {
        'account_id': 'account_id',
        'account_name': 'account_name',
        'base_path': 'base_path',
        'dataset_version': 'dataset_version',
        'retention': 'retention',
        'statistics': 'statistics',
        'subpaths': 'subpaths'
    }

    def __init__(self, account_id=None, account_name=None, base_path=None, dataset_version=None, retention=None, statistics=None, subpaths=None, _configuration=None):  # noqa: E501
        """DatamoverJobJobTypeSpecificAttrsDatasetCreationJob - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._account_name = None
        self._base_path = None
        self._dataset_version = None
        self._retention = None
        self._statistics = None
        self._subpaths = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if account_name is not None:
            self.account_name = account_name
        if base_path is not None:
            self.base_path = base_path
        if dataset_version is not None:
            self.dataset_version = dataset_version
        if retention is not None:
            self.retention = retention
        if statistics is not None:
            self.statistics = statistics
        if subpaths is not None:
            self.subpaths = subpaths

    @property
    def account_id(self):
        """Gets the account_id of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501

        Account ID of the source storage system, where the dataset is to be created.  # noqa: E501

        :return: The account_id of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.

        Account ID of the source storage system, where the dataset is to be created.  # noqa: E501

        :param account_id: The account_id of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                account_id is not None and len(account_id) > 48):
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `48`")  # noqa: E501
        if (self._configuration.client_side_validation and
                account_id is not None and len(account_id) < 2):
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `2`")  # noqa: E501

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501

        Account name of the source storage system, where the dataset is to be created.  # noqa: E501

        :return: The account_name of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.

        Account name of the source storage system, where the dataset is to be created.  # noqa: E501

        :param account_name: The account_name of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                account_name is not None and len(account_name) > 255):
            raise ValueError("Invalid value for `account_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                account_name is not None and len(account_name) < 1):
            raise ValueError("Invalid value for `account_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._account_name = account_name

    @property
    def base_path(self):
        """Gets the base_path of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501

        Filesystem path for dataset creation. The subpath is relative to this path.  # noqa: E501

        :return: The base_path of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path):
        """Sets the base_path of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.

        Filesystem path for dataset creation. The subpath is relative to this path.  # noqa: E501

        :param base_path: The base_path of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                base_path is not None and len(base_path) > 4096):
            raise ValueError("Invalid value for `base_path`, length must be less than or equal to `4096`")  # noqa: E501
        if (self._configuration.client_side_validation and
                base_path is not None and len(base_path) < 1):
            raise ValueError("Invalid value for `base_path`, length must be greater than or equal to `1`")  # noqa: E501

        self._base_path = base_path

    @property
    def dataset_version(self):
        """Gets the dataset_version of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501

        The version of dataset.  # noqa: E501

        :return: The dataset_version of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501
        :rtype: str
        """
        return self._dataset_version

    @dataset_version.setter
    def dataset_version(self, dataset_version):
        """Sets the dataset_version of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.

        The version of dataset.  # noqa: E501

        :param dataset_version: The dataset_version of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501
        :type: str
        """
        allowed_values = ["1", "2"]  # noqa: E501
        if (self._configuration.client_side_validation and
                dataset_version not in allowed_values):
            raise ValueError(
                "Invalid value for `dataset_version` ({0}), must be one of {1}"  # noqa: E501
                .format(dataset_version, allowed_values)
            )

        self._dataset_version = dataset_version

    @property
    def retention(self):
        """Gets the retention of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501

          # noqa: E501

        :return: The retention of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501
        :rtype: DatamoverBasePolicySrcDatasetRetention
        """
        return self._retention

    @retention.setter
    def retention(self, retention):
        """Sets the retention of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.

          # noqa: E501

        :param retention: The retention of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501
        :type: DatamoverBasePolicySrcDatasetRetention
        """

        self._retention = retention

    @property
    def statistics(self):
        """Gets the statistics of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501

        Statistics for this job  # noqa: E501

        :return: The statistics of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501
        :rtype: DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetCreationJobStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.

        Statistics for this job  # noqa: E501

        :param statistics: The statistics of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501
        :type: DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetCreationJobStatistics
        """

        self._statistics = statistics

    @property
    def subpaths(self):
        """Gets the subpaths of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501

        Set of filesystem paths relative to base path.  # noqa: E501

        :return: The subpaths of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501
        :rtype: list[str]
        """
        return self._subpaths

    @subpaths.setter
    def subpaths(self, subpaths):
        """Sets the subpaths of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.

        Set of filesystem paths relative to base path.  # noqa: E501

        :param subpaths: The subpaths of this DatamoverJobJobTypeSpecificAttrsDatasetCreationJob.  # noqa: E501
        :type: list[str]
        """

        self._subpaths = subpaths

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatamoverJobJobTypeSpecificAttrsDatasetCreationJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatamoverJobJobTypeSpecificAttrsDatasetCreationJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatamoverJobJobTypeSpecificAttrsDatasetCreationJob):
            return True

        return self.to_dict() != other.to_dict()
