# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class FirewallDscpRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'dscp_value': 'int',
        'dst_ports': 'FirewallDscpRuleParamsDstPorts',
        'id': 'str',
        'name': 'str',
        'src_ports': 'FirewallDscpRuleParamsDstPorts'
    }

    attribute_map = {
        'description': 'description',
        'dscp_value': 'dscp_value',
        'dst_ports': 'dst_ports',
        'id': 'id',
        'name': 'name',
        'src_ports': 'src_ports'
    }

    def __init__(self, description=None, dscp_value=None, dst_ports=None, id=None, name=None, src_ports=None, _configuration=None):  # noqa: E501
        """FirewallDscpRule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._dscp_value = None
        self._dst_ports = None
        self._id = None
        self._name = None
        self._src_ports = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if dscp_value is not None:
            self.dscp_value = dscp_value
        if dst_ports is not None:
            self.dst_ports = dst_ports
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if src_ports is not None:
            self.src_ports = src_ports

    @property
    def description(self):
        """Gets the description of this FirewallDscpRule.  # noqa: E501

        A description of the DSCP rule.  # noqa: E501

        :return: The description of this FirewallDscpRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FirewallDscpRule.

        A description of the DSCP rule.  # noqa: E501

        :param description: The description of this FirewallDscpRule.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 128):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def dscp_value(self):
        """Gets the dscp_value of this FirewallDscpRule.  # noqa: E501

        The DSCP value of the DSCP rule  # noqa: E501

        :return: The dscp_value of this FirewallDscpRule.  # noqa: E501
        :rtype: int
        """
        return self._dscp_value

    @dscp_value.setter
    def dscp_value(self, dscp_value):
        """Sets the dscp_value of this FirewallDscpRule.

        The DSCP value of the DSCP rule  # noqa: E501

        :param dscp_value: The dscp_value of this FirewallDscpRule.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                dscp_value is not None and dscp_value > 65535):  # noqa: E501
            raise ValueError("Invalid value for `dscp_value`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                dscp_value is not None and dscp_value < 0):  # noqa: E501
            raise ValueError("Invalid value for `dscp_value`, must be a value greater than or equal to `0`")  # noqa: E501

        self._dscp_value = dscp_value

    @property
    def dst_ports(self):
        """Gets the dst_ports of this FirewallDscpRule.  # noqa: E501

        Specified port number for destination control.  # noqa: E501

        :return: The dst_ports of this FirewallDscpRule.  # noqa: E501
        :rtype: FirewallDscpRuleParamsDstPorts
        """
        return self._dst_ports

    @dst_ports.setter
    def dst_ports(self, dst_ports):
        """Sets the dst_ports of this FirewallDscpRule.

        Specified port number for destination control.  # noqa: E501

        :param dst_ports: The dst_ports of this FirewallDscpRule.  # noqa: E501
        :type: FirewallDscpRuleParamsDstPorts
        """

        self._dst_ports = dst_ports

    @property
    def id(self):
        """Gets the id of this FirewallDscpRule.  # noqa: E501

        Unique DSCP rule ID   # noqa: E501

        :return: The id of this FirewallDscpRule.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FirewallDscpRule.

        Unique DSCP rule ID   # noqa: E501

        :param id: The id of this FirewallDscpRule.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                id is not None and len(id) > 32):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `32`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and len(id) < 1):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and not re.search(r'^[0-9a-zA-Z_-]*$', id)):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/^[0-9a-zA-Z_-]*$/`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this FirewallDscpRule.  # noqa: E501

        The name of the DSCP rule.  # noqa: E501

        :return: The name of this FirewallDscpRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FirewallDscpRule.

        The name of the DSCP rule.  # noqa: E501

        :param name: The name of this FirewallDscpRule.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 32):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and not re.search(r'^[0-9a-zA-Z_-]*$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[0-9a-zA-Z_-]*$/`")  # noqa: E501

        self._name = name

    @property
    def src_ports(self):
        """Gets the src_ports of this FirewallDscpRule.  # noqa: E501

        Specified port number for source control.  # noqa: E501

        :return: The src_ports of this FirewallDscpRule.  # noqa: E501
        :rtype: FirewallDscpRuleParamsDstPorts
        """
        return self._src_ports

    @src_ports.setter
    def src_ports(self, src_ports):
        """Sets the src_ports of this FirewallDscpRule.

        Specified port number for source control.  # noqa: E501

        :param src_ports: The src_ports of this FirewallDscpRule.  # noqa: E501
        :type: FirewallDscpRuleParamsDstPorts
        """

        self._src_ports = src_ports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirewallDscpRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirewallDscpRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FirewallDscpRule):
            return True

        return self.to_dict() != other.to_dict()
