# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class ConnectivityStatusStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_status': 'str',
        'connectivity_connected': 'bool',
        'connectivity_dismissed': 'bool',
        'connectivity_enabled': 'bool',
        'hardware_key_present': 'bool',
        'provisioned': 'bool',
        'show_migrated': 'bool',
        'srs_disabled': 'bool',
        'swid': 'str',
        'ui_state': 'str'
    }

    attribute_map = {
        'connection_status': 'connection_status',
        'connectivity_connected': 'connectivity_connected',
        'connectivity_dismissed': 'connectivity_dismissed',
        'connectivity_enabled': 'connectivity_enabled',
        'hardware_key_present': 'hardware_key_present',
        'provisioned': 'provisioned',
        'show_migrated': 'show_migrated',
        'srs_disabled': 'srs_disabled',
        'swid': 'swid',
        'ui_state': 'ui_state'
    }

    def __init__(self, connection_status=None, connectivity_connected=None, connectivity_dismissed=None, connectivity_enabled=None, hardware_key_present=None, provisioned=None, show_migrated=None, srs_disabled=None, swid=None, ui_state=None, _configuration=None):  # noqa: E501
        """ConnectivityStatusStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connection_status = None
        self._connectivity_connected = None
        self._connectivity_dismissed = None
        self._connectivity_enabled = None
        self._hardware_key_present = None
        self._provisioned = None
        self._show_migrated = None
        self._srs_disabled = None
        self._swid = None
        self._ui_state = None
        self.discriminator = None

        self.connection_status = connection_status
        self.connectivity_connected = connectivity_connected
        self.connectivity_dismissed = connectivity_dismissed
        self.connectivity_enabled = connectivity_enabled
        self.hardware_key_present = hardware_key_present
        self.provisioned = provisioned
        self.show_migrated = show_migrated
        self.srs_disabled = srs_disabled
        self.swid = swid
        self.ui_state = ui_state

    @property
    def connection_status(self):
        """Gets the connection_status of this ConnectivityStatusStatus.  # noqa: E501

        The current connection status of Dell Technologies connectivity services.  # noqa: E501

        :return: The connection_status of this ConnectivityStatusStatus.  # noqa: E501
        :rtype: str
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this ConnectivityStatusStatus.

        The current connection status of Dell Technologies connectivity services.  # noqa: E501

        :param connection_status: The connection_status of this ConnectivityStatusStatus.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and connection_status is None:
            raise ValueError("Invalid value for `connection_status`, must not be `None`")  # noqa: E501
        allowed_values = ["Connected", "Connecting", "Disconnected"]  # noqa: E501
        if (self._configuration.client_side_validation and
                connection_status not in allowed_values):
            raise ValueError(
                "Invalid value for `connection_status` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_status, allowed_values)
            )

        self._connection_status = connection_status

    @property
    def connectivity_connected(self):
        """Gets the connectivity_connected of this ConnectivityStatusStatus.  # noqa: E501

        Whether Dell Technologies connectivity services is connected.  # noqa: E501

        :return: The connectivity_connected of this ConnectivityStatusStatus.  # noqa: E501
        :rtype: bool
        """
        return self._connectivity_connected

    @connectivity_connected.setter
    def connectivity_connected(self, connectivity_connected):
        """Sets the connectivity_connected of this ConnectivityStatusStatus.

        Whether Dell Technologies connectivity services is connected.  # noqa: E501

        :param connectivity_connected: The connectivity_connected of this ConnectivityStatusStatus.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and connectivity_connected is None:
            raise ValueError("Invalid value for `connectivity_connected`, must not be `None`")  # noqa: E501

        self._connectivity_connected = connectivity_connected

    @property
    def connectivity_dismissed(self):
        """Gets the connectivity_dismissed of this ConnectivityStatusStatus.  # noqa: E501

        Whether Dell Technologies connectivity services prompt should be dismissed.  # noqa: E501

        :return: The connectivity_dismissed of this ConnectivityStatusStatus.  # noqa: E501
        :rtype: bool
        """
        return self._connectivity_dismissed

    @connectivity_dismissed.setter
    def connectivity_dismissed(self, connectivity_dismissed):
        """Sets the connectivity_dismissed of this ConnectivityStatusStatus.

        Whether Dell Technologies connectivity services prompt should be dismissed.  # noqa: E501

        :param connectivity_dismissed: The connectivity_dismissed of this ConnectivityStatusStatus.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and connectivity_dismissed is None:
            raise ValueError("Invalid value for `connectivity_dismissed`, must not be `None`")  # noqa: E501

        self._connectivity_dismissed = connectivity_dismissed

    @property
    def connectivity_enabled(self):
        """Gets the connectivity_enabled of this ConnectivityStatusStatus.  # noqa: E501

        Whether Dell Technologies connectivity services is enabled.  # noqa: E501

        :return: The connectivity_enabled of this ConnectivityStatusStatus.  # noqa: E501
        :rtype: bool
        """
        return self._connectivity_enabled

    @connectivity_enabled.setter
    def connectivity_enabled(self, connectivity_enabled):
        """Sets the connectivity_enabled of this ConnectivityStatusStatus.

        Whether Dell Technologies connectivity services is enabled.  # noqa: E501

        :param connectivity_enabled: The connectivity_enabled of this ConnectivityStatusStatus.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and connectivity_enabled is None:
            raise ValueError("Invalid value for `connectivity_enabled`, must not be `None`")  # noqa: E501

        self._connectivity_enabled = connectivity_enabled

    @property
    def hardware_key_present(self):
        """Gets the hardware_key_present of this ConnectivityStatusStatus.  # noqa: E501

        Whether Hardware key is present.  # noqa: E501

        :return: The hardware_key_present of this ConnectivityStatusStatus.  # noqa: E501
        :rtype: bool
        """
        return self._hardware_key_present

    @hardware_key_present.setter
    def hardware_key_present(self, hardware_key_present):
        """Sets the hardware_key_present of this ConnectivityStatusStatus.

        Whether Hardware key is present.  # noqa: E501

        :param hardware_key_present: The hardware_key_present of this ConnectivityStatusStatus.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and hardware_key_present is None:
            raise ValueError("Invalid value for `hardware_key_present`, must not be `None`")  # noqa: E501

        self._hardware_key_present = hardware_key_present

    @property
    def provisioned(self):
        """Gets the provisioned of this ConnectivityStatusStatus.  # noqa: E501

        True indicates Dell Technologies connectivity services provisioning is done.  # noqa: E501

        :return: The provisioned of this ConnectivityStatusStatus.  # noqa: E501
        :rtype: bool
        """
        return self._provisioned

    @provisioned.setter
    def provisioned(self, provisioned):
        """Sets the provisioned of this ConnectivityStatusStatus.

        True indicates Dell Technologies connectivity services provisioning is done.  # noqa: E501

        :param provisioned: The provisioned of this ConnectivityStatusStatus.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and provisioned is None:
            raise ValueError("Invalid value for `provisioned`, must not be `None`")  # noqa: E501

        self._provisioned = provisioned

    @property
    def show_migrated(self):
        """Gets the show_migrated of this ConnectivityStatusStatus.  # noqa: E501

        Whether to show if connectivity had been migrated.  # noqa: E501

        :return: The show_migrated of this ConnectivityStatusStatus.  # noqa: E501
        :rtype: bool
        """
        return self._show_migrated

    @show_migrated.setter
    def show_migrated(self, show_migrated):
        """Sets the show_migrated of this ConnectivityStatusStatus.

        Whether to show if connectivity had been migrated.  # noqa: E501

        :param show_migrated: The show_migrated of this ConnectivityStatusStatus.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and show_migrated is None:
            raise ValueError("Invalid value for `show_migrated`, must not be `None`")  # noqa: E501

        self._show_migrated = show_migrated

    @property
    def srs_disabled(self):
        """Gets the srs_disabled of this ConnectivityStatusStatus.  # noqa: E501

        False indicates Remote Support is disabled.  # noqa: E501

        :return: The srs_disabled of this ConnectivityStatusStatus.  # noqa: E501
        :rtype: bool
        """
        return self._srs_disabled

    @srs_disabled.setter
    def srs_disabled(self, srs_disabled):
        """Sets the srs_disabled of this ConnectivityStatusStatus.

        False indicates Remote Support is disabled.  # noqa: E501

        :param srs_disabled: The srs_disabled of this ConnectivityStatusStatus.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and srs_disabled is None:
            raise ValueError("Invalid value for `srs_disabled`, must not be `None`")  # noqa: E501

        self._srs_disabled = srs_disabled

    @property
    def swid(self):
        """Gets the swid of this ConnectivityStatusStatus.  # noqa: E501

        The software ID used by Dell Technologies connectivity services.  # noqa: E501

        :return: The swid of this ConnectivityStatusStatus.  # noqa: E501
        :rtype: str
        """
        return self._swid

    @swid.setter
    def swid(self, swid):
        """Sets the swid of this ConnectivityStatusStatus.

        The software ID used by Dell Technologies connectivity services.  # noqa: E501

        :param swid: The swid of this ConnectivityStatusStatus.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and swid is None:
            raise ValueError("Invalid value for `swid`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                swid is not None and len(swid) > 50):
            raise ValueError("Invalid value for `swid`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                swid is not None and len(swid) < 0):
            raise ValueError("Invalid value for `swid`, length must be greater than or equal to `0`")  # noqa: E501

        self._swid = swid

    @property
    def ui_state(self):
        """Gets the ui_state of this ConnectivityStatusStatus.  # noqa: E501

        Connectivity system state.  # noqa: E501

        :return: The ui_state of this ConnectivityStatusStatus.  # noqa: E501
        :rtype: str
        """
        return self._ui_state

    @ui_state.setter
    def ui_state(self, ui_state):
        """Sets the ui_state of this ConnectivityStatusStatus.

        Connectivity system state.  # noqa: E501

        :param ui_state: The ui_state of this ConnectivityStatusStatus.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ui_state is None:
            raise ValueError("Invalid value for `ui_state`, must not be `None`")  # noqa: E501
        allowed_values = ["terms", "setup", "monitor"]  # noqa: E501
        if (self._configuration.client_side_validation and
                ui_state not in allowed_values):
            raise ValueError(
                "Invalid value for `ui_state` ({0}), must be one of {1}"  # noqa: E501
                .format(ui_state, allowed_values)
            )

        self._ui_state = ui_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectivityStatusStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectivityStatusStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectivityStatusStatus):
            return True

        return self.to_dict() != other.to_dict()
