# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class DatasetWorkload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_impact': 'int',
        'cluster_resource_impact': 'int',
        'limits': 'DatasetWorkloadLimits',
        'max_cpu_us': 'int',
        'max_disk_reads': 'int',
        'max_disk_writes': 'int',
        'name': 'str'
    }

    attribute_map = {
        'client_impact': 'client_impact',
        'cluster_resource_impact': 'cluster_resource_impact',
        'limits': 'limits',
        'max_cpu_us': 'max_cpu_us',
        'max_disk_reads': 'max_disk_reads',
        'max_disk_writes': 'max_disk_writes',
        'name': 'name'
    }

    def __init__(self, client_impact=None, cluster_resource_impact=None, limits=None, max_cpu_us=None, max_disk_reads=None, max_disk_writes=None, name=None, _configuration=None):  # noqa: E501
        """DatasetWorkload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._client_impact = None
        self._cluster_resource_impact = None
        self._limits = None
        self._max_cpu_us = None
        self._max_disk_reads = None
        self._max_disk_writes = None
        self._name = None
        self.discriminator = None

        if client_impact is not None:
            self.client_impact = client_impact
        if cluster_resource_impact is not None:
            self.cluster_resource_impact = cluster_resource_impact
        if limits is not None:
            self.limits = limits
        if max_cpu_us is not None:
            self.max_cpu_us = max_cpu_us
        if max_disk_reads is not None:
            self.max_disk_reads = max_disk_reads
        if max_disk_writes is not None:
            self.max_disk_writes = max_disk_writes
        if name is not None:
            self.name = name

    @property
    def client_impact(self):
        """Gets the client_impact of this DatasetWorkload.  # noqa: E501

        The desired workload's impact on the system. Specified by the Job Engine.  # noqa: E501

        :return: The client_impact of this DatasetWorkload.  # noqa: E501
        :rtype: int
        """
        return self._client_impact

    @client_impact.setter
    def client_impact(self, client_impact):
        """Sets the client_impact of this DatasetWorkload.

        The desired workload's impact on the system. Specified by the Job Engine.  # noqa: E501

        :param client_impact: The client_impact of this DatasetWorkload.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                client_impact is not None and client_impact > 10):  # noqa: E501
            raise ValueError("Invalid value for `client_impact`, must be a value less than or equal to `10`")  # noqa: E501
        if (self._configuration.client_side_validation and
                client_impact is not None and client_impact < 0):  # noqa: E501
            raise ValueError("Invalid value for `client_impact`, must be a value greater than or equal to `0`")  # noqa: E501

        self._client_impact = client_impact

    @property
    def cluster_resource_impact(self):
        """Gets the cluster_resource_impact of this DatasetWorkload.  # noqa: E501

        The desired workload's impact on the system. Specified by the Job Engine.  # noqa: E501

        :return: The cluster_resource_impact of this DatasetWorkload.  # noqa: E501
        :rtype: int
        """
        return self._cluster_resource_impact

    @cluster_resource_impact.setter
    def cluster_resource_impact(self, cluster_resource_impact):
        """Sets the cluster_resource_impact of this DatasetWorkload.

        The desired workload's impact on the system. Specified by the Job Engine.  # noqa: E501

        :param cluster_resource_impact: The cluster_resource_impact of this DatasetWorkload.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                cluster_resource_impact is not None and cluster_resource_impact > 10):  # noqa: E501
            raise ValueError("Invalid value for `cluster_resource_impact`, must be a value less than or equal to `10`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cluster_resource_impact is not None and cluster_resource_impact < 0):  # noqa: E501
            raise ValueError("Invalid value for `cluster_resource_impact`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cluster_resource_impact = cluster_resource_impact

    @property
    def limits(self):
        """Gets the limits of this DatasetWorkload.  # noqa: E501

        Performance limits for a workload  # noqa: E501

        :return: The limits of this DatasetWorkload.  # noqa: E501
        :rtype: DatasetWorkloadLimits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this DatasetWorkload.

        Performance limits for a workload  # noqa: E501

        :param limits: The limits of this DatasetWorkload.  # noqa: E501
        :type: DatasetWorkloadLimits
        """

        self._limits = limits

    @property
    def max_cpu_us(self):
        """Gets the max_cpu_us of this DatasetWorkload.  # noqa: E501

        The CPU usage limit for a workload in microseconds.  # noqa: E501

        :return: The max_cpu_us of this DatasetWorkload.  # noqa: E501
        :rtype: int
        """
        return self._max_cpu_us

    @max_cpu_us.setter
    def max_cpu_us(self, max_cpu_us):
        """Sets the max_cpu_us of this DatasetWorkload.

        The CPU usage limit for a workload in microseconds.  # noqa: E501

        :param max_cpu_us: The max_cpu_us of this DatasetWorkload.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_cpu_us is not None and max_cpu_us > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `max_cpu_us`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_cpu_us is not None and max_cpu_us < 1000):  # noqa: E501
            raise ValueError("Invalid value for `max_cpu_us`, must be a value greater than or equal to `1000`")  # noqa: E501

        self._max_cpu_us = max_cpu_us

    @property
    def max_disk_reads(self):
        """Gets the max_disk_reads of this DatasetWorkload.  # noqa: E501

        The disk read operation limit for a workload.  # noqa: E501

        :return: The max_disk_reads of this DatasetWorkload.  # noqa: E501
        :rtype: int
        """
        return self._max_disk_reads

    @max_disk_reads.setter
    def max_disk_reads(self, max_disk_reads):
        """Sets the max_disk_reads of this DatasetWorkload.

        The disk read operation limit for a workload.  # noqa: E501

        :param max_disk_reads: The max_disk_reads of this DatasetWorkload.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_disk_reads is not None and max_disk_reads > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `max_disk_reads`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_disk_reads is not None and max_disk_reads < 1000):  # noqa: E501
            raise ValueError("Invalid value for `max_disk_reads`, must be a value greater than or equal to `1000`")  # noqa: E501

        self._max_disk_reads = max_disk_reads

    @property
    def max_disk_writes(self):
        """Gets the max_disk_writes of this DatasetWorkload.  # noqa: E501

        The disk write operation limit for a workload.  # noqa: E501

        :return: The max_disk_writes of this DatasetWorkload.  # noqa: E501
        :rtype: int
        """
        return self._max_disk_writes

    @max_disk_writes.setter
    def max_disk_writes(self, max_disk_writes):
        """Sets the max_disk_writes of this DatasetWorkload.

        The disk write operation limit for a workload.  # noqa: E501

        :param max_disk_writes: The max_disk_writes of this DatasetWorkload.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_disk_writes is not None and max_disk_writes > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `max_disk_writes`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_disk_writes is not None and max_disk_writes < 1000):  # noqa: E501
            raise ValueError("Invalid value for `max_disk_writes`, must be a value greater than or equal to `1000`")  # noqa: E501

        self._max_disk_writes = max_disk_writes

    @property
    def name(self):
        """Gets the name of this DatasetWorkload.  # noqa: E501

        The name of the workload. User specified.  # noqa: E501

        :return: The name of this DatasetWorkload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatasetWorkload.

        The name of the workload. User specified.  # noqa: E501

        :param name: The name of this DatasetWorkload.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 80):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatasetWorkload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasetWorkload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatasetWorkload):
            return True

        return self.to_dict() != other.to_dict()
