# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class AuditLogsBlockerItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consumer': 'str',
        '_date': 'str',
        'lnn': 'int',
        'topic': 'str'
    }

    attribute_map = {
        'consumer': 'consumer',
        '_date': 'date',
        'lnn': 'lnn',
        'topic': 'topic'
    }

    def __init__(self, consumer=None, _date=None, lnn=None, topic=None, _configuration=None):  # noqa: E501
        """AuditLogsBlockerItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._consumer = None
        self.__date = None
        self._lnn = None
        self._topic = None
        self.discriminator = None

        if consumer is not None:
            self.consumer = consumer
        if _date is not None:
            self._date = _date
        if lnn is not None:
            self.lnn = lnn
        if topic is not None:
            self.topic = topic

    @property
    def consumer(self):
        """Gets the consumer of this AuditLogsBlockerItem.  # noqa: E501


        :return: The consumer of this AuditLogsBlockerItem.  # noqa: E501
        :rtype: str
        """
        return self._consumer

    @consumer.setter
    def consumer(self, consumer):
        """Sets the consumer of this AuditLogsBlockerItem.


        :param consumer: The consumer of this AuditLogsBlockerItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                consumer is not None and len(consumer) > 255):
            raise ValueError("Invalid value for `consumer`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                consumer is not None and len(consumer) < 0):
            raise ValueError("Invalid value for `consumer`, length must be greater than or equal to `0`")  # noqa: E501

        self._consumer = consumer

    @property
    def _date(self):
        """Gets the _date of this AuditLogsBlockerItem.  # noqa: E501


        :return: The _date of this AuditLogsBlockerItem.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this AuditLogsBlockerItem.


        :param _date: The _date of this AuditLogsBlockerItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                _date is not None and len(_date) > 255):
            raise ValueError("Invalid value for `_date`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                _date is not None and len(_date) < 0):
            raise ValueError("Invalid value for `_date`, length must be greater than or equal to `0`")  # noqa: E501

        self.__date = _date

    @property
    def lnn(self):
        """Gets the lnn of this AuditLogsBlockerItem.  # noqa: E501


        :return: The lnn of this AuditLogsBlockerItem.  # noqa: E501
        :rtype: int
        """
        return self._lnn

    @lnn.setter
    def lnn(self, lnn):
        """Sets the lnn of this AuditLogsBlockerItem.


        :param lnn: The lnn of this AuditLogsBlockerItem.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                lnn is not None and lnn > 4294967295):  # noqa: E501
            raise ValueError("Invalid value for `lnn`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if (self._configuration.client_side_validation and
                lnn is not None and lnn < 0):  # noqa: E501
            raise ValueError("Invalid value for `lnn`, must be a value greater than or equal to `0`")  # noqa: E501

        self._lnn = lnn

    @property
    def topic(self):
        """Gets the topic of this AuditLogsBlockerItem.  # noqa: E501


        :return: The topic of this AuditLogsBlockerItem.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this AuditLogsBlockerItem.


        :param topic: The topic of this AuditLogsBlockerItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                topic is not None and len(topic) > 255):
            raise ValueError("Invalid value for `topic`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                topic is not None and len(topic) < 0):
            raise ValueError("Invalid value for `topic`, length must be greater than or equal to `0`")  # noqa: E501

        self._topic = topic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditLogsBlockerItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditLogsBlockerItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuditLogsBlockerItem):
            return True

        return self.to_dict() != other.to_dict()
