# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class MetadataiqSettingsSettingsConsumerDatabaseInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_key': 'str',
        'certificate_path': 'str',
        'database_type': 'str',
        'host_port': 'int',
        'hostname': 'str',
        'verify_certificate': 'bool'
    }

    attribute_map = {
        'api_key': 'api_key',
        'certificate_path': 'certificate_path',
        'database_type': 'database_type',
        'host_port': 'host_port',
        'hostname': 'hostname',
        'verify_certificate': 'verify_certificate'
    }

    def __init__(self, api_key=None, certificate_path=None, database_type=None, host_port=None, hostname=None, verify_certificate=None, _configuration=None):  # noqa: E501
        """MetadataiqSettingsSettingsConsumerDatabaseInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._api_key = None
        self._certificate_path = None
        self._database_type = None
        self._host_port = None
        self._hostname = None
        self._verify_certificate = None
        self.discriminator = None

        if api_key is not None:
            self.api_key = api_key
        if certificate_path is not None:
            self.certificate_path = certificate_path
        if database_type is not None:
            self.database_type = database_type
        if host_port is not None:
            self.host_port = host_port
        if hostname is not None:
            self.hostname = hostname
        if verify_certificate is not None:
            self.verify_certificate = verify_certificate

    @property
    def api_key(self):
        """Gets the api_key of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501

        API key to securely connect the database. The default is ''.  # noqa: E501

        :return: The api_key of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this MetadataiqSettingsSettingsConsumerDatabaseInfo.

        API key to securely connect the database. The default is ''.  # noqa: E501

        :param api_key: The api_key of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                api_key is not None and len(api_key) > 2000):
            raise ValueError("Invalid value for `api_key`, length must be less than or equal to `2000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                api_key is not None and len(api_key) < 0):
            raise ValueError("Invalid value for `api_key`, length must be greater than or equal to `0`")  # noqa: E501

        self._api_key = api_key

    @property
    def certificate_path(self):
        """Gets the certificate_path of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501

        Path to the CA certificate to use to ensure the authenticity of the remote database. The path must be under /ifs or empty. Default is ''.  # noqa: E501

        :return: The certificate_path of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501
        :rtype: str
        """
        return self._certificate_path

    @certificate_path.setter
    def certificate_path(self, certificate_path):
        """Sets the certificate_path of this MetadataiqSettingsSettingsConsumerDatabaseInfo.

        Path to the CA certificate to use to ensure the authenticity of the remote database. The path must be under /ifs or empty. Default is ''.  # noqa: E501

        :param certificate_path: The certificate_path of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                certificate_path is not None and len(certificate_path) > 4096):
            raise ValueError("Invalid value for `certificate_path`, length must be less than or equal to `4096`")  # noqa: E501
        if (self._configuration.client_side_validation and
                certificate_path is not None and len(certificate_path) < 0):
            raise ValueError("Invalid value for `certificate_path`, length must be greater than or equal to `0`")  # noqa: E501

        self._certificate_path = certificate_path

    @property
    def database_type(self):
        """Gets the database_type of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501

        Type of database to write. The default is 'ELK database'.  # noqa: E501

        :return: The database_type of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501
        :rtype: str
        """
        return self._database_type

    @database_type.setter
    def database_type(self, database_type):
        """Sets the database_type of this MetadataiqSettingsSettingsConsumerDatabaseInfo.

        Type of database to write. The default is 'ELK database'.  # noqa: E501

        :param database_type: The database_type of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["ELK database", "Other"]  # noqa: E501
        if (self._configuration.client_side_validation and
                database_type not in allowed_values):
            raise ValueError(
                "Invalid value for `database_type` ({0}), must be one of {1}"  # noqa: E501
                .format(database_type, allowed_values)
            )

        self._database_type = database_type

    @property
    def host_port(self):
        """Gets the host_port of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501

        Port to the database. The default is 9200.  # noqa: E501

        :return: The host_port of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501
        :rtype: int
        """
        return self._host_port

    @host_port.setter
    def host_port(self, host_port):
        """Sets the host_port of this MetadataiqSettingsSettingsConsumerDatabaseInfo.

        Port to the database. The default is 9200.  # noqa: E501

        :param host_port: The host_port of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                host_port is not None and host_port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `host_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                host_port is not None and host_port < 1):  # noqa: E501
            raise ValueError("Invalid value for `host_port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._host_port = host_port

    @property
    def hostname(self):
        """Gets the hostname of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501

        Name of the remote ELK database host. The default is ''.  # noqa: E501

        :return: The hostname of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this MetadataiqSettingsSettingsConsumerDatabaseInfo.

        Name of the remote ELK database host. The default is ''.  # noqa: E501

        :param hostname: The hostname of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                hostname is not None and len(hostname) > 2000):
            raise ValueError("Invalid value for `hostname`, length must be less than or equal to `2000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                hostname is not None and len(hostname) < 0):
            raise ValueError("Invalid value for `hostname`, length must be greater than or equal to `0`")  # noqa: E501

        self._hostname = hostname

    @property
    def verify_certificate(self):
        """Gets the verify_certificate of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501

        Use the certificate under the certificate key from the OneFS certificate store to verify the authenticity of the database. The default is True.  # noqa: E501

        :return: The verify_certificate of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501
        :rtype: bool
        """
        return self._verify_certificate

    @verify_certificate.setter
    def verify_certificate(self, verify_certificate):
        """Sets the verify_certificate of this MetadataiqSettingsSettingsConsumerDatabaseInfo.

        Use the certificate under the certificate key from the OneFS certificate store to verify the authenticity of the database. The default is True.  # noqa: E501

        :param verify_certificate: The verify_certificate of this MetadataiqSettingsSettingsConsumerDatabaseInfo.  # noqa: E501
        :type: bool
        """

        self._verify_certificate = verify_certificate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataiqSettingsSettingsConsumerDatabaseInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataiqSettingsSettingsConsumerDatabaseInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetadataiqSettingsSettingsConsumerDatabaseInfo):
            return True

        return self.to_dict() != other.to_dict()
