# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class AntivirusPolicyExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'last_run': 'int'
    }

    attribute_map = {
        'id': 'id',
        'last_run': 'last_run'
    }

    def __init__(self, id=None, last_run=None, _configuration=None):  # noqa: E501
        """AntivirusPolicyExtended - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._last_run = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if last_run is not None:
            self.last_run = last_run

    @property
    def id(self):
        """Gets the id of this AntivirusPolicyExtended.  # noqa: E501

        A unique identifier for the policy.  # noqa: E501

        :return: The id of this AntivirusPolicyExtended.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AntivirusPolicyExtended.

        A unique identifier for the policy.  # noqa: E501

        :param id: The id of this AntivirusPolicyExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                id is not None and len(id) > 255):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and len(id) < 0):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def last_run(self):
        """Gets the last_run of this AntivirusPolicyExtended.  # noqa: E501

        The epoch time of the last run of this policy.  # noqa: E501

        :return: The last_run of this AntivirusPolicyExtended.  # noqa: E501
        :rtype: int
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run):
        """Sets the last_run of this AntivirusPolicyExtended.

        The epoch time of the last run of this policy.  # noqa: E501

        :param last_run: The last_run of this AntivirusPolicyExtended.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_run is not None and last_run > 4294967295):  # noqa: E501
            raise ValueError("Invalid value for `last_run`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_run is not None and last_run < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_run`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_run = last_run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AntivirusPolicyExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AntivirusPolicyExtended):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AntivirusPolicyExtended):
            return True

        return self.to_dict() != other.to_dict()
