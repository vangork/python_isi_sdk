# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class DiagnosticsGatherSettingsExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connectivity': 'bool',
        'esrs': 'bool',
        'ftp_upload': 'bool',
        'ftp_upload_host': 'str',
        'ftp_upload_insecure': 'bool',
        'ftp_upload_mode': 'str',
        'ftp_upload_pass': 'str',
        'ftp_upload_path': 'str',
        'ftp_upload_proxy': 'str',
        'ftp_upload_proxy_port': 'int',
        'ftp_upload_ssl_cert': 'str',
        'ftp_upload_user': 'str',
        'ftp_upload_webui_default': 'bool',
        'gather_begin': 'str',
        'gather_mode': 'str',
        'gather_past': 'str',
        'group': 'str',
        'http_insecure_upload': 'bool',
        'http_upload': 'bool',
        'http_upload_host': 'str',
        'http_upload_path': 'str',
        'http_upload_proxy': 'str',
        'http_upload_proxy_port': 'int',
        'upload': 'bool'
    }

    attribute_map = {
        'connectivity': 'connectivity',
        'esrs': 'esrs',
        'ftp_upload': 'ftp_upload',
        'ftp_upload_host': 'ftp_upload_host',
        'ftp_upload_insecure': 'ftp_upload_insecure',
        'ftp_upload_mode': 'ftp_upload_mode',
        'ftp_upload_pass': 'ftp_upload_pass',
        'ftp_upload_path': 'ftp_upload_path',
        'ftp_upload_proxy': 'ftp_upload_proxy',
        'ftp_upload_proxy_port': 'ftp_upload_proxy_port',
        'ftp_upload_ssl_cert': 'ftp_upload_ssl_cert',
        'ftp_upload_user': 'ftp_upload_user',
        'ftp_upload_webui_default': 'ftp_upload_webui_default',
        'gather_begin': 'gather_begin',
        'gather_mode': 'gather_mode',
        'gather_past': 'gather_past',
        'group': 'group',
        'http_insecure_upload': 'http_insecure_upload',
        'http_upload': 'http_upload',
        'http_upload_host': 'http_upload_host',
        'http_upload_path': 'http_upload_path',
        'http_upload_proxy': 'http_upload_proxy',
        'http_upload_proxy_port': 'http_upload_proxy_port',
        'upload': 'upload'
    }

    def __init__(self, connectivity=None, esrs=None, ftp_upload=None, ftp_upload_host=None, ftp_upload_insecure=None, ftp_upload_mode=None, ftp_upload_pass=None, ftp_upload_path=None, ftp_upload_proxy=None, ftp_upload_proxy_port=None, ftp_upload_ssl_cert=None, ftp_upload_user=None, ftp_upload_webui_default=None, gather_begin=None, gather_mode=None, gather_past=None, group=None, http_insecure_upload=None, http_upload=None, http_upload_host=None, http_upload_path=None, http_upload_proxy=None, http_upload_proxy_port=None, upload=None, _configuration=None):  # noqa: E501
        """DiagnosticsGatherSettingsExtended - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connectivity = None
        self._esrs = None
        self._ftp_upload = None
        self._ftp_upload_host = None
        self._ftp_upload_insecure = None
        self._ftp_upload_mode = None
        self._ftp_upload_pass = None
        self._ftp_upload_path = None
        self._ftp_upload_proxy = None
        self._ftp_upload_proxy_port = None
        self._ftp_upload_ssl_cert = None
        self._ftp_upload_user = None
        self._ftp_upload_webui_default = None
        self._gather_begin = None
        self._gather_mode = None
        self._gather_past = None
        self._group = None
        self._http_insecure_upload = None
        self._http_upload = None
        self._http_upload_host = None
        self._http_upload_path = None
        self._http_upload_proxy = None
        self._http_upload_proxy_port = None
        self._upload = None
        self.discriminator = None

        if connectivity is not None:
            self.connectivity = connectivity
        if esrs is not None:
            self.esrs = esrs
        if ftp_upload is not None:
            self.ftp_upload = ftp_upload
        if ftp_upload_host is not None:
            self.ftp_upload_host = ftp_upload_host
        if ftp_upload_insecure is not None:
            self.ftp_upload_insecure = ftp_upload_insecure
        if ftp_upload_mode is not None:
            self.ftp_upload_mode = ftp_upload_mode
        if ftp_upload_pass is not None:
            self.ftp_upload_pass = ftp_upload_pass
        if ftp_upload_path is not None:
            self.ftp_upload_path = ftp_upload_path
        if ftp_upload_proxy is not None:
            self.ftp_upload_proxy = ftp_upload_proxy
        if ftp_upload_proxy_port is not None:
            self.ftp_upload_proxy_port = ftp_upload_proxy_port
        if ftp_upload_ssl_cert is not None:
            self.ftp_upload_ssl_cert = ftp_upload_ssl_cert
        if ftp_upload_user is not None:
            self.ftp_upload_user = ftp_upload_user
        if ftp_upload_webui_default is not None:
            self.ftp_upload_webui_default = ftp_upload_webui_default
        if gather_begin is not None:
            self.gather_begin = gather_begin
        if gather_mode is not None:
            self.gather_mode = gather_mode
        if gather_past is not None:
            self.gather_past = gather_past
        if group is not None:
            self.group = group
        if http_insecure_upload is not None:
            self.http_insecure_upload = http_insecure_upload
        if http_upload is not None:
            self.http_upload = http_upload
        if http_upload_host is not None:
            self.http_upload_host = http_upload_host
        if http_upload_path is not None:
            self.http_upload_path = http_upload_path
        if http_upload_proxy is not None:
            self.http_upload_proxy = http_upload_proxy
        if http_upload_proxy_port is not None:
            self.http_upload_proxy_port = http_upload_proxy_port
        if upload is not None:
            self.upload = upload

    @property
    def connectivity(self):
        """Gets the connectivity of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Use Dell Technologies connectivity services for upload of gather.  # noqa: E501

        :return: The connectivity of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: bool
        """
        return self._connectivity

    @connectivity.setter
    def connectivity(self, connectivity):
        """Sets the connectivity of this DiagnosticsGatherSettingsExtended.

        Use Dell Technologies connectivity services for upload of gather.  # noqa: E501

        :param connectivity: The connectivity of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: bool
        """

        self._connectivity = connectivity

    @property
    def esrs(self):
        """Gets the esrs of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Use ESRS for upload of gather.  # noqa: E501

        :return: The esrs of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: bool
        """
        return self._esrs

    @esrs.setter
    def esrs(self, esrs):
        """Sets the esrs of this DiagnosticsGatherSettingsExtended.

        Use ESRS for upload of gather.  # noqa: E501

        :param esrs: The esrs of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: bool
        """

        self._esrs = esrs

    @property
    def ftp_upload(self):
        """Gets the ftp_upload of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Use FTP to upload logs from the isi gather command  # noqa: E501

        :return: The ftp_upload of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: bool
        """
        return self._ftp_upload

    @ftp_upload.setter
    def ftp_upload(self, ftp_upload):
        """Sets the ftp_upload of this DiagnosticsGatherSettingsExtended.

        Use FTP to upload logs from the isi gather command  # noqa: E501

        :param ftp_upload: The ftp_upload of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: bool
        """

        self._ftp_upload = ftp_upload

    @property
    def ftp_upload_host(self):
        """Gets the ftp_upload_host of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Alternate FTP host to use for FTP upload.  # noqa: E501

        :return: The ftp_upload_host of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._ftp_upload_host

    @ftp_upload_host.setter
    def ftp_upload_host(self, ftp_upload_host):
        """Sets the ftp_upload_host of this DiagnosticsGatherSettingsExtended.

        Alternate FTP host to use for FTP upload.  # noqa: E501

        :param ftp_upload_host: The ftp_upload_host of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                ftp_upload_host is not None and not re.search(r'(^$|^((([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])(\\.([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])*)$|^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])(\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])){3}$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5}::([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5})?$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7}$)', ftp_upload_host)):  # noqa: E501
            raise ValueError(r"Invalid value for `ftp_upload_host`, must be a follow pattern or equal to `/(^$|^((([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])(\\.([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])*)$|^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])(\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])){3}$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5}::([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5})?$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7}$)/`")  # noqa: E501

        self._ftp_upload_host = ftp_upload_host

    @property
    def ftp_upload_insecure(self):
        """Gets the ftp_upload_insecure of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Whether to attempt a plain text FTP upload.  # noqa: E501

        :return: The ftp_upload_insecure of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: bool
        """
        return self._ftp_upload_insecure

    @ftp_upload_insecure.setter
    def ftp_upload_insecure(self, ftp_upload_insecure):
        """Sets the ftp_upload_insecure of this DiagnosticsGatherSettingsExtended.

        Whether to attempt a plain text FTP upload.  # noqa: E501

        :param ftp_upload_insecure: The ftp_upload_insecure of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: bool
        """

        self._ftp_upload_insecure = ftp_upload_insecure

    @property
    def ftp_upload_mode(self):
        """Gets the ftp_upload_mode of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        FTP upload mode.  # noqa: E501

        :return: The ftp_upload_mode of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._ftp_upload_mode

    @ftp_upload_mode.setter
    def ftp_upload_mode(self, ftp_upload_mode):
        """Sets the ftp_upload_mode of this DiagnosticsGatherSettingsExtended.

        FTP upload mode.  # noqa: E501

        :param ftp_upload_mode: The ftp_upload_mode of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: str
        """

        self._ftp_upload_mode = ftp_upload_mode

    @property
    def ftp_upload_pass(self):
        """Gets the ftp_upload_pass of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        FTP password to use for FTP upload.  # noqa: E501

        :return: The ftp_upload_pass of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._ftp_upload_pass

    @ftp_upload_pass.setter
    def ftp_upload_pass(self, ftp_upload_pass):
        """Sets the ftp_upload_pass of this DiagnosticsGatherSettingsExtended.

        FTP password to use for FTP upload.  # noqa: E501

        :param ftp_upload_pass: The ftp_upload_pass of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: str
        """

        self._ftp_upload_pass = ftp_upload_pass

    @property
    def ftp_upload_path(self):
        """Gets the ftp_upload_path of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Alternate FTP path to use for FTP upload.  # noqa: E501

        :return: The ftp_upload_path of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._ftp_upload_path

    @ftp_upload_path.setter
    def ftp_upload_path(self, ftp_upload_path):
        """Sets the ftp_upload_path of this DiagnosticsGatherSettingsExtended.

        Alternate FTP path to use for FTP upload.  # noqa: E501

        :param ftp_upload_path: The ftp_upload_path of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                ftp_upload_path is not None and len(ftp_upload_path) > 4096):
            raise ValueError("Invalid value for `ftp_upload_path`, length must be less than or equal to `4096`")  # noqa: E501

        self._ftp_upload_path = ftp_upload_path

    @property
    def ftp_upload_proxy(self):
        """Gets the ftp_upload_proxy of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Proxy server to use for FTP upload.  # noqa: E501

        :return: The ftp_upload_proxy of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._ftp_upload_proxy

    @ftp_upload_proxy.setter
    def ftp_upload_proxy(self, ftp_upload_proxy):
        """Sets the ftp_upload_proxy of this DiagnosticsGatherSettingsExtended.

        Proxy server to use for FTP upload.  # noqa: E501

        :param ftp_upload_proxy: The ftp_upload_proxy of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                ftp_upload_proxy is not None and not re.search(r'(^$|^((([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])(\\.([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])*)$|^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])(\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])){3}$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5}::([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5})?$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7}$)', ftp_upload_proxy)):  # noqa: E501
            raise ValueError(r"Invalid value for `ftp_upload_proxy`, must be a follow pattern or equal to `/(^$|^((([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])(\\.([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])*)$|^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])(\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])){3}$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5}::([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5})?$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7}$)/`")  # noqa: E501

        self._ftp_upload_proxy = ftp_upload_proxy

    @property
    def ftp_upload_proxy_port(self):
        """Gets the ftp_upload_proxy_port of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Proxy server port to use for FTP upload.  # noqa: E501

        :return: The ftp_upload_proxy_port of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: int
        """
        return self._ftp_upload_proxy_port

    @ftp_upload_proxy_port.setter
    def ftp_upload_proxy_port(self, ftp_upload_proxy_port):
        """Sets the ftp_upload_proxy_port of this DiagnosticsGatherSettingsExtended.

        Proxy server port to use for FTP upload.  # noqa: E501

        :param ftp_upload_proxy_port: The ftp_upload_proxy_port of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                ftp_upload_proxy_port is not None and ftp_upload_proxy_port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `ftp_upload_proxy_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ftp_upload_proxy_port is not None and ftp_upload_proxy_port < 1):  # noqa: E501
            raise ValueError("Invalid value for `ftp_upload_proxy_port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._ftp_upload_proxy_port = ftp_upload_proxy_port

    @property
    def ftp_upload_ssl_cert(self):
        """Gets the ftp_upload_ssl_cert of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Path to certificate. Leave it blank to use root signed-CA  # noqa: E501

        :return: The ftp_upload_ssl_cert of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._ftp_upload_ssl_cert

    @ftp_upload_ssl_cert.setter
    def ftp_upload_ssl_cert(self, ftp_upload_ssl_cert):
        """Sets the ftp_upload_ssl_cert of this DiagnosticsGatherSettingsExtended.

        Path to certificate. Leave it blank to use root signed-CA  # noqa: E501

        :param ftp_upload_ssl_cert: The ftp_upload_ssl_cert of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                ftp_upload_ssl_cert is not None and len(ftp_upload_ssl_cert) > 4096):
            raise ValueError("Invalid value for `ftp_upload_ssl_cert`, length must be less than or equal to `4096`")  # noqa: E501

        self._ftp_upload_ssl_cert = ftp_upload_ssl_cert

    @property
    def ftp_upload_user(self):
        """Gets the ftp_upload_user of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        FTP user to use for FTP upload.  # noqa: E501

        :return: The ftp_upload_user of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._ftp_upload_user

    @ftp_upload_user.setter
    def ftp_upload_user(self, ftp_upload_user):
        """Sets the ftp_upload_user of this DiagnosticsGatherSettingsExtended.

        FTP user to use for FTP upload.  # noqa: E501

        :param ftp_upload_user: The ftp_upload_user of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                ftp_upload_user is not None and len(ftp_upload_user) > 256):
            raise ValueError("Invalid value for `ftp_upload_user`, length must be less than or equal to `256`")  # noqa: E501

        self._ftp_upload_user = ftp_upload_user

    @property
    def ftp_upload_webui_default(self):
        """Gets the ftp_upload_webui_default of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Hidden key to save default checkbox in WebUI  # noqa: E501

        :return: The ftp_upload_webui_default of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: bool
        """
        return self._ftp_upload_webui_default

    @ftp_upload_webui_default.setter
    def ftp_upload_webui_default(self, ftp_upload_webui_default):
        """Sets the ftp_upload_webui_default of this DiagnosticsGatherSettingsExtended.

        Hidden key to save default checkbox in WebUI  # noqa: E501

        :param ftp_upload_webui_default: The ftp_upload_webui_default of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: bool
        """

        self._ftp_upload_webui_default = ftp_upload_webui_default

    @property
    def gather_begin(self):
        """Gets the gather_begin of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Sets the starting time of files to be gathered using datetime format. The accepted datetime format should be in the form 'YYYY-MM-DD HH:MM' where time is optional. This will gather all files modified past that date.  # noqa: E501

        :return: The gather_begin of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._gather_begin

    @gather_begin.setter
    def gather_begin(self, gather_begin):
        """Sets the gather_begin of this DiagnosticsGatherSettingsExtended.

        Sets the starting time of files to be gathered using datetime format. The accepted datetime format should be in the form 'YYYY-MM-DD HH:MM' where time is optional. This will gather all files modified past that date.  # noqa: E501

        :param gather_begin: The gather_begin of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                gather_begin is not None and len(gather_begin) > 255):
            raise ValueError("Invalid value for `gather_begin`, length must be less than or equal to `255`")  # noqa: E501

        self._gather_begin = gather_begin

    @property
    def gather_mode(self):
        """Gets the gather_mode of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Set gather to full, incremental, or partial.  # noqa: E501

        :return: The gather_mode of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._gather_mode

    @gather_mode.setter
    def gather_mode(self, gather_mode):
        """Sets the gather_mode of this DiagnosticsGatherSettingsExtended.

        Set gather to full, incremental, or partial.  # noqa: E501

        :param gather_mode: The gather_mode of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: str
        """
        allowed_values = ["full", "incremental", "partial"]  # noqa: E501
        if (self._configuration.client_side_validation and
                gather_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `gather_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(gather_mode, allowed_values)
            )

        self._gather_mode = gather_mode

    @property
    def gather_past(self):
        """Gets the gather_past of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Gather logs modified within this time frame. Enter a number followed by a letter for the starting range of files to be gathered, eg. 1h for files last modified in the past hour. Other supported times include d and w for days and weeks respectively.  # noqa: E501

        :return: The gather_past of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._gather_past

    @gather_past.setter
    def gather_past(self, gather_past):
        """Sets the gather_past of this DiagnosticsGatherSettingsExtended.

        Gather logs modified within this time frame. Enter a number followed by a letter for the starting range of files to be gathered, eg. 1h for files last modified in the past hour. Other supported times include d and w for days and weeks respectively.  # noqa: E501

        :param gather_past: The gather_past of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                gather_past is not None and len(gather_past) > 255):
            raise ValueError("Invalid value for `gather_past`, length must be less than or equal to `255`")  # noqa: E501

        self._gather_past = gather_past

    @property
    def group(self):
        """Gets the group of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Only gathers component groups specified by the group field.   # noqa: E501

        :return: The group of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this DiagnosticsGatherSettingsExtended.

        Only gathers component groups specified by the group field.   # noqa: E501

        :param group: The group of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                group is not None and len(group) > 8192):
            raise ValueError("Invalid value for `group`, length must be less than or equal to `8192`")  # noqa: E501

        self._group = group

    @property
    def http_insecure_upload(self):
        """Gets the http_insecure_upload of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Use insecure HTTP to upload logs from the isi gather command  # noqa: E501

        :return: The http_insecure_upload of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: bool
        """
        return self._http_insecure_upload

    @http_insecure_upload.setter
    def http_insecure_upload(self, http_insecure_upload):
        """Sets the http_insecure_upload of this DiagnosticsGatherSettingsExtended.

        Use insecure HTTP to upload logs from the isi gather command  # noqa: E501

        :param http_insecure_upload: The http_insecure_upload of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: bool
        """

        self._http_insecure_upload = http_insecure_upload

    @property
    def http_upload(self):
        """Gets the http_upload of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        This option is deprecated. Use the option http_insecure_upload to upload logs via insecure HTTP from the isi gather command  # noqa: E501

        :return: The http_upload of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: bool
        """
        return self._http_upload

    @http_upload.setter
    def http_upload(self, http_upload):
        """Sets the http_upload of this DiagnosticsGatherSettingsExtended.

        This option is deprecated. Use the option http_insecure_upload to upload logs via insecure HTTP from the isi gather command  # noqa: E501

        :param http_upload: The http_upload of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: bool
        """

        self._http_upload = http_upload

    @property
    def http_upload_host(self):
        """Gets the http_upload_host of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Address of an alternate HTTP host used to upload logs  # noqa: E501

        :return: The http_upload_host of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._http_upload_host

    @http_upload_host.setter
    def http_upload_host(self, http_upload_host):
        """Sets the http_upload_host of this DiagnosticsGatherSettingsExtended.

        Address of an alternate HTTP host used to upload logs  # noqa: E501

        :param http_upload_host: The http_upload_host of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                http_upload_host is not None and not re.search(r'(^$|^((([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])(\\.([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])*)$|^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])(\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])){3}$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5}::([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5})?$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7}$)', http_upload_host)):  # noqa: E501
            raise ValueError(r"Invalid value for `http_upload_host`, must be a follow pattern or equal to `/(^$|^((([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])(\\.([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])*)$|^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])(\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])){3}$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5}::([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5})?$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7}$)/`")  # noqa: E501

        self._http_upload_host = http_upload_host

    @property
    def http_upload_path(self):
        """Gets the http_upload_path of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Alternate path on HTTP server to use for HTTP upload.  # noqa: E501

        :return: The http_upload_path of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._http_upload_path

    @http_upload_path.setter
    def http_upload_path(self, http_upload_path):
        """Sets the http_upload_path of this DiagnosticsGatherSettingsExtended.

        Alternate path on HTTP server to use for HTTP upload.  # noqa: E501

        :param http_upload_path: The http_upload_path of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                http_upload_path is not None and len(http_upload_path) > 4096):
            raise ValueError("Invalid value for `http_upload_path`, length must be less than or equal to `4096`")  # noqa: E501

        self._http_upload_path = http_upload_path

    @property
    def http_upload_proxy(self):
        """Gets the http_upload_proxy of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Proxy server to use for HTTP upload.  # noqa: E501

        :return: The http_upload_proxy of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._http_upload_proxy

    @http_upload_proxy.setter
    def http_upload_proxy(self, http_upload_proxy):
        """Sets the http_upload_proxy of this DiagnosticsGatherSettingsExtended.

        Proxy server to use for HTTP upload.  # noqa: E501

        :param http_upload_proxy: The http_upload_proxy of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                http_upload_proxy is not None and not re.search(r'(^$|^((([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])(\\.([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])*)$|^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])(\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])){3}$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5}::([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5})?$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7}$)', http_upload_proxy)):  # noqa: E501
            raise ValueError(r"Invalid value for `http_upload_proxy`, must be a follow pattern or equal to `/(^$|^((([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])(\\.([a-zA-Z0-9_][a-zA-Z0-9-]{0,61})?[a-zA-Z0-9])*)$|^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])(\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])){3}$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5}::([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5})?$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7}$)/`")  # noqa: E501

        self._http_upload_proxy = http_upload_proxy

    @property
    def http_upload_proxy_port(self):
        """Gets the http_upload_proxy_port of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Proxy server port to use for HTTP upload.  # noqa: E501

        :return: The http_upload_proxy_port of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: int
        """
        return self._http_upload_proxy_port

    @http_upload_proxy_port.setter
    def http_upload_proxy_port(self, http_upload_proxy_port):
        """Sets the http_upload_proxy_port of this DiagnosticsGatherSettingsExtended.

        Proxy server port to use for HTTP upload.  # noqa: E501

        :param http_upload_proxy_port: The http_upload_proxy_port of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                http_upload_proxy_port is not None and http_upload_proxy_port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `http_upload_proxy_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                http_upload_proxy_port is not None and http_upload_proxy_port < 1):  # noqa: E501
            raise ValueError("Invalid value for `http_upload_proxy_port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._http_upload_proxy_port = http_upload_proxy_port

    @property
    def upload(self):
        """Gets the upload of this DiagnosticsGatherSettingsExtended.  # noqa: E501

        Upload gather to Dell EMC.  # noqa: E501

        :return: The upload of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :rtype: bool
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """Sets the upload of this DiagnosticsGatherSettingsExtended.

        Upload gather to Dell EMC.  # noqa: E501

        :param upload: The upload of this DiagnosticsGatherSettingsExtended.  # noqa: E501
        :type: bool
        """

        self._upload = upload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiagnosticsGatherSettingsExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiagnosticsGatherSettingsExtended):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiagnosticsGatherSettingsExtended):
            return True

        return self.to_dict() != other.to_dict()
