# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class DatamoverAccountExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_type': 'str',
        'briefcase': 'str',
        'credentials': 'DatamoverAccountCredentialsExtended',
        'enforce_sse': 'bool',
        'id': 'str',
        'local_network_pool': 'str',
        'max_sparks': 'int',
        'name': 'str',
        'remote_network_pool': 'str',
        'storage_class': 'str',
        'uri': 'str',
        'version': 'int'
    }

    attribute_map = {
        'account_type': 'account_type',
        'briefcase': 'briefcase',
        'credentials': 'credentials',
        'enforce_sse': 'enforce_sse',
        'id': 'id',
        'local_network_pool': 'local_network_pool',
        'max_sparks': 'max_sparks',
        'name': 'name',
        'remote_network_pool': 'remote_network_pool',
        'storage_class': 'storage_class',
        'uri': 'uri',
        'version': 'version'
    }

    def __init__(self, account_type=None, briefcase=None, credentials=None, enforce_sse=None, id=None, local_network_pool=None, max_sparks=None, name=None, remote_network_pool=None, storage_class=None, uri=None, version=None, _configuration=None):  # noqa: E501
        """DatamoverAccountExtended - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_type = None
        self._briefcase = None
        self._credentials = None
        self._enforce_sse = None
        self._id = None
        self._local_network_pool = None
        self._max_sparks = None
        self._name = None
        self._remote_network_pool = None
        self._storage_class = None
        self._uri = None
        self._version = None
        self.discriminator = None

        if account_type is not None:
            self.account_type = account_type
        if briefcase is not None:
            self.briefcase = briefcase
        if credentials is not None:
            self.credentials = credentials
        if enforce_sse is not None:
            self.enforce_sse = enforce_sse
        if id is not None:
            self.id = id
        if local_network_pool is not None:
            self.local_network_pool = local_network_pool
        if max_sparks is not None:
            self.max_sparks = max_sparks
        self.name = name
        if remote_network_pool is not None:
            self.remote_network_pool = remote_network_pool
        if storage_class is not None:
            self.storage_class = storage_class
        if uri is not None:
            self.uri = uri
        if version is not None:
            self.version = version

    @property
    def account_type(self):
        """Gets the account_type of this DatamoverAccountExtended.  # noqa: E501

        Type of the data storage account  # noqa: E501

        :return: The account_type of this DatamoverAccountExtended.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this DatamoverAccountExtended.

        Type of the data storage account  # noqa: E501

        :param account_type: The account_type of this DatamoverAccountExtended.  # noqa: E501
        :type: str
        """
        allowed_values = ["DM", "AWS_S3", "ECS_S3", "AZURE", "GCP"]  # noqa: E501
        if (self._configuration.client_side_validation and
                account_type not in allowed_values):
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def briefcase(self):
        """Gets the briefcase of this DatamoverAccountExtended.  # noqa: E501

        An opaque container for storing additional data in this object, e.g. key-value pairs  # noqa: E501

        :return: The briefcase of this DatamoverAccountExtended.  # noqa: E501
        :rtype: str
        """
        return self._briefcase

    @briefcase.setter
    def briefcase(self, briefcase):
        """Sets the briefcase of this DatamoverAccountExtended.

        An opaque container for storing additional data in this object, e.g. key-value pairs  # noqa: E501

        :param briefcase: The briefcase of this DatamoverAccountExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                briefcase is not None and len(briefcase) > 512):
            raise ValueError("Invalid value for `briefcase`, length must be less than or equal to `512`")  # noqa: E501
        if (self._configuration.client_side_validation and
                briefcase is not None and len(briefcase) < 0):
            raise ValueError("Invalid value for `briefcase`, length must be greater than or equal to `0`")  # noqa: E501

        self._briefcase = briefcase

    @property
    def credentials(self):
        """Gets the credentials of this DatamoverAccountExtended.  # noqa: E501

          # noqa: E501

        :return: The credentials of this DatamoverAccountExtended.  # noqa: E501
        :rtype: DatamoverAccountCredentialsExtended
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this DatamoverAccountExtended.

          # noqa: E501

        :param credentials: The credentials of this DatamoverAccountExtended.  # noqa: E501
        :type: DatamoverAccountCredentialsExtended
        """

        self._credentials = credentials

    @property
    def enforce_sse(self):
        """Gets the enforce_sse of this DatamoverAccountExtended.  # noqa: E501

        Enforce Server-Side Encryption to make sure that data-at-rest is encrypted in the bucket. Only supported for DM AWS-S3 cloud accounts. SSE-S3, SSE-KMS and DSSE-KMS encryption algorithm types are supported on bucket. Warning: The Data Mover Copy Job will fail unless the target bucket exists and has supported encryption enabled.  # noqa: E501

        :return: The enforce_sse of this DatamoverAccountExtended.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_sse

    @enforce_sse.setter
    def enforce_sse(self, enforce_sse):
        """Sets the enforce_sse of this DatamoverAccountExtended.

        Enforce Server-Side Encryption to make sure that data-at-rest is encrypted in the bucket. Only supported for DM AWS-S3 cloud accounts. SSE-S3, SSE-KMS and DSSE-KMS encryption algorithm types are supported on bucket. Warning: The Data Mover Copy Job will fail unless the target bucket exists and has supported encryption enabled.  # noqa: E501

        :param enforce_sse: The enforce_sse of this DatamoverAccountExtended.  # noqa: E501
        :type: bool
        """

        self._enforce_sse = enforce_sse

    @property
    def id(self):
        """Gets the id of this DatamoverAccountExtended.  # noqa: E501

        Unique account ID  # noqa: E501

        :return: The id of this DatamoverAccountExtended.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatamoverAccountExtended.

        Unique account ID  # noqa: E501

        :param id: The id of this DatamoverAccountExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                id is not None and len(id) > 48):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `48`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and len(id) < 2):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `2`")  # noqa: E501

        self._id = id

    @property
    def local_network_pool(self):
        """Gets the local_network_pool of this DatamoverAccountExtended.  # noqa: E501

        Local platform-specific network restriction  # noqa: E501

        :return: The local_network_pool of this DatamoverAccountExtended.  # noqa: E501
        :rtype: str
        """
        return self._local_network_pool

    @local_network_pool.setter
    def local_network_pool(self, local_network_pool):
        """Sets the local_network_pool of this DatamoverAccountExtended.

        Local platform-specific network restriction  # noqa: E501

        :param local_network_pool: The local_network_pool of this DatamoverAccountExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                local_network_pool is not None and len(local_network_pool) > 255):
            raise ValueError("Invalid value for `local_network_pool`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                local_network_pool is not None and len(local_network_pool) < 0):
            raise ValueError("Invalid value for `local_network_pool`, length must be greater than or equal to `0`")  # noqa: E501

        self._local_network_pool = local_network_pool

    @property
    def max_sparks(self):
        """Gets the max_sparks of this DatamoverAccountExtended.  # noqa: E501

        The limit of concurrent running tasks for this account per node  # noqa: E501

        :return: The max_sparks of this DatamoverAccountExtended.  # noqa: E501
        :rtype: int
        """
        return self._max_sparks

    @max_sparks.setter
    def max_sparks(self, max_sparks):
        """Sets the max_sparks of this DatamoverAccountExtended.

        The limit of concurrent running tasks for this account per node  # noqa: E501

        :param max_sparks: The max_sparks of this DatamoverAccountExtended.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_sparks is not None and max_sparks > 4294967295):  # noqa: E501
            raise ValueError("Invalid value for `max_sparks`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_sparks is not None and max_sparks < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_sparks`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_sparks = max_sparks

    @property
    def name(self):
        """Gets the name of this DatamoverAccountExtended.  # noqa: E501

        Name for this Data Mover account  # noqa: E501

        :return: The name of this DatamoverAccountExtended.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatamoverAccountExtended.

        Name for this Data Mover account  # noqa: E501

        :param name: The name of this DatamoverAccountExtended.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def remote_network_pool(self):
        """Gets the remote_network_pool of this DatamoverAccountExtended.  # noqa: E501

        Remote platform-specific network restriction  # noqa: E501

        :return: The remote_network_pool of this DatamoverAccountExtended.  # noqa: E501
        :rtype: str
        """
        return self._remote_network_pool

    @remote_network_pool.setter
    def remote_network_pool(self, remote_network_pool):
        """Sets the remote_network_pool of this DatamoverAccountExtended.

        Remote platform-specific network restriction  # noqa: E501

        :param remote_network_pool: The remote_network_pool of this DatamoverAccountExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                remote_network_pool is not None and len(remote_network_pool) > 255):
            raise ValueError("Invalid value for `remote_network_pool`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                remote_network_pool is not None and len(remote_network_pool) < 0):
            raise ValueError("Invalid value for `remote_network_pool`, length must be greater than or equal to `0`")  # noqa: E501

        self._remote_network_pool = remote_network_pool

    @property
    def storage_class(self):
        """Gets the storage_class of this DatamoverAccountExtended.  # noqa: E501

        The storage class of different cloud accounts.  # noqa: E501

        :return: The storage_class of this DatamoverAccountExtended.  # noqa: E501
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this DatamoverAccountExtended.

        The storage class of different cloud accounts.  # noqa: E501

        :param storage_class: The storage_class of this DatamoverAccountExtended.  # noqa: E501
        :type: str
        """

        self._storage_class = storage_class

    @property
    def uri(self):
        """Gets the uri of this DatamoverAccountExtended.  # noqa: E501

        A valid URI pointing to the data storage  # noqa: E501

        :return: The uri of this DatamoverAccountExtended.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this DatamoverAccountExtended.

        A valid URI pointing to the data storage  # noqa: E501

        :param uri: The uri of this DatamoverAccountExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                uri is not None and len(uri) > 2048):
            raise ValueError("Invalid value for `uri`, length must be less than or equal to `2048`")  # noqa: E501
        if (self._configuration.client_side_validation and
                uri is not None and len(uri) < 1):
            raise ValueError("Invalid value for `uri`, length must be greater than or equal to `1`")  # noqa: E501

        self._uri = uri

    @property
    def version(self):
        """Gets the version of this DatamoverAccountExtended.  # noqa: E501

        Version number of the config store when this object was edited.  # noqa: E501

        :return: The version of this DatamoverAccountExtended.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DatamoverAccountExtended.

        Version number of the config store when this object was edited.  # noqa: E501

        :param version: The version of this DatamoverAccountExtended.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                version is not None and version > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `version`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                version is not None and version < 0):  # noqa: E501
            raise ValueError("Invalid value for `version`, must be a value greater than or equal to `0`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatamoverAccountExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatamoverAccountExtended):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatamoverAccountExtended):
            return True

        return self.to_dict() != other.to_dict()
