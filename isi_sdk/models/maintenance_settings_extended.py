# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class MaintenanceSettingsExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'auto_enable': 'bool',
        'manual_window_enabled': 'bool',
        'manual_window_hours': 'int',
        'manual_window_start': 'int',
        'mode': 'str',
        'node_level_maintenance': 'bool'
    }

    attribute_map = {
        'active': 'active',
        'auto_enable': 'auto_enable',
        'manual_window_enabled': 'manual_window_enabled',
        'manual_window_hours': 'manual_window_hours',
        'manual_window_start': 'manual_window_start',
        'mode': 'mode',
        'node_level_maintenance': 'node_level_maintenance'
    }

    def __init__(self, active=None, auto_enable=None, manual_window_enabled=None, manual_window_hours=None, manual_window_start=None, mode=None, node_level_maintenance=False, _configuration=None):  # noqa: E501
        """MaintenanceSettingsExtended - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active = None
        self._auto_enable = None
        self._manual_window_enabled = None
        self._manual_window_hours = None
        self._manual_window_start = None
        self._mode = None
        self._node_level_maintenance = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if auto_enable is not None:
            self.auto_enable = auto_enable
        if manual_window_enabled is not None:
            self.manual_window_enabled = manual_window_enabled
        if manual_window_hours is not None:
            self.manual_window_hours = manual_window_hours
        if manual_window_start is not None:
            self.manual_window_start = manual_window_start
        if mode is not None:
            self.mode = mode
        if node_level_maintenance is not None:
            self.node_level_maintenance = node_level_maintenance

    @property
    def active(self):
        """Gets the active of this MaintenanceSettingsExtended.  # noqa: E501

        Indicates whether maintenance mode is active.  # noqa: E501

        :return: The active of this MaintenanceSettingsExtended.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this MaintenanceSettingsExtended.

        Indicates whether maintenance mode is active.  # noqa: E501

        :param active: The active of this MaintenanceSettingsExtended.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def auto_enable(self):
        """Gets the auto_enable of this MaintenanceSettingsExtended.  # noqa: E501

        Indicates whether auto maintenance mode is enabled.  # noqa: E501

        :return: The auto_enable of this MaintenanceSettingsExtended.  # noqa: E501
        :rtype: bool
        """
        return self._auto_enable

    @auto_enable.setter
    def auto_enable(self, auto_enable):
        """Sets the auto_enable of this MaintenanceSettingsExtended.

        Indicates whether auto maintenance mode is enabled.  # noqa: E501

        :param auto_enable: The auto_enable of this MaintenanceSettingsExtended.  # noqa: E501
        :type: bool
        """

        self._auto_enable = auto_enable

    @property
    def manual_window_enabled(self):
        """Gets the manual_window_enabled of this MaintenanceSettingsExtended.  # noqa: E501

        Indicates whether the manual maintenance window enabled.  # noqa: E501

        :return: The manual_window_enabled of this MaintenanceSettingsExtended.  # noqa: E501
        :rtype: bool
        """
        return self._manual_window_enabled

    @manual_window_enabled.setter
    def manual_window_enabled(self, manual_window_enabled):
        """Sets the manual_window_enabled of this MaintenanceSettingsExtended.

        Indicates whether the manual maintenance window enabled.  # noqa: E501

        :param manual_window_enabled: The manual_window_enabled of this MaintenanceSettingsExtended.  # noqa: E501
        :type: bool
        """

        self._manual_window_enabled = manual_window_enabled

    @property
    def manual_window_hours(self):
        """Gets the manual_window_hours of this MaintenanceSettingsExtended.  # noqa: E501

        When the manual maintenance window is enabled, the duration of the window in hours.  # noqa: E501

        :return: The manual_window_hours of this MaintenanceSettingsExtended.  # noqa: E501
        :rtype: int
        """
        return self._manual_window_hours

    @manual_window_hours.setter
    def manual_window_hours(self, manual_window_hours):
        """Sets the manual_window_hours of this MaintenanceSettingsExtended.

        When the manual maintenance window is enabled, the duration of the window in hours.  # noqa: E501

        :param manual_window_hours: The manual_window_hours of this MaintenanceSettingsExtended.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                manual_window_hours is not None and manual_window_hours > 199):  # noqa: E501
            raise ValueError("Invalid value for `manual_window_hours`, must be a value less than or equal to `199`")  # noqa: E501
        if (self._configuration.client_side_validation and
                manual_window_hours is not None and manual_window_hours < 1):  # noqa: E501
            raise ValueError("Invalid value for `manual_window_hours`, must be a value greater than or equal to `1`")  # noqa: E501

        self._manual_window_hours = manual_window_hours

    @property
    def manual_window_start(self):
        """Gets the manual_window_start of this MaintenanceSettingsExtended.  # noqa: E501

        When the manual maintenance window is enabled, the time when the maintenance window will start.  # noqa: E501

        :return: The manual_window_start of this MaintenanceSettingsExtended.  # noqa: E501
        :rtype: int
        """
        return self._manual_window_start

    @manual_window_start.setter
    def manual_window_start(self, manual_window_start):
        """Sets the manual_window_start of this MaintenanceSettingsExtended.

        When the manual maintenance window is enabled, the time when the maintenance window will start.  # noqa: E501

        :param manual_window_start: The manual_window_start of this MaintenanceSettingsExtended.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                manual_window_start is not None and manual_window_start > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `manual_window_start`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                manual_window_start is not None and manual_window_start < 0):  # noqa: E501
            raise ValueError("Invalid value for `manual_window_start`, must be a value greater than or equal to `0`")  # noqa: E501

        self._manual_window_start = manual_window_start

    @property
    def mode(self):
        """Gets the mode of this MaintenanceSettingsExtended.  # noqa: E501

        Whether this maintenance window was activated manually or automatically.  # noqa: E501

        :return: The mode of this MaintenanceSettingsExtended.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this MaintenanceSettingsExtended.

        Whether this maintenance window was activated manually or automatically.  # noqa: E501

        :param mode: The mode of this MaintenanceSettingsExtended.  # noqa: E501
        :type: str
        """
        allowed_values = ["auto", "manual"]  # noqa: E501
        if (self._configuration.client_side_validation and
                mode not in allowed_values):
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def node_level_maintenance(self):
        """Gets the node_level_maintenance of this MaintenanceSettingsExtended.  # noqa: E501

        Indicates whether this enable command is only for a node.  # noqa: E501

        :return: The node_level_maintenance of this MaintenanceSettingsExtended.  # noqa: E501
        :rtype: bool
        """
        return self._node_level_maintenance

    @node_level_maintenance.setter
    def node_level_maintenance(self, node_level_maintenance):
        """Sets the node_level_maintenance of this MaintenanceSettingsExtended.

        Indicates whether this enable command is only for a node.  # noqa: E501

        :param node_level_maintenance: The node_level_maintenance of this MaintenanceSettingsExtended.  # noqa: E501
        :type: bool
        """

        self._node_level_maintenance = node_level_maintenance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaintenanceSettingsExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintenanceSettingsExtended):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MaintenanceSettingsExtended):
            return True

        return self.to_dict() != other.to_dict()
