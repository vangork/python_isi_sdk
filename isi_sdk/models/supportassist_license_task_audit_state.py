# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class SupportassistLicenseTaskAuditState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'completed': 'float',
        'in_progress': 'list[float]',
        'queued': 'float',
        'retry_wait': 'list[float]',
        'waiting': 'list[float]'
    }

    attribute_map = {
        'completed': 'completed',
        'in_progress': 'in_progress',
        'queued': 'queued',
        'retry_wait': 'retry_wait',
        'waiting': 'waiting'
    }

    def __init__(self, completed=None, in_progress=None, queued=None, retry_wait=None, waiting=None, _configuration=None):  # noqa: E501
        """SupportassistLicenseTaskAuditState - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._completed = None
        self._in_progress = None
        self._queued = None
        self._retry_wait = None
        self._waiting = None
        self.discriminator = None

        if completed is not None:
            self.completed = completed
        self.in_progress = in_progress
        self.queued = queued
        self.retry_wait = retry_wait
        self.waiting = waiting

    @property
    def completed(self):
        """Gets the completed of this SupportassistLicenseTaskAuditState.  # noqa: E501

        Timestamp when the task was completed  # noqa: E501

        :return: The completed of this SupportassistLicenseTaskAuditState.  # noqa: E501
        :rtype: float
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this SupportassistLicenseTaskAuditState.

        Timestamp when the task was completed  # noqa: E501

        :param completed: The completed of this SupportassistLicenseTaskAuditState.  # noqa: E501
        :type: float
        """
        if (self._configuration.client_side_validation and
                completed is not None and completed > 4294967295):  # noqa: E501
            raise ValueError("Invalid value for `completed`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if (self._configuration.client_side_validation and
                completed is not None and completed < 0):  # noqa: E501
            raise ValueError("Invalid value for `completed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._completed = completed

    @property
    def in_progress(self):
        """Gets the in_progress of this SupportassistLicenseTaskAuditState.  # noqa: E501

        Timestamps of when the task entered the in_progress state  # noqa: E501

        :return: The in_progress of this SupportassistLicenseTaskAuditState.  # noqa: E501
        :rtype: list[float]
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this SupportassistLicenseTaskAuditState.

        Timestamps of when the task entered the in_progress state  # noqa: E501

        :param in_progress: The in_progress of this SupportassistLicenseTaskAuditState.  # noqa: E501
        :type: list[float]
        """
        if self._configuration.client_side_validation and in_progress is None:
            raise ValueError("Invalid value for `in_progress`, must not be `None`")  # noqa: E501

        self._in_progress = in_progress

    @property
    def queued(self):
        """Gets the queued of this SupportassistLicenseTaskAuditState.  # noqa: E501

        Timestamp when the task was submitted  # noqa: E501

        :return: The queued of this SupportassistLicenseTaskAuditState.  # noqa: E501
        :rtype: float
        """
        return self._queued

    @queued.setter
    def queued(self, queued):
        """Sets the queued of this SupportassistLicenseTaskAuditState.

        Timestamp when the task was submitted  # noqa: E501

        :param queued: The queued of this SupportassistLicenseTaskAuditState.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and queued is None:
            raise ValueError("Invalid value for `queued`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                queued is not None and queued > 4294967295):  # noqa: E501
            raise ValueError("Invalid value for `queued`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if (self._configuration.client_side_validation and
                queued is not None and queued < 0):  # noqa: E501
            raise ValueError("Invalid value for `queued`, must be a value greater than or equal to `0`")  # noqa: E501

        self._queued = queued

    @property
    def retry_wait(self):
        """Gets the retry_wait of this SupportassistLicenseTaskAuditState.  # noqa: E501

        Timestamps of when the task entered the retry wait state  # noqa: E501

        :return: The retry_wait of this SupportassistLicenseTaskAuditState.  # noqa: E501
        :rtype: list[float]
        """
        return self._retry_wait

    @retry_wait.setter
    def retry_wait(self, retry_wait):
        """Sets the retry_wait of this SupportassistLicenseTaskAuditState.

        Timestamps of when the task entered the retry wait state  # noqa: E501

        :param retry_wait: The retry_wait of this SupportassistLicenseTaskAuditState.  # noqa: E501
        :type: list[float]
        """
        if self._configuration.client_side_validation and retry_wait is None:
            raise ValueError("Invalid value for `retry_wait`, must not be `None`")  # noqa: E501

        self._retry_wait = retry_wait

    @property
    def waiting(self):
        """Gets the waiting of this SupportassistLicenseTaskAuditState.  # noqa: E501

        Timestamps of when the task entered the waiting state  # noqa: E501

        :return: The waiting of this SupportassistLicenseTaskAuditState.  # noqa: E501
        :rtype: list[float]
        """
        return self._waiting

    @waiting.setter
    def waiting(self, waiting):
        """Sets the waiting of this SupportassistLicenseTaskAuditState.

        Timestamps of when the task entered the waiting state  # noqa: E501

        :param waiting: The waiting of this SupportassistLicenseTaskAuditState.  # noqa: E501
        :type: list[float]
        """
        if self._configuration.client_side_validation and waiting is None:
            raise ValueError("Invalid value for `waiting`, must not be `None`")  # noqa: E501

        self._waiting = waiting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupportassistLicenseTaskAuditState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportassistLicenseTaskAuditState):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SupportassistLicenseTaskAuditState):
            return True

        return self.to_dict() != other.to_dict()
