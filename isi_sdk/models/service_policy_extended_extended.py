# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class ServicePolicyExtendedExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'database_mirrored': 'bool',
        'encrypted': 'bool',
        'source_certificate_id': 'str',
        'source_domain_marked': 'bool'
    }

    attribute_map = {
        'database_mirrored': 'database_mirrored',
        'encrypted': 'encrypted',
        'source_certificate_id': 'source_certificate_id',
        'source_domain_marked': 'source_domain_marked'
    }

    def __init__(self, database_mirrored=None, encrypted=None, source_certificate_id=None, source_domain_marked=None, _configuration=None):  # noqa: E501
        """ServicePolicyExtendedExtended - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._database_mirrored = None
        self._encrypted = None
        self._source_certificate_id = None
        self._source_domain_marked = None
        self.discriminator = None

        self.database_mirrored = database_mirrored
        self.encrypted = encrypted
        self.source_certificate_id = source_certificate_id
        self.source_domain_marked = source_domain_marked

    @property
    def database_mirrored(self):
        """Gets the database_mirrored of this ServicePolicyExtendedExtended.  # noqa: E501

        If true, SyncIQ databases have been mirrored.  # noqa: E501

        :return: The database_mirrored of this ServicePolicyExtendedExtended.  # noqa: E501
        :rtype: bool
        """
        return self._database_mirrored

    @database_mirrored.setter
    def database_mirrored(self, database_mirrored):
        """Sets the database_mirrored of this ServicePolicyExtendedExtended.

        If true, SyncIQ databases have been mirrored.  # noqa: E501

        :param database_mirrored: The database_mirrored of this ServicePolicyExtendedExtended.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and database_mirrored is None:
            raise ValueError("Invalid value for `database_mirrored`, must not be `None`")  # noqa: E501

        self._database_mirrored = database_mirrored

    @property
    def encrypted(self):
        """Gets the encrypted of this ServicePolicyExtendedExtended.  # noqa: E501

        If true, syncs will be encrypted.  # noqa: E501

        :return: The encrypted of this ServicePolicyExtendedExtended.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this ServicePolicyExtendedExtended.

        If true, syncs will be encrypted.  # noqa: E501

        :param encrypted: The encrypted of this ServicePolicyExtendedExtended.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and encrypted is None:
            raise ValueError("Invalid value for `encrypted`, must not be `None`")  # noqa: E501

        self._encrypted = encrypted

    @property
    def source_certificate_id(self):
        """Gets the source_certificate_id of this ServicePolicyExtendedExtended.  # noqa: E501

        The ID of the source cluster certificate being used for encryption.  # noqa: E501

        :return: The source_certificate_id of this ServicePolicyExtendedExtended.  # noqa: E501
        :rtype: str
        """
        return self._source_certificate_id

    @source_certificate_id.setter
    def source_certificate_id(self, source_certificate_id):
        """Sets the source_certificate_id of this ServicePolicyExtendedExtended.

        The ID of the source cluster certificate being used for encryption.  # noqa: E501

        :param source_certificate_id: The source_certificate_id of this ServicePolicyExtendedExtended.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and source_certificate_id is None:
            raise ValueError("Invalid value for `source_certificate_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                source_certificate_id is not None and len(source_certificate_id) > 255):
            raise ValueError("Invalid value for `source_certificate_id`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                source_certificate_id is not None and len(source_certificate_id) < 0):
            raise ValueError("Invalid value for `source_certificate_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._source_certificate_id = source_certificate_id

    @property
    def source_domain_marked(self):
        """Gets the source_domain_marked of this ServicePolicyExtendedExtended.  # noqa: E501

        If true, the source root path has been domain marked with a SyncIQ domain.  # noqa: E501

        :return: The source_domain_marked of this ServicePolicyExtendedExtended.  # noqa: E501
        :rtype: bool
        """
        return self._source_domain_marked

    @source_domain_marked.setter
    def source_domain_marked(self, source_domain_marked):
        """Sets the source_domain_marked of this ServicePolicyExtendedExtended.

        If true, the source root path has been domain marked with a SyncIQ domain.  # noqa: E501

        :param source_domain_marked: The source_domain_marked of this ServicePolicyExtendedExtended.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and source_domain_marked is None:
            raise ValueError("Invalid value for `source_domain_marked`, must not be `None`")  # noqa: E501

        self._source_domain_marked = source_domain_marked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServicePolicyExtendedExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicePolicyExtendedExtended):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServicePolicyExtendedExtended):
            return True

        return self.to_dict() != other.to_dict()
