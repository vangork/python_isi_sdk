# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class ConfigCatalogStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compliance_update': 'bool',
        'enabled': 'bool',
        'last_failed_package': 'ConfigCatalogStatusLastFailedPackage',
        'version': 'str'
    }

    attribute_map = {
        'compliance_update': 'compliance_update',
        'enabled': 'enabled',
        'last_failed_package': 'last_failed_package',
        'version': 'version'
    }

    def __init__(self, compliance_update=None, enabled=None, last_failed_package=None, version=None, _configuration=None):  # noqa: E501
        """ConfigCatalogStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._compliance_update = None
        self._enabled = None
        self._last_failed_package = None
        self._version = None
        self.discriminator = None

        if compliance_update is not None:
            self.compliance_update = compliance_update
        if enabled is not None:
            self.enabled = enabled
        if last_failed_package is not None:
            self.last_failed_package = last_failed_package
        self.version = version

    @property
    def compliance_update(self):
        """Gets the compliance_update of this ConfigCatalogStatus.  # noqa: E501

        Enable flag for compliance mode.  # noqa: E501

        :return: The compliance_update of this ConfigCatalogStatus.  # noqa: E501
        :rtype: bool
        """
        return self._compliance_update

    @compliance_update.setter
    def compliance_update(self, compliance_update):
        """Sets the compliance_update of this ConfigCatalogStatus.

        Enable flag for compliance mode.  # noqa: E501

        :param compliance_update: The compliance_update of this ConfigCatalogStatus.  # noqa: E501
        :type: bool
        """

        self._compliance_update = compliance_update

    @property
    def enabled(self):
        """Gets the enabled of this ConfigCatalogStatus.  # noqa: E501

        Autoupdate enable flag.  # noqa: E501

        :return: The enabled of this ConfigCatalogStatus.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ConfigCatalogStatus.

        Autoupdate enable flag.  # noqa: E501

        :param enabled: The enabled of this ConfigCatalogStatus.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def last_failed_package(self):
        """Gets the last_failed_package of this ConfigCatalogStatus.  # noqa: E501

        The last failed package information.  # noqa: E501

        :return: The last_failed_package of this ConfigCatalogStatus.  # noqa: E501
        :rtype: ConfigCatalogStatusLastFailedPackage
        """
        return self._last_failed_package

    @last_failed_package.setter
    def last_failed_package(self, last_failed_package):
        """Sets the last_failed_package of this ConfigCatalogStatus.

        The last failed package information.  # noqa: E501

        :param last_failed_package: The last_failed_package of this ConfigCatalogStatus.  # noqa: E501
        :type: ConfigCatalogStatusLastFailedPackage
        """

        self._last_failed_package = last_failed_package

    @property
    def version(self):
        """Gets the version of this ConfigCatalogStatus.  # noqa: E501

        The version number.  # noqa: E501

        :return: The version of this ConfigCatalogStatus.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ConfigCatalogStatus.

        The version number.  # noqa: E501

        :param version: The version of this ConfigCatalogStatus.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                version is not None and len(version) > 255):
            raise ValueError("Invalid value for `version`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                version is not None and len(version) < 0):
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `0`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigCatalogStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigCatalogStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigCatalogStatus):
            return True

        return self.to_dict() != other.to_dict()
