# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetExpirationJobStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datasets_deleted': 'int',
        'expiry_time': 'int'
    }

    attribute_map = {
        'datasets_deleted': 'datasets_deleted',
        'expiry_time': 'expiry_time'
    }

    def __init__(self, datasets_deleted=None, expiry_time=None, _configuration=None):  # noqa: E501
        """DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetExpirationJobStatistics - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._datasets_deleted = None
        self._expiry_time = None
        self.discriminator = None

        if datasets_deleted is not None:
            self.datasets_deleted = datasets_deleted
        if expiry_time is not None:
            self.expiry_time = expiry_time

    @property
    def datasets_deleted(self):
        """Gets the datasets_deleted of this DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetExpirationJobStatistics.  # noqa: E501

        Datasets Deleted.  # noqa: E501

        :return: The datasets_deleted of this DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetExpirationJobStatistics.  # noqa: E501
        :rtype: int
        """
        return self._datasets_deleted

    @datasets_deleted.setter
    def datasets_deleted(self, datasets_deleted):
        """Sets the datasets_deleted of this DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetExpirationJobStatistics.

        Datasets Deleted.  # noqa: E501

        :param datasets_deleted: The datasets_deleted of this DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetExpirationJobStatistics.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                datasets_deleted is not None and datasets_deleted > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `datasets_deleted`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                datasets_deleted is not None and datasets_deleted < 0):  # noqa: E501
            raise ValueError("Invalid value for `datasets_deleted`, must be a value greater than or equal to `0`")  # noqa: E501

        self._datasets_deleted = datasets_deleted

    @property
    def expiry_time(self):
        """Gets the expiry_time of this DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetExpirationJobStatistics.  # noqa: E501

        Expiry Time.  # noqa: E501

        :return: The expiry_time of this DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetExpirationJobStatistics.  # noqa: E501
        :rtype: int
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetExpirationJobStatistics.

        Expiry Time.  # noqa: E501

        :param expiry_time: The expiry_time of this DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetExpirationJobStatistics.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                expiry_time is not None and expiry_time > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `expiry_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                expiry_time is not None and expiry_time < 1):  # noqa: E501
            raise ValueError("Invalid value for `expiry_time`, must be a value greater than or equal to `1`")  # noqa: E501

        self._expiry_time = expiry_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetExpirationJobStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetExpirationJobStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatamoverHistoricalJobsJobJobTypeSpecificAttrsDatasetExpirationJobStatistics):
            return True

        return self.to_dict() != other.to_dict()
