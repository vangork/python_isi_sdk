# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class GroupnetSubnetCreateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addr_family': 'str',
        'linklayer': 'str',
        'name': 'str',
        'prefixlen': 'int'
    }

    attribute_map = {
        'addr_family': 'addr_family',
        'linklayer': 'linklayer',
        'name': 'name',
        'prefixlen': 'prefixlen'
    }

    def __init__(self, addr_family=None, linklayer=None, name=None, prefixlen=None, _configuration=None):  # noqa: E501
        """GroupnetSubnetCreateParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._addr_family = None
        self._linklayer = None
        self._name = None
        self._prefixlen = None
        self.discriminator = None

        self.addr_family = addr_family
        if linklayer is not None:
            self.linklayer = linklayer
        self.name = name
        self.prefixlen = prefixlen

    @property
    def addr_family(self):
        """Gets the addr_family of this GroupnetSubnetCreateParams.  # noqa: E501

        IP address format.  # noqa: E501

        :return: The addr_family of this GroupnetSubnetCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._addr_family

    @addr_family.setter
    def addr_family(self, addr_family):
        """Sets the addr_family of this GroupnetSubnetCreateParams.

        IP address format.  # noqa: E501

        :param addr_family: The addr_family of this GroupnetSubnetCreateParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and addr_family is None:
            raise ValueError("Invalid value for `addr_family`, must not be `None`")  # noqa: E501
        allowed_values = ["ipv4", "ipv6"]  # noqa: E501
        if (self._configuration.client_side_validation and
                addr_family not in allowed_values):
            raise ValueError(
                "Invalid value for `addr_family` ({0}), must be one of {1}"  # noqa: E501
                .format(addr_family, allowed_values)
            )

        self._addr_family = addr_family

    @property
    def linklayer(self):
        """Gets the linklayer of this GroupnetSubnetCreateParams.  # noqa: E501

        Specifies the type of network linklayer this Network Subnet uses.  # noqa: E501

        :return: The linklayer of this GroupnetSubnetCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._linklayer

    @linklayer.setter
    def linklayer(self, linklayer):
        """Sets the linklayer of this GroupnetSubnetCreateParams.

        Specifies the type of network linklayer this Network Subnet uses.  # noqa: E501

        :param linklayer: The linklayer of this GroupnetSubnetCreateParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["ethernet", "infiniband"]  # noqa: E501
        if (self._configuration.client_side_validation and
                linklayer not in allowed_values):
            raise ValueError(
                "Invalid value for `linklayer` ({0}), must be one of {1}"  # noqa: E501
                .format(linklayer, allowed_values)
            )

        self._linklayer = linklayer

    @property
    def name(self):
        """Gets the name of this GroupnetSubnetCreateParams.  # noqa: E501

        The name of the subnet.  # noqa: E501

        :return: The name of this GroupnetSubnetCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupnetSubnetCreateParams.

        The name of the subnet.  # noqa: E501

        :param name: The name of this GroupnetSubnetCreateParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 32):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and not re.search(r'^[0-9a-zA-Z_-]*$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[0-9a-zA-Z_-]*$/`")  # noqa: E501

        self._name = name

    @property
    def prefixlen(self):
        """Gets the prefixlen of this GroupnetSubnetCreateParams.  # noqa: E501

        Subnet Prefix Length.  # noqa: E501

        :return: The prefixlen of this GroupnetSubnetCreateParams.  # noqa: E501
        :rtype: int
        """
        return self._prefixlen

    @prefixlen.setter
    def prefixlen(self, prefixlen):
        """Sets the prefixlen of this GroupnetSubnetCreateParams.

        Subnet Prefix Length.  # noqa: E501

        :param prefixlen: The prefixlen of this GroupnetSubnetCreateParams.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and prefixlen is None:
            raise ValueError("Invalid value for `prefixlen`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                prefixlen is not None and prefixlen > 128):  # noqa: E501
            raise ValueError("Invalid value for `prefixlen`, must be a value less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                prefixlen is not None and prefixlen < 1):  # noqa: E501
            raise ValueError("Invalid value for `prefixlen`, must be a value greater than or equal to `1`")  # noqa: E501

        self._prefixlen = prefixlen

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupnetSubnetCreateParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupnetSubnetCreateParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupnetSubnetCreateParams):
            return True

        return self.to_dict() != other.to_dict()
