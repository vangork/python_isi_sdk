# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class ZoneExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'groupnet': 'str',
        'id': 'str',
        'system': 'bool',
        'zone_id': 'int'
    }

    attribute_map = {
        'groupnet': 'groupnet',
        'id': 'id',
        'system': 'system',
        'zone_id': 'zone_id'
    }

    def __init__(self, groupnet=None, id=None, system=None, zone_id=None, _configuration=None):  # noqa: E501
        """ZoneExtended - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._groupnet = None
        self._id = None
        self._system = None
        self._zone_id = None
        self.discriminator = None

        if groupnet is not None:
            self.groupnet = groupnet
        if id is not None:
            self.id = id
        if system is not None:
            self.system = system
        if zone_id is not None:
            self.zone_id = zone_id

    @property
    def groupnet(self):
        """Gets the groupnet of this ZoneExtended.  # noqa: E501

        Groupnet identifier  # noqa: E501

        :return: The groupnet of this ZoneExtended.  # noqa: E501
        :rtype: str
        """
        return self._groupnet

    @groupnet.setter
    def groupnet(self, groupnet):
        """Sets the groupnet of this ZoneExtended.

        Groupnet identifier  # noqa: E501

        :param groupnet: The groupnet of this ZoneExtended.  # noqa: E501
        :type: str
        """

        self._groupnet = groupnet

    @property
    def id(self):
        """Gets the id of this ZoneExtended.  # noqa: E501

        Specifies the system-assigned ID for the access zone. This value is returned when an access zone is created through the POST method  # noqa: E501

        :return: The id of this ZoneExtended.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ZoneExtended.

        Specifies the system-assigned ID for the access zone. This value is returned when an access zone is created through the POST method  # noqa: E501

        :param id: The id of this ZoneExtended.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def system(self):
        """Gets the system of this ZoneExtended.  # noqa: E501

        True if the access zone is built-in.  # noqa: E501

        :return: The system of this ZoneExtended.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this ZoneExtended.

        True if the access zone is built-in.  # noqa: E501

        :param system: The system of this ZoneExtended.  # noqa: E501
        :type: bool
        """

        self._system = system

    @property
    def zone_id(self):
        """Gets the zone_id of this ZoneExtended.  # noqa: E501

        Specifies the access zone ID on the system.  # noqa: E501

        :return: The zone_id of this ZoneExtended.  # noqa: E501
        :rtype: int
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this ZoneExtended.

        Specifies the access zone ID on the system.  # noqa: E501

        :param zone_id: The zone_id of this ZoneExtended.  # noqa: E501
        :type: int
        """

        self._zone_id = zone_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZoneExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZoneExtended):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ZoneExtended):
            return True

        return self.to_dict() != other.to_dict()
