# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class MaintenanceSettingsHistoryItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end': 'int',
        'mode': 'str',
        'start': 'int'
    }

    attribute_map = {
        'end': 'end',
        'mode': 'mode',
        'start': 'start'
    }

    def __init__(self, end=None, mode=None, start=None, _configuration=None):  # noqa: E501
        """MaintenanceSettingsHistoryItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._end = None
        self._mode = None
        self._start = None
        self.discriminator = None

        if end is not None:
            self.end = end
        self.mode = mode
        self.start = start

    @property
    def end(self):
        """Gets the end of this MaintenanceSettingsHistoryItem.  # noqa: E501

        The end time of maintenance mode, as a UNIX timestamp in seconds. Null if maintenance is ongoing.  # noqa: E501

        :return: The end of this MaintenanceSettingsHistoryItem.  # noqa: E501
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this MaintenanceSettingsHistoryItem.

        The end time of maintenance mode, as a UNIX timestamp in seconds. Null if maintenance is ongoing.  # noqa: E501

        :param end: The end of this MaintenanceSettingsHistoryItem.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                end is not None and end > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `end`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501

        self._end = end

    @property
    def mode(self):
        """Gets the mode of this MaintenanceSettingsHistoryItem.  # noqa: E501

        Whether this maintenance window was set manually or automatically.  # noqa: E501

        :return: The mode of this MaintenanceSettingsHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this MaintenanceSettingsHistoryItem.

        Whether this maintenance window was set manually or automatically.  # noqa: E501

        :param mode: The mode of this MaintenanceSettingsHistoryItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501
        allowed_values = ["auto", "manual"]  # noqa: E501
        if (self._configuration.client_side_validation and
                mode not in allowed_values):
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def start(self):
        """Gets the start of this MaintenanceSettingsHistoryItem.  # noqa: E501

        Start time of maintenance mode, as a UNIX timestamp in seconds.  # noqa: E501

        :return: The start of this MaintenanceSettingsHistoryItem.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this MaintenanceSettingsHistoryItem.

        Start time of maintenance mode, as a UNIX timestamp in seconds.  # noqa: E501

        :param start: The start of this MaintenanceSettingsHistoryItem.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                start is not None and start > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `start`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                start is not None and start < 0):  # noqa: E501
            raise ValueError("Invalid value for `start`, must be a value greater than or equal to `0`")  # noqa: E501

        self._start = start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaintenanceSettingsHistoryItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintenanceSettingsHistoryItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MaintenanceSettingsHistoryItem):
            return True

        return self.to_dict() != other.to_dict()
