# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class PapiSettingsExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_configure_child_limit': 'bool',
        'child_settings': 'PapiSettingsChildSettings',
        'config_lock_timeout': 'int',
        'enable_config_lock_feature': 'bool'
    }

    attribute_map = {
        'auto_configure_child_limit': 'auto_configure_child_limit',
        'child_settings': 'child_settings',
        'config_lock_timeout': 'config_lock_timeout',
        'enable_config_lock_feature': 'enable_config_lock_feature'
    }

    def __init__(self, auto_configure_child_limit=True, child_settings=None, config_lock_timeout=None, enable_config_lock_feature=True, _configuration=None):  # noqa: E501
        """PapiSettingsExtended - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auto_configure_child_limit = None
        self._child_settings = None
        self._config_lock_timeout = None
        self._enable_config_lock_feature = None
        self.discriminator = None

        if auto_configure_child_limit is not None:
            self.auto_configure_child_limit = auto_configure_child_limit
        if child_settings is not None:
            self.child_settings = child_settings
        if config_lock_timeout is not None:
            self.config_lock_timeout = config_lock_timeout
        if enable_config_lock_feature is not None:
            self.enable_config_lock_feature = enable_config_lock_feature

    @property
    def auto_configure_child_limit(self):
        """Gets the auto_configure_child_limit of this PapiSettingsExtended.  # noqa: E501

        If true, PAPI automatically configures the child settings.  # noqa: E501

        :return: The auto_configure_child_limit of this PapiSettingsExtended.  # noqa: E501
        :rtype: bool
        """
        return self._auto_configure_child_limit

    @auto_configure_child_limit.setter
    def auto_configure_child_limit(self, auto_configure_child_limit):
        """Sets the auto_configure_child_limit of this PapiSettingsExtended.

        If true, PAPI automatically configures the child settings.  # noqa: E501

        :param auto_configure_child_limit: The auto_configure_child_limit of this PapiSettingsExtended.  # noqa: E501
        :type: bool
        """

        self._auto_configure_child_limit = auto_configure_child_limit

    @property
    def child_settings(self):
        """Gets the child_settings of this PapiSettingsExtended.  # noqa: E501

        This schema describes various values related to PAPI children.  # noqa: E501

        :return: The child_settings of this PapiSettingsExtended.  # noqa: E501
        :rtype: PapiSettingsChildSettings
        """
        return self._child_settings

    @child_settings.setter
    def child_settings(self, child_settings):
        """Sets the child_settings of this PapiSettingsExtended.

        This schema describes various values related to PAPI children.  # noqa: E501

        :param child_settings: The child_settings of this PapiSettingsExtended.  # noqa: E501
        :type: PapiSettingsChildSettings
        """

        self._child_settings = child_settings

    @property
    def config_lock_timeout(self):
        """Gets the config_lock_timeout of this PapiSettingsExtended.  # noqa: E501

        Time out limit of PAPI Configuration lock request.  # noqa: E501

        :return: The config_lock_timeout of this PapiSettingsExtended.  # noqa: E501
        :rtype: int
        """
        return self._config_lock_timeout

    @config_lock_timeout.setter
    def config_lock_timeout(self, config_lock_timeout):
        """Sets the config_lock_timeout of this PapiSettingsExtended.

        Time out limit of PAPI Configuration lock request.  # noqa: E501

        :param config_lock_timeout: The config_lock_timeout of this PapiSettingsExtended.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                config_lock_timeout is not None and config_lock_timeout > 200):  # noqa: E501
            raise ValueError("Invalid value for `config_lock_timeout`, must be a value less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                config_lock_timeout is not None and config_lock_timeout < 0):  # noqa: E501
            raise ValueError("Invalid value for `config_lock_timeout`, must be a value greater than or equal to `0`")  # noqa: E501

        self._config_lock_timeout = config_lock_timeout

    @property
    def enable_config_lock_feature(self):
        """Gets the enable_config_lock_feature of this PapiSettingsExtended.  # noqa: E501

        If true, PAPI configuration lock feature is enabled.  # noqa: E501

        :return: The enable_config_lock_feature of this PapiSettingsExtended.  # noqa: E501
        :rtype: bool
        """
        return self._enable_config_lock_feature

    @enable_config_lock_feature.setter
    def enable_config_lock_feature(self, enable_config_lock_feature):
        """Sets the enable_config_lock_feature of this PapiSettingsExtended.

        If true, PAPI configuration lock feature is enabled.  # noqa: E501

        :param enable_config_lock_feature: The enable_config_lock_feature of this PapiSettingsExtended.  # noqa: E501
        :type: bool
        """

        self._enable_config_lock_feature = enable_config_lock_feature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PapiSettingsExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PapiSettingsExtended):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PapiSettingsExtended):
            return True

        return self.to_dict() != other.to_dict()
