# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class HealthcheckEvaluationSmartlog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'failure_begin_time': 'str',
        'ref_groups': 'str'
    }

    attribute_map = {
        'failure_begin_time': 'failure_begin_time',
        'ref_groups': 'ref_groups'
    }

    def __init__(self, failure_begin_time=None, ref_groups=None, _configuration=None):  # noqa: E501
        """HealthcheckEvaluationSmartlog - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._failure_begin_time = None
        self._ref_groups = None
        self.discriminator = None

        if failure_begin_time is not None:
            self.failure_begin_time = failure_begin_time
        self.ref_groups = ref_groups

    @property
    def failure_begin_time(self):
        """Gets the failure_begin_time of this HealthcheckEvaluationSmartlog.  # noqa: E501

        An ISO 8601 point in time immediately before the relevant failures, in the cluster timezone. Format is YYYY-MM-DD HH:MM. If no such point in time can be found, will be null.  # noqa: E501

        :return: The failure_begin_time of this HealthcheckEvaluationSmartlog.  # noqa: E501
        :rtype: str
        """
        return self._failure_begin_time

    @failure_begin_time.setter
    def failure_begin_time(self, failure_begin_time):
        """Sets the failure_begin_time of this HealthcheckEvaluationSmartlog.

        An ISO 8601 point in time immediately before the relevant failures, in the cluster timezone. Format is YYYY-MM-DD HH:MM. If no such point in time can be found, will be null.  # noqa: E501

        :param failure_begin_time: The failure_begin_time of this HealthcheckEvaluationSmartlog.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                failure_begin_time is not None and len(failure_begin_time) > 16):
            raise ValueError("Invalid value for `failure_begin_time`, length must be less than or equal to `16`")  # noqa: E501
        if (self._configuration.client_side_validation and
                failure_begin_time is not None and len(failure_begin_time) < 16):
            raise ValueError("Invalid value for `failure_begin_time`, length must be greater than or equal to `16`")  # noqa: E501
        if (self._configuration.client_side_validation and
                failure_begin_time is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$', failure_begin_time)):  # noqa: E501
            raise ValueError(r"Invalid value for `failure_begin_time`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$/`")  # noqa: E501

        self._failure_begin_time = failure_begin_time

    @property
    def ref_groups(self):
        """Gets the ref_groups of this HealthcheckEvaluationSmartlog.  # noqa: E501

        Comma separated list of relevant log gather groups.  # noqa: E501

        :return: The ref_groups of this HealthcheckEvaluationSmartlog.  # noqa: E501
        :rtype: str
        """
        return self._ref_groups

    @ref_groups.setter
    def ref_groups(self, ref_groups):
        """Sets the ref_groups of this HealthcheckEvaluationSmartlog.

        Comma separated list of relevant log gather groups.  # noqa: E501

        :param ref_groups: The ref_groups of this HealthcheckEvaluationSmartlog.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ref_groups is None:
            raise ValueError("Invalid value for `ref_groups`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ref_groups is not None and len(ref_groups) > 255):
            raise ValueError("Invalid value for `ref_groups`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ref_groups is not None and len(ref_groups) < 0):
            raise ValueError("Invalid value for `ref_groups`, length must be greater than or equal to `0`")  # noqa: E501

        self._ref_groups = ref_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthcheckEvaluationSmartlog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthcheckEvaluationSmartlog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HealthcheckEvaluationSmartlog):
            return True

        return self.to_dict() != other.to_dict()
