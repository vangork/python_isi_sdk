# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_account_name': 'str',
        'new_tasks_account_name': 'str',
        'source_account_name': 'str',
        'target_account_name': 'str'
    }

    attribute_map = {
        'base_account_name': 'base_account_name',
        'new_tasks_account_name': 'new_tasks_account_name',
        'source_account_name': 'source_account_name',
        'target_account_name': 'target_account_name'
    }

    def __init__(self, base_account_name=None, new_tasks_account_name=None, source_account_name=None, target_account_name=None, _configuration=None):  # noqa: E501
        """DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._base_account_name = None
        self._new_tasks_account_name = None
        self._source_account_name = None
        self._target_account_name = None
        self.discriminator = None

        if base_account_name is not None:
            self.base_account_name = base_account_name
        if new_tasks_account_name is not None:
            self.new_tasks_account_name = new_tasks_account_name
        if source_account_name is not None:
            self.source_account_name = source_account_name
        if target_account_name is not None:
            self.target_account_name = target_account_name

    @property
    def base_account_name(self):
        """Gets the base_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.  # noqa: E501

        Account name of the system on which the policy will be created.  # noqa: E501

        :return: The base_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.  # noqa: E501
        :rtype: str
        """
        return self._base_account_name

    @base_account_name.setter
    def base_account_name(self, base_account_name):
        """Sets the base_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.

        Account name of the system on which the policy will be created.  # noqa: E501

        :param base_account_name: The base_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                base_account_name is not None and len(base_account_name) > 255):
            raise ValueError("Invalid value for `base_account_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                base_account_name is not None and len(base_account_name) < 1):
            raise ValueError("Invalid value for `base_account_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._base_account_name = base_account_name

    @property
    def new_tasks_account_name(self):
        """Gets the new_tasks_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.  # noqa: E501

        Account name of the system on which to create tasks.  # noqa: E501

        :return: The new_tasks_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.  # noqa: E501
        :rtype: str
        """
        return self._new_tasks_account_name

    @new_tasks_account_name.setter
    def new_tasks_account_name(self, new_tasks_account_name):
        """Sets the new_tasks_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.

        Account name of the system on which to create tasks.  # noqa: E501

        :param new_tasks_account_name: The new_tasks_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                new_tasks_account_name is not None and len(new_tasks_account_name) > 255):
            raise ValueError("Invalid value for `new_tasks_account_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                new_tasks_account_name is not None and len(new_tasks_account_name) < 1):
            raise ValueError("Invalid value for `new_tasks_account_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._new_tasks_account_name = new_tasks_account_name

    @property
    def source_account_name(self):
        """Gets the source_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.  # noqa: E501

        Account name of the source data storage system.  # noqa: E501

        :return: The source_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.  # noqa: E501
        :rtype: str
        """
        return self._source_account_name

    @source_account_name.setter
    def source_account_name(self, source_account_name):
        """Sets the source_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.

        Account name of the source data storage system.  # noqa: E501

        :param source_account_name: The source_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                source_account_name is not None and len(source_account_name) > 255):
            raise ValueError("Invalid value for `source_account_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                source_account_name is not None and len(source_account_name) < 1):
            raise ValueError("Invalid value for `source_account_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._source_account_name = source_account_name

    @property
    def target_account_name(self):
        """Gets the target_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.  # noqa: E501

        Account name of the target data storage system.  # noqa: E501

        :return: The target_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.  # noqa: E501
        :rtype: str
        """
        return self._target_account_name

    @target_account_name.setter
    def target_account_name(self, target_account_name):
        """Sets the target_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.

        Account name of the target data storage system.  # noqa: E501

        :param target_account_name: The target_account_name of this DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                target_account_name is not None and len(target_account_name) > 255):
            raise ValueError("Invalid value for `target_account_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                target_account_name is not None and len(target_account_name) < 1):
            raise ValueError("Invalid value for `target_account_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._target_account_name = target_account_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatamoverPolicyPolicySpecificAttrCopyPolicyDatasetCopyPolicyBaseExtended):
            return True

        return self.to_dict() != other.to_dict()
