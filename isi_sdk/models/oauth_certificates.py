# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class OauthCertificates(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cert_fingerprint': 'str',
        'certificate': 'str',
        'common_name': 'str',
        'id': 'str',
        'is_current': 'bool',
        'is_valid': 'bool',
        'issuer': 'str',
        'scope': 'str',
        'service': 'str',
        'signature_algorithm': 'str',
        'signature_hash_algorithm': 'str',
        'subject': 'str',
        'subject_alternative_names': 'list[str]',
        'type': 'str',
        'valid_from_timestamp': 'str',
        'valid_to_timestamp': 'str'
    }

    attribute_map = {
        'cert_fingerprint': 'cert_fingerprint',
        'certificate': 'certificate',
        'common_name': 'common_name',
        'id': 'id',
        'is_current': 'is_current',
        'is_valid': 'is_valid',
        'issuer': 'issuer',
        'scope': 'scope',
        'service': 'service',
        'signature_algorithm': 'signature_algorithm',
        'signature_hash_algorithm': 'signature_hash_algorithm',
        'subject': 'subject',
        'subject_alternative_names': 'subject_alternative_names',
        'type': 'type',
        'valid_from_timestamp': 'valid_from_timestamp',
        'valid_to_timestamp': 'valid_to_timestamp'
    }

    def __init__(self, cert_fingerprint=None, certificate=None, common_name=None, id=None, is_current=None, is_valid=None, issuer=None, scope=None, service=None, signature_algorithm=None, signature_hash_algorithm=None, subject=None, subject_alternative_names=None, type=None, valid_from_timestamp=None, valid_to_timestamp=None, _configuration=None):  # noqa: E501
        """OauthCertificates - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cert_fingerprint = None
        self._certificate = None
        self._common_name = None
        self._id = None
        self._is_current = None
        self._is_valid = None
        self._issuer = None
        self._scope = None
        self._service = None
        self._signature_algorithm = None
        self._signature_hash_algorithm = None
        self._subject = None
        self._subject_alternative_names = None
        self._type = None
        self._valid_from_timestamp = None
        self._valid_to_timestamp = None
        self.discriminator = None

        if cert_fingerprint is not None:
            self.cert_fingerprint = cert_fingerprint
        if certificate is not None:
            self.certificate = certificate
        if common_name is not None:
            self.common_name = common_name
        if id is not None:
            self.id = id
        if is_current is not None:
            self.is_current = is_current
        if is_valid is not None:
            self.is_valid = is_valid
        if issuer is not None:
            self.issuer = issuer
        if scope is not None:
            self.scope = scope
        if service is not None:
            self.service = service
        if signature_algorithm is not None:
            self.signature_algorithm = signature_algorithm
        if signature_hash_algorithm is not None:
            self.signature_hash_algorithm = signature_hash_algorithm
        if subject is not None:
            self.subject = subject
        if subject_alternative_names is not None:
            self.subject_alternative_names = subject_alternative_names
        if type is not None:
            self.type = type
        if valid_from_timestamp is not None:
            self.valid_from_timestamp = valid_from_timestamp
        if valid_to_timestamp is not None:
            self.valid_to_timestamp = valid_to_timestamp

    @property
    def cert_fingerprint(self):
        """Gets the cert_fingerprint of this OauthCertificates.  # noqa: E501

        The hexadecimal representation of the certificate hash, using SHA-256 hash algorithm.  # noqa: E501

        :return: The cert_fingerprint of this OauthCertificates.  # noqa: E501
        :rtype: str
        """
        return self._cert_fingerprint

    @cert_fingerprint.setter
    def cert_fingerprint(self, cert_fingerprint):
        """Sets the cert_fingerprint of this OauthCertificates.

        The hexadecimal representation of the certificate hash, using SHA-256 hash algorithm.  # noqa: E501

        :param cert_fingerprint: The cert_fingerprint of this OauthCertificates.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                cert_fingerprint is not None and len(cert_fingerprint) > 512):
            raise ValueError("Invalid value for `cert_fingerprint`, length must be less than or equal to `512`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cert_fingerprint is not None and len(cert_fingerprint) < 1):
            raise ValueError("Invalid value for `cert_fingerprint`, length must be greater than or equal to `1`")  # noqa: E501

        self._cert_fingerprint = cert_fingerprint

    @property
    def certificate(self):
        """Gets the certificate of this OauthCertificates.  # noqa: E501

        The certificate content encoded as PEM string (including header, footer and line break).  # noqa: E501

        :return: The certificate of this OauthCertificates.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this OauthCertificates.

        The certificate content encoded as PEM string (including header, footer and line break).  # noqa: E501

        :param certificate: The certificate of this OauthCertificates.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                certificate is not None and len(certificate) > 8192):
            raise ValueError("Invalid value for `certificate`, length must be less than or equal to `8192`")  # noqa: E501
        if (self._configuration.client_side_validation and
                certificate is not None and len(certificate) < 1):
            raise ValueError("Invalid value for `certificate`, length must be greater than or equal to `1`")  # noqa: E501

        self._certificate = certificate

    @property
    def common_name(self):
        """Gets the common_name of this OauthCertificates.  # noqa: E501

        The fully qualified domain name of the certificate.  # noqa: E501

        :return: The common_name of this OauthCertificates.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this OauthCertificates.

        The fully qualified domain name of the certificate.  # noqa: E501

        :param common_name: The common_name of this OauthCertificates.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                common_name is not None and len(common_name) > 255):
            raise ValueError("Invalid value for `common_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                common_name is not None and len(common_name) < 1):
            raise ValueError("Invalid value for `common_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._common_name = common_name

    @property
    def id(self):
        """Gets the id of this OauthCertificates.  # noqa: E501

        Unique identifier of certificate.  # noqa: E501

        :return: The id of this OauthCertificates.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OauthCertificates.

        Unique identifier of certificate.  # noqa: E501

        :param id: The id of this OauthCertificates.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                id is not None and len(id) > 255):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and len(id) < 1):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def is_current(self):
        """Gets the is_current of this OauthCertificates.  # noqa: E501

        Indicates whether this is the current certificate to be used by the service. When is_current is false for a certificate, that certificate will not be used by the service.  # noqa: E501

        :return: The is_current of this OauthCertificates.  # noqa: E501
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this OauthCertificates.

        Indicates whether this is the current certificate to be used by the service. When is_current is false for a certificate, that certificate will not be used by the service.  # noqa: E501

        :param is_current: The is_current of this OauthCertificates.  # noqa: E501
        :type: bool
        """

        self._is_current = is_current

    @property
    def is_valid(self):
        """Gets the is_valid of this OauthCertificates.  # noqa: E501

        Indicates whether this is a valid certificate.  # noqa: E501

        :return: The is_valid of this OauthCertificates.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this OauthCertificates.

        Indicates whether this is a valid certificate.  # noqa: E501

        :param is_valid: The is_valid of this OauthCertificates.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def issuer(self):
        """Gets the issuer of this OauthCertificates.  # noqa: E501

        Distinguished name of the certificate issuer.  # noqa: E501

        :return: The issuer of this OauthCertificates.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this OauthCertificates.

        Distinguished name of the certificate issuer.  # noqa: E501

        :param issuer: The issuer of this OauthCertificates.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                issuer is not None and len(issuer) > 2048):
            raise ValueError("Invalid value for `issuer`, length must be less than or equal to `2048`")  # noqa: E501
        if (self._configuration.client_side_validation and
                issuer is not None and len(issuer) < 1):
            raise ValueError("Invalid value for `issuer`, length must be greater than or equal to `1`")  # noqa: E501

        self._issuer = issuer

    @property
    def scope(self):
        """Gets the scope of this OauthCertificates.  # noqa: E501

        Scope narrows the application of a certificate to a specific instance of a service.  # noqa: E501

        :return: The scope of this OauthCertificates.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OauthCertificates.

        Scope narrows the application of a certificate to a specific instance of a service.  # noqa: E501

        :param scope: The scope of this OauthCertificates.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                scope is not None and len(scope) > 255):
            raise ValueError("Invalid value for `scope`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                scope is not None and len(scope) < 1):
            raise ValueError("Invalid value for `scope`, length must be greater than or equal to `1`")  # noqa: E501

        self._scope = scope

    @property
    def service(self):
        """Gets the service of this OauthCertificates.  # noqa: E501

        The kind of the service for which the certificate is used.  # noqa: E501

        :return: The service of this OauthCertificates.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this OauthCertificates.

        The kind of the service for which the certificate is used.  # noqa: E501

        :param service: The service of this OauthCertificates.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "MANAGEMENT_HTTPS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                service not in allowed_values):
            raise ValueError(
                "Invalid value for `service` ({0}), must be one of {1}"  # noqa: E501
                .format(service, allowed_values)
            )

        self._service = service

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this OauthCertificates.  # noqa: E501

        The kind of signature algorithm used for the certificate.  # noqa: E501

        :return: The signature_algorithm of this OauthCertificates.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this OauthCertificates.

        The kind of signature algorithm used for the certificate.  # noqa: E501

        :param signature_algorithm: The signature_algorithm of this OauthCertificates.  # noqa: E501
        :type: str
        """
        allowed_values = ["RSA", "DSA", "Elliptical"]  # noqa: E501
        if (self._configuration.client_side_validation and
                signature_algorithm not in allowed_values):
            raise ValueError(
                "Invalid value for `signature_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(signature_algorithm, allowed_values)
            )

        self._signature_algorithm = signature_algorithm

    @property
    def signature_hash_algorithm(self):
        """Gets the signature_hash_algorithm of this OauthCertificates.  # noqa: E501

        The kind of signature hash algorithm used for the certificate.  # noqa: E501

        :return: The signature_hash_algorithm of this OauthCertificates.  # noqa: E501
        :rtype: str
        """
        return self._signature_hash_algorithm

    @signature_hash_algorithm.setter
    def signature_hash_algorithm(self, signature_hash_algorithm):
        """Sets the signature_hash_algorithm of this OauthCertificates.

        The kind of signature hash algorithm used for the certificate.  # noqa: E501

        :param signature_hash_algorithm: The signature_hash_algorithm of this OauthCertificates.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHA-1", "SHA-256", "SHA-384", "SHA-512", "MD5", "MDC-2"]  # noqa: E501
        if (self._configuration.client_side_validation and
                signature_hash_algorithm not in allowed_values):
            raise ValueError(
                "Invalid value for `signature_hash_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(signature_hash_algorithm, allowed_values)
            )

        self._signature_hash_algorithm = signature_hash_algorithm

    @property
    def subject(self):
        """Gets the subject of this OauthCertificates.  # noqa: E501

        Certificate subject field extracted from the certificate.  # noqa: E501

        :return: The subject of this OauthCertificates.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this OauthCertificates.

        Certificate subject field extracted from the certificate.  # noqa: E501

        :param subject: The subject of this OauthCertificates.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                subject is not None and len(subject) > 2048):
            raise ValueError("Invalid value for `subject`, length must be less than or equal to `2048`")  # noqa: E501
        if (self._configuration.client_side_validation and
                subject is not None and len(subject) < 1):
            raise ValueError("Invalid value for `subject`, length must be greater than or equal to `1`")  # noqa: E501

        self._subject = subject

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this OauthCertificates.  # noqa: E501

        Array of host names of the component to secure, as defined by the RFC5280 subjectAltName attribute.  # noqa: E501

        :return: The subject_alternative_names of this OauthCertificates.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this OauthCertificates.

        Array of host names of the component to secure, as defined by the RFC5280 subjectAltName attribute.  # noqa: E501

        :param subject_alternative_names: The subject_alternative_names of this OauthCertificates.  # noqa: E501
        :type: list[str]
        """

        self._subject_alternative_names = subject_alternative_names

    @property
    def type(self):
        """Gets the type of this OauthCertificates.  # noqa: E501

        Whether the certificate is used as client or server certificate, and whether it is a CA certificate.  # noqa: E501

        :return: The type of this OauthCertificates.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OauthCertificates.

        Whether the certificate is used as client or server certificate, and whether it is a CA certificate.  # noqa: E501

        :param type: The type of this OauthCertificates.  # noqa: E501
        :type: str
        """
        allowed_values = ["SERVER", "CLIENT", "CA", "CRYPTOGRAPHY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def valid_from_timestamp(self):
        """Gets the valid_from_timestamp of this OauthCertificates.  # noqa: E501

        The date in '%Y-%m-%dT%H:%M:%SZ' format when the certificate becomes valid.  # noqa: E501

        :return: The valid_from_timestamp of this OauthCertificates.  # noqa: E501
        :rtype: str
        """
        return self._valid_from_timestamp

    @valid_from_timestamp.setter
    def valid_from_timestamp(self, valid_from_timestamp):
        """Sets the valid_from_timestamp of this OauthCertificates.

        The date in '%Y-%m-%dT%H:%M:%SZ' format when the certificate becomes valid.  # noqa: E501

        :param valid_from_timestamp: The valid_from_timestamp of this OauthCertificates.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                valid_from_timestamp is not None and len(valid_from_timestamp) > 255):
            raise ValueError("Invalid value for `valid_from_timestamp`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                valid_from_timestamp is not None and len(valid_from_timestamp) < 1):
            raise ValueError("Invalid value for `valid_from_timestamp`, length must be greater than or equal to `1`")  # noqa: E501

        self._valid_from_timestamp = valid_from_timestamp

    @property
    def valid_to_timestamp(self):
        """Gets the valid_to_timestamp of this OauthCertificates.  # noqa: E501

        The date in '%Y-%m-%dT%H:%M:%SZ' format when the certificate is no longer valid.  # noqa: E501

        :return: The valid_to_timestamp of this OauthCertificates.  # noqa: E501
        :rtype: str
        """
        return self._valid_to_timestamp

    @valid_to_timestamp.setter
    def valid_to_timestamp(self, valid_to_timestamp):
        """Sets the valid_to_timestamp of this OauthCertificates.

        The date in '%Y-%m-%dT%H:%M:%SZ' format when the certificate is no longer valid.  # noqa: E501

        :param valid_to_timestamp: The valid_to_timestamp of this OauthCertificates.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                valid_to_timestamp is not None and len(valid_to_timestamp) > 255):
            raise ValueError("Invalid value for `valid_to_timestamp`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                valid_to_timestamp is not None and len(valid_to_timestamp) < 1):
            raise ValueError("Invalid value for `valid_to_timestamp`, length must be greater than or equal to `1`")  # noqa: E501

        self._valid_to_timestamp = valid_to_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OauthCertificates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OauthCertificates):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OauthCertificates):
            return True

        return self.to_dict() != other.to_dict()
