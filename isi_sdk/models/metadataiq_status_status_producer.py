# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class MetadataiqStatusStatusProducer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'changelistcreate_job_id': 'int',
        'end_time': 'int',
        'error_count': 'int',
        'job_failures': 'int',
        'new_snapshot_id': 'int',
        'new_snapshot_lock_id': 'int',
        'old_snapshot_id': 'int',
        'old_snapshot_lock_id': 'int',
        'running_lnn': 'str',
        'start_time': 'int',
        'state': 'str'
    }

    attribute_map = {
        'changelistcreate_job_id': 'changelistcreate_job_id',
        'end_time': 'end_time',
        'error_count': 'error_count',
        'job_failures': 'job_failures',
        'new_snapshot_id': 'new_snapshot_id',
        'new_snapshot_lock_id': 'new_snapshot_lock_id',
        'old_snapshot_id': 'old_snapshot_id',
        'old_snapshot_lock_id': 'old_snapshot_lock_id',
        'running_lnn': 'running_lnn',
        'start_time': 'start_time',
        'state': 'state'
    }

    def __init__(self, changelistcreate_job_id=None, end_time=None, error_count=None, job_failures=None, new_snapshot_id=None, new_snapshot_lock_id=None, old_snapshot_id=None, old_snapshot_lock_id=None, running_lnn=None, start_time=None, state=None, _configuration=None):  # noqa: E501
        """MetadataiqStatusStatusProducer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._changelistcreate_job_id = None
        self._end_time = None
        self._error_count = None
        self._job_failures = None
        self._new_snapshot_id = None
        self._new_snapshot_lock_id = None
        self._old_snapshot_id = None
        self._old_snapshot_lock_id = None
        self._running_lnn = None
        self._start_time = None
        self._state = None
        self.discriminator = None

        if changelistcreate_job_id is not None:
            self.changelistcreate_job_id = changelistcreate_job_id
        if end_time is not None:
            self.end_time = end_time
        if error_count is not None:
            self.error_count = error_count
        if job_failures is not None:
            self.job_failures = job_failures
        if new_snapshot_id is not None:
            self.new_snapshot_id = new_snapshot_id
        if new_snapshot_lock_id is not None:
            self.new_snapshot_lock_id = new_snapshot_lock_id
        if old_snapshot_id is not None:
            self.old_snapshot_id = old_snapshot_id
        if old_snapshot_lock_id is not None:
            self.old_snapshot_lock_id = old_snapshot_lock_id
        if running_lnn is not None:
            self.running_lnn = running_lnn
        if start_time is not None:
            self.start_time = start_time
        if state is not None:
            self.state = state

    @property
    def changelistcreate_job_id(self):
        """Gets the changelistcreate_job_id of this MetadataiqStatusStatusProducer.  # noqa: E501

        The ChangelistCreate Job ID for the current snapid pair.  # noqa: E501

        :return: The changelistcreate_job_id of this MetadataiqStatusStatusProducer.  # noqa: E501
        :rtype: int
        """
        return self._changelistcreate_job_id

    @changelistcreate_job_id.setter
    def changelistcreate_job_id(self, changelistcreate_job_id):
        """Sets the changelistcreate_job_id of this MetadataiqStatusStatusProducer.

        The ChangelistCreate Job ID for the current snapid pair.  # noqa: E501

        :param changelistcreate_job_id: The changelistcreate_job_id of this MetadataiqStatusStatusProducer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                changelistcreate_job_id is not None and changelistcreate_job_id > 4294967295):  # noqa: E501
            raise ValueError("Invalid value for `changelistcreate_job_id`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if (self._configuration.client_side_validation and
                changelistcreate_job_id is not None and changelistcreate_job_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `changelistcreate_job_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._changelistcreate_job_id = changelistcreate_job_id

    @property
    def end_time(self):
        """Gets the end_time of this MetadataiqStatusStatusProducer.  # noqa: E501

        Time when the MetadataIQ current Producer Cycle ended.   # noqa: E501

        :return: The end_time of this MetadataiqStatusStatusProducer.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this MetadataiqStatusStatusProducer.

        Time when the MetadataIQ current Producer Cycle ended.   # noqa: E501

        :param end_time: The end_time of this MetadataiqStatusStatusProducer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                end_time is not None and end_time > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `end_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                end_time is not None and end_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `end_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._end_time = end_time

    @property
    def error_count(self):
        """Gets the error_count of this MetadataiqStatusStatusProducer.  # noqa: E501

        Number of errors encountered during the MetadataIQ current Producer Cycle.  # noqa: E501

        :return: The error_count of this MetadataiqStatusStatusProducer.  # noqa: E501
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this MetadataiqStatusStatusProducer.

        Number of errors encountered during the MetadataIQ current Producer Cycle.  # noqa: E501

        :param error_count: The error_count of this MetadataiqStatusStatusProducer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                error_count is not None and error_count > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `error_count`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                error_count is not None and error_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `error_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._error_count = error_count

    @property
    def job_failures(self):
        """Gets the job_failures of this MetadataiqStatusStatusProducer.  # noqa: E501

        Consecutive failed jobs for the current snapid pair.  # noqa: E501

        :return: The job_failures of this MetadataiqStatusStatusProducer.  # noqa: E501
        :rtype: int
        """
        return self._job_failures

    @job_failures.setter
    def job_failures(self, job_failures):
        """Sets the job_failures of this MetadataiqStatusStatusProducer.

        Consecutive failed jobs for the current snapid pair.  # noqa: E501

        :param job_failures: The job_failures of this MetadataiqStatusStatusProducer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                job_failures is not None and job_failures > 255):  # noqa: E501
            raise ValueError("Invalid value for `job_failures`, must be a value less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                job_failures is not None and job_failures < 0):  # noqa: E501
            raise ValueError("Invalid value for `job_failures`, must be a value greater than or equal to `0`")  # noqa: E501

        self._job_failures = job_failures

    @property
    def new_snapshot_id(self):
        """Gets the new_snapshot_id of this MetadataiqStatusStatusProducer.  # noqa: E501

        The new snapshot ID of the current MetadataIQ cycle.  # noqa: E501

        :return: The new_snapshot_id of this MetadataiqStatusStatusProducer.  # noqa: E501
        :rtype: int
        """
        return self._new_snapshot_id

    @new_snapshot_id.setter
    def new_snapshot_id(self, new_snapshot_id):
        """Sets the new_snapshot_id of this MetadataiqStatusStatusProducer.

        The new snapshot ID of the current MetadataIQ cycle.  # noqa: E501

        :param new_snapshot_id: The new_snapshot_id of this MetadataiqStatusStatusProducer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                new_snapshot_id is not None and new_snapshot_id > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `new_snapshot_id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                new_snapshot_id is not None and new_snapshot_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `new_snapshot_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._new_snapshot_id = new_snapshot_id

    @property
    def new_snapshot_lock_id(self):
        """Gets the new_snapshot_lock_id of this MetadataiqStatusStatusProducer.  # noqa: E501

        The new snapshot lock ID of the new snapshot from the current MetadataIQ cycle.  # noqa: E501

        :return: The new_snapshot_lock_id of this MetadataiqStatusStatusProducer.  # noqa: E501
        :rtype: int
        """
        return self._new_snapshot_lock_id

    @new_snapshot_lock_id.setter
    def new_snapshot_lock_id(self, new_snapshot_lock_id):
        """Sets the new_snapshot_lock_id of this MetadataiqStatusStatusProducer.

        The new snapshot lock ID of the new snapshot from the current MetadataIQ cycle.  # noqa: E501

        :param new_snapshot_lock_id: The new_snapshot_lock_id of this MetadataiqStatusStatusProducer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                new_snapshot_lock_id is not None and new_snapshot_lock_id > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `new_snapshot_lock_id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                new_snapshot_lock_id is not None and new_snapshot_lock_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `new_snapshot_lock_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._new_snapshot_lock_id = new_snapshot_lock_id

    @property
    def old_snapshot_id(self):
        """Gets the old_snapshot_id of this MetadataiqStatusStatusProducer.  # noqa: E501

        The ID of the snapshot created at the start of the previous MetadataIQ cycle. First instance will be Invalid Snapid.  # noqa: E501

        :return: The old_snapshot_id of this MetadataiqStatusStatusProducer.  # noqa: E501
        :rtype: int
        """
        return self._old_snapshot_id

    @old_snapshot_id.setter
    def old_snapshot_id(self, old_snapshot_id):
        """Sets the old_snapshot_id of this MetadataiqStatusStatusProducer.

        The ID of the snapshot created at the start of the previous MetadataIQ cycle. First instance will be Invalid Snapid.  # noqa: E501

        :param old_snapshot_id: The old_snapshot_id of this MetadataiqStatusStatusProducer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                old_snapshot_id is not None and old_snapshot_id > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `old_snapshot_id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                old_snapshot_id is not None and old_snapshot_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `old_snapshot_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._old_snapshot_id = old_snapshot_id

    @property
    def old_snapshot_lock_id(self):
        """Gets the old_snapshot_lock_id of this MetadataiqStatusStatusProducer.  # noqa: E501

        The lock ID of the snapshot created at the start of the previous MetadataIQ Cycle. First instance will be Invalid Lock ID.  # noqa: E501

        :return: The old_snapshot_lock_id of this MetadataiqStatusStatusProducer.  # noqa: E501
        :rtype: int
        """
        return self._old_snapshot_lock_id

    @old_snapshot_lock_id.setter
    def old_snapshot_lock_id(self, old_snapshot_lock_id):
        """Sets the old_snapshot_lock_id of this MetadataiqStatusStatusProducer.

        The lock ID of the snapshot created at the start of the previous MetadataIQ Cycle. First instance will be Invalid Lock ID.  # noqa: E501

        :param old_snapshot_lock_id: The old_snapshot_lock_id of this MetadataiqStatusStatusProducer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                old_snapshot_lock_id is not None and old_snapshot_lock_id > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `old_snapshot_lock_id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                old_snapshot_lock_id is not None and old_snapshot_lock_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `old_snapshot_lock_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._old_snapshot_lock_id = old_snapshot_lock_id

    @property
    def running_lnn(self):
        """Gets the running_lnn of this MetadataiqStatusStatusProducer.  # noqa: E501

        The LNN on which the MetadataIQ Producer is currently running.  # noqa: E501

        :return: The running_lnn of this MetadataiqStatusStatusProducer.  # noqa: E501
        :rtype: str
        """
        return self._running_lnn

    @running_lnn.setter
    def running_lnn(self, running_lnn):
        """Sets the running_lnn of this MetadataiqStatusStatusProducer.

        The LNN on which the MetadataIQ Producer is currently running.  # noqa: E501

        :param running_lnn: The running_lnn of this MetadataiqStatusStatusProducer.  # noqa: E501
        :type: str
        """

        self._running_lnn = running_lnn

    @property
    def start_time(self):
        """Gets the start_time of this MetadataiqStatusStatusProducer.  # noqa: E501

        Time when the MetadataIQ current Producer Cycle started. Default is 0 (0 means never)  # noqa: E501

        :return: The start_time of this MetadataiqStatusStatusProducer.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MetadataiqStatusStatusProducer.

        Time when the MetadataIQ current Producer Cycle started. Default is 0 (0 means never)  # noqa: E501

        :param start_time: The start_time of this MetadataiqStatusStatusProducer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                start_time is not None and start_time > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                start_time is not None and start_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this MetadataiqStatusStatusProducer.  # noqa: E501

        State of the MetadataIQ current Producer Cycle.  # noqa: E501

        :return: The state of this MetadataiqStatusStatusProducer.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MetadataiqStatusStatusProducer.

        State of the MetadataIQ current Producer Cycle.  # noqa: E501

        :param state: The state of this MetadataiqStatusStatusProducer.  # noqa: E501
        :type: str
        """
        allowed_values = ["Waiting For Next Schedule", "Running ChangelistCreate Job", "Paused ChangelistCreate Job", "ChangelistCreate Job result Ready", "Cycle Failed", "Fatal Error"]  # noqa: E501
        if (self._configuration.client_side_validation and
                state not in allowed_values):
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataiqStatusStatusProducer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataiqStatusStatusProducer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetadataiqStatusStatusProducer):
            return True

        return self.to_dict() != other.to_dict()
