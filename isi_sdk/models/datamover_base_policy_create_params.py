# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class DatamoverBasePolicyCreateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'override_list': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'override_list': 'override_list'
    }

    def __init__(self, id=None, name=None, override_list=None, _configuration=None):  # noqa: E501
        """DatamoverBasePolicyCreateParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._override_list = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.override_list = override_list

    @property
    def id(self):
        """Gets the id of this DatamoverBasePolicyCreateParams.  # noqa: E501

        The unique base policy identifier.  # noqa: E501

        :return: The id of this DatamoverBasePolicyCreateParams.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatamoverBasePolicyCreateParams.

        The unique base policy identifier.  # noqa: E501

        :param id: The id of this DatamoverBasePolicyCreateParams.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                id is not None and id > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and id < 0):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this DatamoverBasePolicyCreateParams.  # noqa: E501

        A user provided base policy name.  # noqa: E501

        :return: The name of this DatamoverBasePolicyCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatamoverBasePolicyCreateParams.

        A user provided base policy name.  # noqa: E501

        :param name: The name of this DatamoverBasePolicyCreateParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def override_list(self):
        """Gets the override_list of this DatamoverBasePolicyCreateParams.  # noqa: E501

        The list of fields which will override a concrete policy.  # noqa: E501

        :return: The override_list of this DatamoverBasePolicyCreateParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._override_list

    @override_list.setter
    def override_list(self, override_list):
        """Sets the override_list of this DatamoverBasePolicyCreateParams.

        The list of fields which will override a concrete policy.  # noqa: E501

        :param override_list: The override_list of this DatamoverBasePolicyCreateParams.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and override_list is None:
            raise ValueError("Invalid value for `override_list`, must not be `None`")  # noqa: E501
        allowed_values = ["ENABLED", "PRIORITY", "SCHEDULE", "BRIEFCASE", "SOURCE_ACCOUNT_ID", "TARGET_ACCOUNT_ID", "BASE_ACCOUNT_ID", "TASK_ACCOUNT_ID", "SUBPATHS", "SOURCE_BASE_PATH", "TARGET_BASE_PATH", "SRC_DATASET_RETENTION", "TGT_DATASET_RETENTION"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(override_list).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `override_list` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(override_list) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._override_list = override_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatamoverBasePolicyCreateParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatamoverBasePolicyCreateParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatamoverBasePolicyCreateParams):
            return True

        return self.to_dict() != other.to_dict()
