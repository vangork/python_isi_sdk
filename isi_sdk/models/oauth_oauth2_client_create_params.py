# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class OauthOauth2ClientCreateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization_code_flow': 'bool',
        'client_name': 'str',
        'redirect_uris': 'list[str]',
        'token_exchange_enabled': 'bool'
    }

    attribute_map = {
        'authorization_code_flow': 'authorization_code_flow',
        'client_name': 'client_name',
        'redirect_uris': 'redirect_uris',
        'token_exchange_enabled': 'token_exchange_enabled'
    }

    def __init__(self, authorization_code_flow=None, client_name=None, redirect_uris=None, token_exchange_enabled=None, _configuration=None):  # noqa: E501
        """OauthOauth2ClientCreateParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._authorization_code_flow = None
        self._client_name = None
        self._redirect_uris = None
        self._token_exchange_enabled = None
        self.discriminator = None

        self.authorization_code_flow = authorization_code_flow
        self.client_name = client_name
        self.redirect_uris = redirect_uris
        self.token_exchange_enabled = token_exchange_enabled

    @property
    def authorization_code_flow(self):
        """Gets the authorization_code_flow of this OauthOauth2ClientCreateParams.  # noqa: E501

        When true, the authorization code flow will be supported.  # noqa: E501

        :return: The authorization_code_flow of this OauthOauth2ClientCreateParams.  # noqa: E501
        :rtype: bool
        """
        return self._authorization_code_flow

    @authorization_code_flow.setter
    def authorization_code_flow(self, authorization_code_flow):
        """Sets the authorization_code_flow of this OauthOauth2ClientCreateParams.

        When true, the authorization code flow will be supported.  # noqa: E501

        :param authorization_code_flow: The authorization_code_flow of this OauthOauth2ClientCreateParams.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and authorization_code_flow is None:
            raise ValueError("Invalid value for `authorization_code_flow`, must not be `None`")  # noqa: E501

        self._authorization_code_flow = authorization_code_flow

    @property
    def client_name(self):
        """Gets the client_name of this OauthOauth2ClientCreateParams.  # noqa: E501

        User friendly name for OAuth2 client.  # noqa: E501

        :return: The client_name of this OauthOauth2ClientCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this OauthOauth2ClientCreateParams.

        User friendly name for OAuth2 client.  # noqa: E501

        :param client_name: The client_name of this OauthOauth2ClientCreateParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and client_name is None:
            raise ValueError("Invalid value for `client_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                client_name is not None and len(client_name) > 255):
            raise ValueError("Invalid value for `client_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                client_name is not None and len(client_name) < 1):
            raise ValueError("Invalid value for `client_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._client_name = client_name

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this OauthOauth2ClientCreateParams.  # noqa: E501

        Array of URIs to which the client wants to redirect.  # noqa: E501

        :return: The redirect_uris of this OauthOauth2ClientCreateParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this OauthOauth2ClientCreateParams.

        Array of URIs to which the client wants to redirect.  # noqa: E501

        :param redirect_uris: The redirect_uris of this OauthOauth2ClientCreateParams.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and redirect_uris is None:
            raise ValueError("Invalid value for `redirect_uris`, must not be `None`")  # noqa: E501

        self._redirect_uris = redirect_uris

    @property
    def token_exchange_enabled(self):
        """Gets the token_exchange_enabled of this OauthOauth2ClientCreateParams.  # noqa: E501

        When true, the token exchange flow will be supported.  # noqa: E501

        :return: The token_exchange_enabled of this OauthOauth2ClientCreateParams.  # noqa: E501
        :rtype: bool
        """
        return self._token_exchange_enabled

    @token_exchange_enabled.setter
    def token_exchange_enabled(self, token_exchange_enabled):
        """Sets the token_exchange_enabled of this OauthOauth2ClientCreateParams.

        When true, the token exchange flow will be supported.  # noqa: E501

        :param token_exchange_enabled: The token_exchange_enabled of this OauthOauth2ClientCreateParams.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and token_exchange_enabled is None:
            raise ValueError("Invalid value for `token_exchange_enabled`, must not be `None`")  # noqa: E501

        self._token_exchange_enabled = token_exchange_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OauthOauth2ClientCreateParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OauthOauth2ClientCreateParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OauthOauth2ClientCreateParams):
            return True

        return self.to_dict() != other.to_dict()
