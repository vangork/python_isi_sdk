# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class EventSuppressSuppression(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'description': 'str',
        'id': 'str',
        'name': 'str',
        'node': 'bool',
        'suppressed': 'bool'
    }

    attribute_map = {
        'category': 'category',
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'node': 'node',
        'suppressed': 'suppressed'
    }

    def __init__(self, category=None, description=None, id=None, name=None, node=None, suppressed=None, _configuration=None):  # noqa: E501
        """EventSuppressSuppression - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._category = None
        self._description = None
        self._id = None
        self._name = None
        self._node = None
        self._suppressed = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if node is not None:
            self.node = node
        if suppressed is not None:
            self.suppressed = suppressed

    @property
    def category(self):
        """Gets the category of this EventSuppressSuppression.  # noqa: E501

        ID of eventgroup category.  # noqa: E501

        :return: The category of this EventSuppressSuppression.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EventSuppressSuppression.

        ID of eventgroup category.  # noqa: E501

        :param category: The category of this EventSuppressSuppression.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                category is not None and len(category) > 255):
            raise ValueError("Invalid value for `category`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                category is not None and len(category) < 1):
            raise ValueError("Invalid value for `category`, length must be greater than or equal to `1`")  # noqa: E501

        self._category = category

    @property
    def description(self):
        """Gets the description of this EventSuppressSuppression.  # noqa: E501

        Human readable description - may contain value placeholders.  # noqa: E501

        :return: The description of this EventSuppressSuppression.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventSuppressSuppression.

        Human readable description - may contain value placeholders.  # noqa: E501

        :param description: The description of this EventSuppressSuppression.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this EventSuppressSuppression.  # noqa: E501

        Unique event identifier.  # noqa: E501

        :return: The id of this EventSuppressSuppression.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventSuppressSuppression.

        Unique event identifier.  # noqa: E501

        :param id: The id of this EventSuppressSuppression.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                id is not None and len(id) > 255):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and len(id) < 1):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this EventSuppressSuppression.  # noqa: E501

        Name for event.  # noqa: E501

        :return: The name of this EventSuppressSuppression.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventSuppressSuppression.

        Name for event.  # noqa: E501

        :param name: The name of this EventSuppressSuppression.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def node(self):
        """Gets the node of this EventSuppressSuppression.  # noqa: E501

        Indicates whether this event is node-specific or cluster-wide.  # noqa: E501

        :return: The node of this EventSuppressSuppression.  # noqa: E501
        :rtype: bool
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this EventSuppressSuppression.

        Indicates whether this event is node-specific or cluster-wide.  # noqa: E501

        :param node: The node of this EventSuppressSuppression.  # noqa: E501
        :type: bool
        """

        self._node = node

    @property
    def suppressed(self):
        """Gets the suppressed of this EventSuppressSuppression.  # noqa: E501

        Indicates if the event is suppressed.  # noqa: E501

        :return: The suppressed of this EventSuppressSuppression.  # noqa: E501
        :rtype: bool
        """
        return self._suppressed

    @suppressed.setter
    def suppressed(self, suppressed):
        """Sets the suppressed of this EventSuppressSuppression.

        Indicates if the event is suppressed.  # noqa: E501

        :param suppressed: The suppressed of this EventSuppressSuppression.  # noqa: E501
        :type: bool
        """

        self._suppressed = suppressed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventSuppressSuppression, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventSuppressSuppression):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventSuppressSuppression):
            return True

        return self.to_dict() != other.to_dict()
