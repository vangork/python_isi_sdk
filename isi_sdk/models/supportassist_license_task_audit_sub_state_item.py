# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class SupportassistLicenseTaskAuditSubStateItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_responds': 'int',
        'api_responds_obj': 'str',
        'error': 'str',
        'processing_lnn': 'str',
        'state': 'str',
        'time_stamp': 'float'
    }

    attribute_map = {
        'api_responds': 'api_responds',
        'api_responds_obj': 'api_responds_obj',
        'error': 'error',
        'processing_lnn': 'processing_lnn',
        'state': 'state',
        'time_stamp': 'time_stamp'
    }

    def __init__(self, api_responds=None, api_responds_obj=None, error=None, processing_lnn=None, state=None, time_stamp=None, _configuration=None):  # noqa: E501
        """SupportassistLicenseTaskAuditSubStateItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._api_responds = None
        self._api_responds_obj = None
        self._error = None
        self._processing_lnn = None
        self._state = None
        self._time_stamp = None
        self.discriminator = None

        if api_responds is not None:
            self.api_responds = api_responds
        if api_responds_obj is not None:
            self.api_responds_obj = api_responds_obj
        if error is not None:
            self.error = error
        self.processing_lnn = processing_lnn
        self.state = state
        self.time_stamp = time_stamp

    @property
    def api_responds(self):
        """Gets the api_responds of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501

        Connectivity API response code.  # noqa: E501

        :return: The api_responds of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501
        :rtype: int
        """
        return self._api_responds

    @api_responds.setter
    def api_responds(self, api_responds):
        """Sets the api_responds of this SupportassistLicenseTaskAuditSubStateItem.

        Connectivity API response code.  # noqa: E501

        :param api_responds: The api_responds of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                api_responds is not None and api_responds > 4294967295):  # noqa: E501
            raise ValueError("Invalid value for `api_responds`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if (self._configuration.client_side_validation and
                api_responds is not None and api_responds < 0):  # noqa: E501
            raise ValueError("Invalid value for `api_responds`, must be a value greater than or equal to `0`")  # noqa: E501

        self._api_responds = api_responds

    @property
    def api_responds_obj(self):
        """Gets the api_responds_obj of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501

        Connectivity API response JSON blob.  # noqa: E501

        :return: The api_responds_obj of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501
        :rtype: str
        """
        return self._api_responds_obj

    @api_responds_obj.setter
    def api_responds_obj(self, api_responds_obj):
        """Sets the api_responds_obj of this SupportassistLicenseTaskAuditSubStateItem.

        Connectivity API response JSON blob.  # noqa: E501

        :param api_responds_obj: The api_responds_obj of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                api_responds_obj is not None and len(api_responds_obj) > 8192):
            raise ValueError("Invalid value for `api_responds_obj`, length must be less than or equal to `8192`")  # noqa: E501
        if (self._configuration.client_side_validation and
                api_responds_obj is not None and len(api_responds_obj) < 1):
            raise ValueError("Invalid value for `api_responds_obj`, length must be greater than or equal to `1`")  # noqa: E501

        self._api_responds_obj = api_responds_obj

    @property
    def error(self):
        """Gets the error of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501

        The task sub-state error, if any  # noqa: E501

        :return: The error of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this SupportassistLicenseTaskAuditSubStateItem.

        The task sub-state error, if any  # noqa: E501

        :param error: The error of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                error is not None and len(error) > 255):
            raise ValueError("Invalid value for `error`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                error is not None and len(error) < 1):
            raise ValueError("Invalid value for `error`, length must be greater than or equal to `1`")  # noqa: E501

        self._error = error

    @property
    def processing_lnn(self):
        """Gets the processing_lnn of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501

        LNN of node that processed this sub-state  # noqa: E501

        :return: The processing_lnn of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501
        :rtype: str
        """
        return self._processing_lnn

    @processing_lnn.setter
    def processing_lnn(self, processing_lnn):
        """Sets the processing_lnn of this SupportassistLicenseTaskAuditSubStateItem.

        LNN of node that processed this sub-state  # noqa: E501

        :param processing_lnn: The processing_lnn of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and processing_lnn is None:
            raise ValueError("Invalid value for `processing_lnn`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                processing_lnn is not None and len(processing_lnn) > 255):
            raise ValueError("Invalid value for `processing_lnn`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                processing_lnn is not None and len(processing_lnn) < 1):
            raise ValueError("Invalid value for `processing_lnn`, length must be greater than or equal to `1`")  # noqa: E501

        self._processing_lnn = processing_lnn

    @property
    def state(self):
        """Gets the state of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501

        The sub-state of the task  # noqa: E501

        :return: The state of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SupportassistLicenseTaskAuditSubStateItem.

        The sub-state of the task  # noqa: E501

        :param state: The state of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                state is not None and len(state) > 255):
            raise ValueError("Invalid value for `state`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                state is not None and len(state) < 0):
            raise ValueError("Invalid value for `state`, length must be greater than or equal to `0`")  # noqa: E501

        self._state = state

    @property
    def time_stamp(self):
        """Gets the time_stamp of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501

        Timestamp when the task entered this sub-state  # noqa: E501

        :return: The time_stamp of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501
        :rtype: float
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this SupportassistLicenseTaskAuditSubStateItem.

        Timestamp when the task entered this sub-state  # noqa: E501

        :param time_stamp: The time_stamp of this SupportassistLicenseTaskAuditSubStateItem.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                time_stamp is not None and time_stamp > 4294967295):  # noqa: E501
            raise ValueError("Invalid value for `time_stamp`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if (self._configuration.client_side_validation and
                time_stamp is not None and time_stamp < 0):  # noqa: E501
            raise ValueError("Invalid value for `time_stamp`, must be a value greater than or equal to `0`")  # noqa: E501

        self._time_stamp = time_stamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupportassistLicenseTaskAuditSubStateItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportassistLicenseTaskAuditSubStateItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SupportassistLicenseTaskAuditSubStateItem):
            return True

        return self.to_dict() != other.to_dict()
