# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class MetadataiqSettingsSettingsConsumer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'database_info': 'MetadataiqSettingsSettingsConsumerDatabaseInfo',
        'excluded_lnns': 'list[int]',
        'fetch_size': 'int',
        'max_threads': 'int',
        'number_shards': 'int',
        'work_queue_size': 'int'
    }

    attribute_map = {
        'database_info': 'database_info',
        'excluded_lnns': 'excluded_lnns',
        'fetch_size': 'fetch_size',
        'max_threads': 'max_threads',
        'number_shards': 'number_shards',
        'work_queue_size': 'work_queue_size'
    }

    def __init__(self, database_info=None, excluded_lnns=None, fetch_size=None, max_threads=None, number_shards=None, work_queue_size=None, _configuration=None):  # noqa: E501
        """MetadataiqSettingsSettingsConsumer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._database_info = None
        self._excluded_lnns = None
        self._fetch_size = None
        self._max_threads = None
        self._number_shards = None
        self._work_queue_size = None
        self.discriminator = None

        if database_info is not None:
            self.database_info = database_info
        if excluded_lnns is not None:
            self.excluded_lnns = excluded_lnns
        if fetch_size is not None:
            self.fetch_size = fetch_size
        if max_threads is not None:
            self.max_threads = max_threads
        if number_shards is not None:
            self.number_shards = number_shards
        if work_queue_size is not None:
            self.work_queue_size = work_queue_size

    @property
    def database_info(self):
        """Gets the database_info of this MetadataiqSettingsSettingsConsumer.  # noqa: E501

        MetadataIQ database information settings for the script that transfers the ChangelistCreate information to the remote database. Note that this includes fake databases or even terminal output.  # noqa: E501

        :return: The database_info of this MetadataiqSettingsSettingsConsumer.  # noqa: E501
        :rtype: MetadataiqSettingsSettingsConsumerDatabaseInfo
        """
        return self._database_info

    @database_info.setter
    def database_info(self, database_info):
        """Sets the database_info of this MetadataiqSettingsSettingsConsumer.

        MetadataIQ database information settings for the script that transfers the ChangelistCreate information to the remote database. Note that this includes fake databases or even terminal output.  # noqa: E501

        :param database_info: The database_info of this MetadataiqSettingsSettingsConsumer.  # noqa: E501
        :type: MetadataiqSettingsSettingsConsumerDatabaseInfo
        """

        self._database_info = database_info

    @property
    def excluded_lnns(self):
        """Gets the excluded_lnns of this MetadataiqSettingsSettingsConsumer.  # noqa: E501

        List of LNNs the system should not use to upload data to database.  # noqa: E501

        :return: The excluded_lnns of this MetadataiqSettingsSettingsConsumer.  # noqa: E501
        :rtype: list[int]
        """
        return self._excluded_lnns

    @excluded_lnns.setter
    def excluded_lnns(self, excluded_lnns):
        """Sets the excluded_lnns of this MetadataiqSettingsSettingsConsumer.

        List of LNNs the system should not use to upload data to database.  # noqa: E501

        :param excluded_lnns: The excluded_lnns of this MetadataiqSettingsSettingsConsumer.  # noqa: E501
        :type: list[int]
        """

        self._excluded_lnns = excluded_lnns

    @property
    def fetch_size(self):
        """Gets the fetch_size of this MetadataiqSettingsSettingsConsumer.  # noqa: E501

        Minimum number of ChangelistCreate entries the script should fetch at a time. Default is 2048.  # noqa: E501

        :return: The fetch_size of this MetadataiqSettingsSettingsConsumer.  # noqa: E501
        :rtype: int
        """
        return self._fetch_size

    @fetch_size.setter
    def fetch_size(self, fetch_size):
        """Sets the fetch_size of this MetadataiqSettingsSettingsConsumer.

        Minimum number of ChangelistCreate entries the script should fetch at a time. Default is 2048.  # noqa: E501

        :param fetch_size: The fetch_size of this MetadataiqSettingsSettingsConsumer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                fetch_size is not None and fetch_size > 65535):  # noqa: E501
            raise ValueError("Invalid value for `fetch_size`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                fetch_size is not None and fetch_size < 1):  # noqa: E501
            raise ValueError("Invalid value for `fetch_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._fetch_size = fetch_size

    @property
    def max_threads(self):
        """Gets the max_threads of this MetadataiqSettingsSettingsConsumer.  # noqa: E501

        Maximum number of threads used to upload metadata to the database. The default is 8.  # noqa: E501

        :return: The max_threads of this MetadataiqSettingsSettingsConsumer.  # noqa: E501
        :rtype: int
        """
        return self._max_threads

    @max_threads.setter
    def max_threads(self, max_threads):
        """Sets the max_threads of this MetadataiqSettingsSettingsConsumer.

        Maximum number of threads used to upload metadata to the database. The default is 8.  # noqa: E501

        :param max_threads: The max_threads of this MetadataiqSettingsSettingsConsumer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_threads is not None and max_threads > 65535):  # noqa: E501
            raise ValueError("Invalid value for `max_threads`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_threads is not None and max_threads < 1):  # noqa: E501
            raise ValueError("Invalid value for `max_threads`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_threads = max_threads

    @property
    def number_shards(self):
        """Gets the number_shards of this MetadataiqSettingsSettingsConsumer.  # noqa: E501

        The number of primary shards that an index should have. The default is 8.  # noqa: E501

        :return: The number_shards of this MetadataiqSettingsSettingsConsumer.  # noqa: E501
        :rtype: int
        """
        return self._number_shards

    @number_shards.setter
    def number_shards(self, number_shards):
        """Sets the number_shards of this MetadataiqSettingsSettingsConsumer.

        The number of primary shards that an index should have. The default is 8.  # noqa: E501

        :param number_shards: The number_shards of this MetadataiqSettingsSettingsConsumer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                number_shards is not None and number_shards > 65535):  # noqa: E501
            raise ValueError("Invalid value for `number_shards`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                number_shards is not None and number_shards < 1):  # noqa: E501
            raise ValueError("Invalid value for `number_shards`, must be a value greater than or equal to `1`")  # noqa: E501

        self._number_shards = number_shards

    @property
    def work_queue_size(self):
        """Gets the work_queue_size of this MetadataiqSettingsSettingsConsumer.  # noqa: E501

        Transfer script's work queue size. Default is 16.  # noqa: E501

        :return: The work_queue_size of this MetadataiqSettingsSettingsConsumer.  # noqa: E501
        :rtype: int
        """
        return self._work_queue_size

    @work_queue_size.setter
    def work_queue_size(self, work_queue_size):
        """Sets the work_queue_size of this MetadataiqSettingsSettingsConsumer.

        Transfer script's work queue size. Default is 16.  # noqa: E501

        :param work_queue_size: The work_queue_size of this MetadataiqSettingsSettingsConsumer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                work_queue_size is not None and work_queue_size > 65535):  # noqa: E501
            raise ValueError("Invalid value for `work_queue_size`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                work_queue_size is not None and work_queue_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `work_queue_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._work_queue_size = work_queue_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataiqSettingsSettingsConsumer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataiqSettingsSettingsConsumer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetadataiqSettingsSettingsConsumer):
            return True

        return self.to_dict() != other.to_dict()
