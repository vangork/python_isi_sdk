# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class ConfigNamespaceIdParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'str',
        'value_size': 'int',
        'value_type': 'str'
    }

    attribute_map = {
        'value': 'value',
        'value_size': 'value_size',
        'value_type': 'value_type'
    }

    def __init__(self, value=None, value_size=None, value_type=None, _configuration=None):  # noqa: E501
        """ConfigNamespaceIdParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._value = None
        self._value_size = None
        self._value_type = None
        self.discriminator = None

        if value is not None:
            self.value = value
        if value_size is not None:
            self.value_size = value_size
        if value_type is not None:
            self.value_type = value_type

    @property
    def value(self):
        """Gets the value of this ConfigNamespaceIdParams.  # noqa: E501

        Configuration value (binary types base64 encoded)  # noqa: E501

        :return: The value of this ConfigNamespaceIdParams.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ConfigNamespaceIdParams.

        Configuration value (binary types base64 encoded)  # noqa: E501

        :param value: The value of this ConfigNamespaceIdParams.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                value is not None and len(value) > 87384):
            raise ValueError("Invalid value for `value`, length must be less than or equal to `87384`")  # noqa: E501
        if (self._configuration.client_side_validation and
                value is not None and len(value) < 0):
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `0`")  # noqa: E501

        self._value = value

    @property
    def value_size(self):
        """Gets the value_size of this ConfigNamespaceIdParams.  # noqa: E501

        Length of configuration value, including null termination  # noqa: E501

        :return: The value_size of this ConfigNamespaceIdParams.  # noqa: E501
        :rtype: int
        """
        return self._value_size

    @value_size.setter
    def value_size(self, value_size):
        """Sets the value_size of this ConfigNamespaceIdParams.

        Length of configuration value, including null termination  # noqa: E501

        :param value_size: The value_size of this ConfigNamespaceIdParams.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                value_size is not None and value_size > 87385):  # noqa: E501
            raise ValueError("Invalid value for `value_size`, must be a value less than or equal to `87385`")  # noqa: E501
        if (self._configuration.client_side_validation and
                value_size is not None and value_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `value_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._value_size = value_size

    @property
    def value_type(self):
        """Gets the value_type of this ConfigNamespaceIdParams.  # noqa: E501

        Value type  # noqa: E501

        :return: The value_type of this ConfigNamespaceIdParams.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this ConfigNamespaceIdParams.

        Value type  # noqa: E501

        :param value_type: The value_type of this ConfigNamespaceIdParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["invalid", "string", "binary", "last"]  # noqa: E501
        if (self._configuration.client_side_validation and
                value_type not in allowed_values):
            raise ValueError(
                "Invalid value for `value_type` ({0}), must be one of {1}"  # noqa: E501
                .format(value_type, allowed_values)
            )

        self._value_type = value_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigNamespaceIdParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigNamespaceIdParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigNamespaceIdParams):
            return True

        return self.to_dict() != other.to_dict()
