# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class GroupnetSubnetExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addr_family': 'str',
        'base_addr': 'str',
        'firewall_policy': 'str',
        'groupnet': 'str',
        'id': 'str',
        'linklayer': 'str',
        'pools': 'list[str]'
    }

    attribute_map = {
        'addr_family': 'addr_family',
        'base_addr': 'base_addr',
        'firewall_policy': 'firewall_policy',
        'groupnet': 'groupnet',
        'id': 'id',
        'linklayer': 'linklayer',
        'pools': 'pools'
    }

    def __init__(self, addr_family=None, base_addr=None, firewall_policy=None, groupnet=None, id=None, linklayer=None, pools=None, _configuration=None):  # noqa: E501
        """GroupnetSubnetExtended - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._addr_family = None
        self._base_addr = None
        self._firewall_policy = None
        self._groupnet = None
        self._id = None
        self._linklayer = None
        self._pools = None
        self.discriminator = None

        if addr_family is not None:
            self.addr_family = addr_family
        if base_addr is not None:
            self.base_addr = base_addr
        if firewall_policy is not None:
            self.firewall_policy = firewall_policy
        if groupnet is not None:
            self.groupnet = groupnet
        if id is not None:
            self.id = id
        if linklayer is not None:
            self.linklayer = linklayer
        if pools is not None:
            self.pools = pools

    @property
    def addr_family(self):
        """Gets the addr_family of this GroupnetSubnetExtended.  # noqa: E501

        IP address format.  # noqa: E501

        :return: The addr_family of this GroupnetSubnetExtended.  # noqa: E501
        :rtype: str
        """
        return self._addr_family

    @addr_family.setter
    def addr_family(self, addr_family):
        """Sets the addr_family of this GroupnetSubnetExtended.

        IP address format.  # noqa: E501

        :param addr_family: The addr_family of this GroupnetSubnetExtended.  # noqa: E501
        :type: str
        """
        allowed_values = ["ipv4", "ipv6"]  # noqa: E501
        if (self._configuration.client_side_validation and
                addr_family not in allowed_values):
            raise ValueError(
                "Invalid value for `addr_family` ({0}), must be one of {1}"  # noqa: E501
                .format(addr_family, allowed_values)
            )

        self._addr_family = addr_family

    @property
    def base_addr(self):
        """Gets the base_addr of this GroupnetSubnetExtended.  # noqa: E501

        The base IP address.  # noqa: E501

        :return: The base_addr of this GroupnetSubnetExtended.  # noqa: E501
        :rtype: str
        """
        return self._base_addr

    @base_addr.setter
    def base_addr(self, base_addr):
        """Sets the base_addr of this GroupnetSubnetExtended.

        The base IP address.  # noqa: E501

        :param base_addr: The base_addr of this GroupnetSubnetExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                base_addr is not None and len(base_addr) > 40):
            raise ValueError("Invalid value for `base_addr`, length must be less than or equal to `40`")  # noqa: E501
        if (self._configuration.client_side_validation and
                base_addr is not None and len(base_addr) < 1):
            raise ValueError("Invalid value for `base_addr`, length must be greater than or equal to `1`")  # noqa: E501

        self._base_addr = base_addr

    @property
    def firewall_policy(self):
        """Gets the firewall_policy of this GroupnetSubnetExtended.  # noqa: E501

        Name of the Firewall Policy associated with this Network Subnet.  # noqa: E501

        :return: The firewall_policy of this GroupnetSubnetExtended.  # noqa: E501
        :rtype: str
        """
        return self._firewall_policy

    @firewall_policy.setter
    def firewall_policy(self, firewall_policy):
        """Sets the firewall_policy of this GroupnetSubnetExtended.

        Name of the Firewall Policy associated with this Network Subnet.  # noqa: E501

        :param firewall_policy: The firewall_policy of this GroupnetSubnetExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                firewall_policy is not None and len(firewall_policy) > 32):
            raise ValueError("Invalid value for `firewall_policy`, length must be less than or equal to `32`")  # noqa: E501
        if (self._configuration.client_side_validation and
                firewall_policy is not None and len(firewall_policy) < 1):
            raise ValueError("Invalid value for `firewall_policy`, length must be greater than or equal to `1`")  # noqa: E501

        self._firewall_policy = firewall_policy

    @property
    def groupnet(self):
        """Gets the groupnet of this GroupnetSubnetExtended.  # noqa: E501

        Name of the groupnet this subnet belongs to.  # noqa: E501

        :return: The groupnet of this GroupnetSubnetExtended.  # noqa: E501
        :rtype: str
        """
        return self._groupnet

    @groupnet.setter
    def groupnet(self, groupnet):
        """Sets the groupnet of this GroupnetSubnetExtended.

        Name of the groupnet this subnet belongs to.  # noqa: E501

        :param groupnet: The groupnet of this GroupnetSubnetExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                groupnet is not None and len(groupnet) > 32):
            raise ValueError("Invalid value for `groupnet`, length must be less than or equal to `32`")  # noqa: E501
        if (self._configuration.client_side_validation and
                groupnet is not None and len(groupnet) < 1):
            raise ValueError("Invalid value for `groupnet`, length must be greater than or equal to `1`")  # noqa: E501

        self._groupnet = groupnet

    @property
    def id(self):
        """Gets the id of this GroupnetSubnetExtended.  # noqa: E501

        Unique Subnet ID.  # noqa: E501

        :return: The id of this GroupnetSubnetExtended.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupnetSubnetExtended.

        Unique Subnet ID.  # noqa: E501

        :param id: The id of this GroupnetSubnetExtended.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                id is not None and len(id) > 66):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `66`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and len(id) < 1):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def linklayer(self):
        """Gets the linklayer of this GroupnetSubnetExtended.  # noqa: E501

        Specifies the type of network linklayer this Network Subnet uses.  # noqa: E501

        :return: The linklayer of this GroupnetSubnetExtended.  # noqa: E501
        :rtype: str
        """
        return self._linklayer

    @linklayer.setter
    def linklayer(self, linklayer):
        """Sets the linklayer of this GroupnetSubnetExtended.

        Specifies the type of network linklayer this Network Subnet uses.  # noqa: E501

        :param linklayer: The linklayer of this GroupnetSubnetExtended.  # noqa: E501
        :type: str
        """
        allowed_values = ["ethernet", "infiniband"]  # noqa: E501
        if (self._configuration.client_side_validation and
                linklayer not in allowed_values):
            raise ValueError(
                "Invalid value for `linklayer` ({0}), must be one of {1}"  # noqa: E501
                .format(linklayer, allowed_values)
            )

        self._linklayer = linklayer

    @property
    def pools(self):
        """Gets the pools of this GroupnetSubnetExtended.  # noqa: E501

        Name of the pools in the subnet.  # noqa: E501

        :return: The pools of this GroupnetSubnetExtended.  # noqa: E501
        :rtype: list[str]
        """
        return self._pools

    @pools.setter
    def pools(self, pools):
        """Sets the pools of this GroupnetSubnetExtended.

        Name of the pools in the subnet.  # noqa: E501

        :param pools: The pools of this GroupnetSubnetExtended.  # noqa: E501
        :type: list[str]
        """

        self._pools = pools

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupnetSubnetExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupnetSubnetExtended):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupnetSubnetExtended):
            return True

        return self.to_dict() != other.to_dict()
