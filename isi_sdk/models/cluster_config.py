# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class ClusterConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'availability_zone': 'str',
        'description': 'str',
        'devices': 'list[ClusterConfigDevice]',
        'encoding': 'str',
        'guid': 'str',
        'has_quorum': 'bool',
        'is_compliance': 'bool',
        'is_powerscale_ve': 'bool',
        'is_virtual': 'bool',
        'is_vonefs': 'bool',
        'join_mode': 'str',
        'local_devid': 'int',
        'local_lnn': 'int',
        'local_serial': 'str',
        'name': 'str',
        'node_id': 'str',
        'onefs_version': 'ClusterConfigOnefsVersion',
        'region': 'str',
        'timezone': 'ClusterConfigTimezone',
        'upgrade_type': 'str'
    }

    attribute_map = {
        'availability_zone': 'availability_zone',
        'description': 'description',
        'devices': 'devices',
        'encoding': 'encoding',
        'guid': 'guid',
        'has_quorum': 'has_quorum',
        'is_compliance': 'is_compliance',
        'is_powerscale_ve': 'is_powerscale_ve',
        'is_virtual': 'is_virtual',
        'is_vonefs': 'is_vonefs',
        'join_mode': 'join_mode',
        'local_devid': 'local_devid',
        'local_lnn': 'local_lnn',
        'local_serial': 'local_serial',
        'name': 'name',
        'node_id': 'node_id',
        'onefs_version': 'onefs_version',
        'region': 'region',
        'timezone': 'timezone',
        'upgrade_type': 'upgrade_type'
    }

    def __init__(self, availability_zone=None, description=None, devices=None, encoding=None, guid=None, has_quorum=None, is_compliance=None, is_powerscale_ve=None, is_virtual=None, is_vonefs=None, join_mode=None, local_devid=None, local_lnn=None, local_serial=None, name=None, node_id=None, onefs_version=None, region=None, timezone=None, upgrade_type=None, _configuration=None):  # noqa: E501
        """ClusterConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._availability_zone = None
        self._description = None
        self._devices = None
        self._encoding = None
        self._guid = None
        self._has_quorum = None
        self._is_compliance = None
        self._is_powerscale_ve = None
        self._is_virtual = None
        self._is_vonefs = None
        self._join_mode = None
        self._local_devid = None
        self._local_lnn = None
        self._local_serial = None
        self._name = None
        self._node_id = None
        self._onefs_version = None
        self._region = None
        self._timezone = None
        self._upgrade_type = None
        self.discriminator = None

        self.availability_zone = availability_zone
        self.description = description
        self.devices = devices
        self.encoding = encoding
        self.guid = guid
        self.has_quorum = has_quorum
        self.is_compliance = is_compliance
        self.is_powerscale_ve = is_powerscale_ve
        self.is_virtual = is_virtual
        self.is_vonefs = is_vonefs
        self.join_mode = join_mode
        self.local_devid = local_devid
        self.local_lnn = local_lnn
        self.local_serial = local_serial
        self.name = name
        self.node_id = node_id
        if onefs_version is not None:
            self.onefs_version = onefs_version
        self.region = region
        if timezone is not None:
            self.timezone = timezone
        if upgrade_type is not None:
            self.upgrade_type = upgrade_type

    @property
    def availability_zone(self):
        """Gets the availability_zone of this ClusterConfig.  # noqa: E501

        Availability zone of the queried node  # noqa: E501

        :return: The availability_zone of this ClusterConfig.  # noqa: E501
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this ClusterConfig.

        Availability zone of the queried node  # noqa: E501

        :param availability_zone: The availability_zone of this ClusterConfig.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and availability_zone is None:
            raise ValueError("Invalid value for `availability_zone`, must not be `None`")  # noqa: E501

        self._availability_zone = availability_zone

    @property
    def description(self):
        """Gets the description of this ClusterConfig.  # noqa: E501

        Customer configurable description.  # noqa: E501

        :return: The description of this ClusterConfig.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClusterConfig.

        Customer configurable description.  # noqa: E501

        :param description: The description of this ClusterConfig.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def devices(self):
        """Gets the devices of this ClusterConfig.  # noqa: E501


        :return: The devices of this ClusterConfig.  # noqa: E501
        :rtype: list[ClusterConfigDevice]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this ClusterConfig.


        :param devices: The devices of this ClusterConfig.  # noqa: E501
        :type: list[ClusterConfigDevice]
        """
        if self._configuration.client_side_validation and devices is None:
            raise ValueError("Invalid value for `devices`, must not be `None`")  # noqa: E501

        self._devices = devices

    @property
    def encoding(self):
        """Gets the encoding of this ClusterConfig.  # noqa: E501

        Default encoding.  # noqa: E501

        :return: The encoding of this ClusterConfig.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this ClusterConfig.

        Default encoding.  # noqa: E501

        :param encoding: The encoding of this ClusterConfig.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and encoding is None:
            raise ValueError("Invalid value for `encoding`, must not be `None`")  # noqa: E501

        self._encoding = encoding

    @property
    def guid(self):
        """Gets the guid of this ClusterConfig.  # noqa: E501

        Cluster GUID.  # noqa: E501

        :return: The guid of this ClusterConfig.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this ClusterConfig.

        Cluster GUID.  # noqa: E501

        :param guid: The guid of this ClusterConfig.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")  # noqa: E501

        self._guid = guid

    @property
    def has_quorum(self):
        """Gets the has_quorum of this ClusterConfig.  # noqa: E501

        If true, the local node is in a group with quorum: It is communicating, storing, and protecting data normally with other nodes in its group.  Under normal circumstances, every node in the cluster is part of one group.  # noqa: E501

        :return: The has_quorum of this ClusterConfig.  # noqa: E501
        :rtype: bool
        """
        return self._has_quorum

    @has_quorum.setter
    def has_quorum(self, has_quorum):
        """Sets the has_quorum of this ClusterConfig.

        If true, the local node is in a group with quorum: It is communicating, storing, and protecting data normally with other nodes in its group.  Under normal circumstances, every node in the cluster is part of one group.  # noqa: E501

        :param has_quorum: The has_quorum of this ClusterConfig.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and has_quorum is None:
            raise ValueError("Invalid value for `has_quorum`, must not be `None`")  # noqa: E501

        self._has_quorum = has_quorum

    @property
    def is_compliance(self):
        """Gets the is_compliance of this ClusterConfig.  # noqa: E501

        If true, the cluster is in compliance mode. Compliance mode clusters do not allow root access and have stricter WORM (Write Once Read Many) features for retaining data in compliance with U.S. Securities and Exchange Commission rule 17a-4.  # noqa: E501

        :return: The is_compliance of this ClusterConfig.  # noqa: E501
        :rtype: bool
        """
        return self._is_compliance

    @is_compliance.setter
    def is_compliance(self, is_compliance):
        """Sets the is_compliance of this ClusterConfig.

        If true, the cluster is in compliance mode. Compliance mode clusters do not allow root access and have stricter WORM (Write Once Read Many) features for retaining data in compliance with U.S. Securities and Exchange Commission rule 17a-4.  # noqa: E501

        :param is_compliance: The is_compliance of this ClusterConfig.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_compliance is None:
            raise ValueError("Invalid value for `is_compliance`, must not be `None`")  # noqa: E501

        self._is_compliance = is_compliance

    @property
    def is_powerscale_ve(self):
        """Gets the is_powerscale_ve of this ClusterConfig.  # noqa: E501

        true if this is a OneFS Powerscale VE cluster  # noqa: E501

        :return: The is_powerscale_ve of this ClusterConfig.  # noqa: E501
        :rtype: bool
        """
        return self._is_powerscale_ve

    @is_powerscale_ve.setter
    def is_powerscale_ve(self, is_powerscale_ve):
        """Sets the is_powerscale_ve of this ClusterConfig.

        true if this is a OneFS Powerscale VE cluster  # noqa: E501

        :param is_powerscale_ve: The is_powerscale_ve of this ClusterConfig.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_powerscale_ve is None:
            raise ValueError("Invalid value for `is_powerscale_ve`, must not be `None`")  # noqa: E501

        self._is_powerscale_ve = is_powerscale_ve

    @property
    def is_virtual(self):
        """Gets the is_virtual of this ClusterConfig.  # noqa: E501

        true if the cluster is deployed on a desktop VMWorkstation  # noqa: E501

        :return: The is_virtual of this ClusterConfig.  # noqa: E501
        :rtype: bool
        """
        return self._is_virtual

    @is_virtual.setter
    def is_virtual(self, is_virtual):
        """Sets the is_virtual of this ClusterConfig.

        true if the cluster is deployed on a desktop VMWorkstation  # noqa: E501

        :param is_virtual: The is_virtual of this ClusterConfig.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_virtual is None:
            raise ValueError("Invalid value for `is_virtual`, must not be `None`")  # noqa: E501

        self._is_virtual = is_virtual

    @property
    def is_vonefs(self):
        """Gets the is_vonefs of this ClusterConfig.  # noqa: E501

        true if this is a vOneFS cluster on an ESXi  # noqa: E501

        :return: The is_vonefs of this ClusterConfig.  # noqa: E501
        :rtype: bool
        """
        return self._is_vonefs

    @is_vonefs.setter
    def is_vonefs(self, is_vonefs):
        """Sets the is_vonefs of this ClusterConfig.

        true if this is a vOneFS cluster on an ESXi  # noqa: E501

        :param is_vonefs: The is_vonefs of this ClusterConfig.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_vonefs is None:
            raise ValueError("Invalid value for `is_vonefs`, must not be `None`")  # noqa: E501

        self._is_vonefs = is_vonefs

    @property
    def join_mode(self):
        """Gets the join_mode of this ClusterConfig.  # noqa: E501

        Node join mode: 'manual' or 'secure'.  # noqa: E501

        :return: The join_mode of this ClusterConfig.  # noqa: E501
        :rtype: str
        """
        return self._join_mode

    @join_mode.setter
    def join_mode(self, join_mode):
        """Sets the join_mode of this ClusterConfig.

        Node join mode: 'manual' or 'secure'.  # noqa: E501

        :param join_mode: The join_mode of this ClusterConfig.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and join_mode is None:
            raise ValueError("Invalid value for `join_mode`, must not be `None`")  # noqa: E501

        self._join_mode = join_mode

    @property
    def local_devid(self):
        """Gets the local_devid of this ClusterConfig.  # noqa: E501

        Device ID of the queried node.  # noqa: E501

        :return: The local_devid of this ClusterConfig.  # noqa: E501
        :rtype: int
        """
        return self._local_devid

    @local_devid.setter
    def local_devid(self, local_devid):
        """Sets the local_devid of this ClusterConfig.

        Device ID of the queried node.  # noqa: E501

        :param local_devid: The local_devid of this ClusterConfig.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and local_devid is None:
            raise ValueError("Invalid value for `local_devid`, must not be `None`")  # noqa: E501

        self._local_devid = local_devid

    @property
    def local_lnn(self):
        """Gets the local_lnn of this ClusterConfig.  # noqa: E501

        Device logical node number of the queried node.  # noqa: E501

        :return: The local_lnn of this ClusterConfig.  # noqa: E501
        :rtype: int
        """
        return self._local_lnn

    @local_lnn.setter
    def local_lnn(self, local_lnn):
        """Sets the local_lnn of this ClusterConfig.

        Device logical node number of the queried node.  # noqa: E501

        :param local_lnn: The local_lnn of this ClusterConfig.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and local_lnn is None:
            raise ValueError("Invalid value for `local_lnn`, must not be `None`")  # noqa: E501

        self._local_lnn = local_lnn

    @property
    def local_serial(self):
        """Gets the local_serial of this ClusterConfig.  # noqa: E501

        Device serial number of the queried node.  # noqa: E501

        :return: The local_serial of this ClusterConfig.  # noqa: E501
        :rtype: str
        """
        return self._local_serial

    @local_serial.setter
    def local_serial(self, local_serial):
        """Sets the local_serial of this ClusterConfig.

        Device serial number of the queried node.  # noqa: E501

        :param local_serial: The local_serial of this ClusterConfig.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and local_serial is None:
            raise ValueError("Invalid value for `local_serial`, must not be `None`")  # noqa: E501

        self._local_serial = local_serial

    @property
    def name(self):
        """Gets the name of this ClusterConfig.  # noqa: E501

        Cluster name.  # noqa: E501

        :return: The name of this ClusterConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterConfig.

        Cluster name.  # noqa: E501

        :param name: The name of this ClusterConfig.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this ClusterConfig.  # noqa: E501

        Node id of the queried node  # noqa: E501

        :return: The node_id of this ClusterConfig.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ClusterConfig.

        Node id of the queried node  # noqa: E501

        :param node_id: The node_id of this ClusterConfig.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    @property
    def onefs_version(self):
        """Gets the onefs_version of this ClusterConfig.  # noqa: E501

          # noqa: E501

        :return: The onefs_version of this ClusterConfig.  # noqa: E501
        :rtype: ClusterConfigOnefsVersion
        """
        return self._onefs_version

    @onefs_version.setter
    def onefs_version(self, onefs_version):
        """Sets the onefs_version of this ClusterConfig.

          # noqa: E501

        :param onefs_version: The onefs_version of this ClusterConfig.  # noqa: E501
        :type: ClusterConfigOnefsVersion
        """

        self._onefs_version = onefs_version

    @property
    def region(self):
        """Gets the region of this ClusterConfig.  # noqa: E501

        Region of the queried node  # noqa: E501

        :return: The region of this ClusterConfig.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ClusterConfig.

        Region of the queried node  # noqa: E501

        :param region: The region of this ClusterConfig.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def timezone(self):
        """Gets the timezone of this ClusterConfig.  # noqa: E501

        The cluster timezone settings.  # noqa: E501

        :return: The timezone of this ClusterConfig.  # noqa: E501
        :rtype: ClusterConfigTimezone
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ClusterConfig.

        The cluster timezone settings.  # noqa: E501

        :param timezone: The timezone of this ClusterConfig.  # noqa: E501
        :type: ClusterConfigTimezone
        """

        self._timezone = timezone

    @property
    def upgrade_type(self):
        """Gets the upgrade_type of this ClusterConfig.  # noqa: E501


        :return: The upgrade_type of this ClusterConfig.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_type

    @upgrade_type.setter
    def upgrade_type(self, upgrade_type):
        """Sets the upgrade_type of this ClusterConfig.


        :param upgrade_type: The upgrade_type of this ClusterConfig.  # noqa: E501
        :type: str
        """

        self._upgrade_type = upgrade_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusterConfig):
            return True

        return self.to_dict() != other.to_dict()
