# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class NetworkPingPing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error': 'str',
        'id': 'int',
        'pong': 'bool',
        'uri': 'str'
    }

    attribute_map = {
        'error': 'error',
        'id': 'id',
        'pong': 'pong',
        'uri': 'uri'
    }

    def __init__(self, error=None, id=None, pong=None, uri=None, _configuration=None):  # noqa: E501
        """NetworkPingPing - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._error = None
        self._id = None
        self._pong = None
        self._uri = None
        self.discriminator = None

        if error is not None:
            self.error = error
        if id is not None:
            self.id = id
        if pong is not None:
            self.pong = pong
        if uri is not None:
            self.uri = uri

    @property
    def error(self):
        """Gets the error of this NetworkPingPing.  # noqa: E501

        Error message from the ping action if failed  # noqa: E501

        :return: The error of this NetworkPingPing.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this NetworkPingPing.

        Error message from the ping action if failed  # noqa: E501

        :param error: The error of this NetworkPingPing.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                error is not None and len(error) > 255):
            raise ValueError("Invalid value for `error`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                error is not None and len(error) < 0):
            raise ValueError("Invalid value for `error`, length must be greater than or equal to `0`")  # noqa: E501

        self._error = error

    @property
    def id(self):
        """Gets the id of this NetworkPingPing.  # noqa: E501

        Ping result identifier  # noqa: E501

        :return: The id of this NetworkPingPing.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetworkPingPing.

        Ping result identifier  # noqa: E501

        :param id: The id of this NetworkPingPing.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                id is not None and id > -1):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `-1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and id < 1):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def pong(self):
        """Gets the pong of this NetworkPingPing.  # noqa: E501

        Result of the ping action  # noqa: E501

        :return: The pong of this NetworkPingPing.  # noqa: E501
        :rtype: bool
        """
        return self._pong

    @pong.setter
    def pong(self, pong):
        """Sets the pong of this NetworkPingPing.

        Result of the ping action  # noqa: E501

        :param pong: The pong of this NetworkPingPing.  # noqa: E501
        :type: bool
        """

        self._pong = pong

    @property
    def uri(self):
        """Gets the uri of this NetworkPingPing.  # noqa: E501

        A valid URI pointing to the data storage  # noqa: E501

        :return: The uri of this NetworkPingPing.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this NetworkPingPing.

        A valid URI pointing to the data storage  # noqa: E501

        :param uri: The uri of this NetworkPingPing.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                uri is not None and len(uri) > 2048):
            raise ValueError("Invalid value for `uri`, length must be less than or equal to `2048`")  # noqa: E501
        if (self._configuration.client_side_validation and
                uri is not None and len(uri) < 1):
            raise ValueError("Invalid value for `uri`, length must be greater than or equal to `1`")  # noqa: E501

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkPingPing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkPingPing):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkPingPing):
            return True

        return self.to_dict() != other.to_dict()
