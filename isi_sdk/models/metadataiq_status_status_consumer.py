# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class MetadataiqStatusStatusConsumer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'average_network_latency': 'int',
        'average_transfer_time': 'int',
        'cpu_usage_pct': 'int',
        'end_time': 'int',
        'maximum_network_latency': 'int',
        'rss': 'int',
        'running_lnn': 'str',
        'start_time': 'int',
        'state': 'str',
        'transfer_size': 'int',
        'transfer_time': 'int'
    }

    attribute_map = {
        'average_network_latency': 'average_network_latency',
        'average_transfer_time': 'average_transfer_time',
        'cpu_usage_pct': 'cpu_usage_pct',
        'end_time': 'end_time',
        'maximum_network_latency': 'maximum_network_latency',
        'rss': 'rss',
        'running_lnn': 'running_lnn',
        'start_time': 'start_time',
        'state': 'state',
        'transfer_size': 'transfer_size',
        'transfer_time': 'transfer_time'
    }

    def __init__(self, average_network_latency=None, average_transfer_time=None, cpu_usage_pct=None, end_time=None, maximum_network_latency=None, rss=None, running_lnn=None, start_time=None, state=None, transfer_size=None, transfer_time=None, _configuration=None):  # noqa: E501
        """MetadataiqStatusStatusConsumer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._average_network_latency = None
        self._average_transfer_time = None
        self._cpu_usage_pct = None
        self._end_time = None
        self._maximum_network_latency = None
        self._rss = None
        self._running_lnn = None
        self._start_time = None
        self._state = None
        self._transfer_size = None
        self._transfer_time = None
        self.discriminator = None

        if average_network_latency is not None:
            self.average_network_latency = average_network_latency
        if average_transfer_time is not None:
            self.average_transfer_time = average_transfer_time
        if cpu_usage_pct is not None:
            self.cpu_usage_pct = cpu_usage_pct
        if end_time is not None:
            self.end_time = end_time
        if maximum_network_latency is not None:
            self.maximum_network_latency = maximum_network_latency
        if rss is not None:
            self.rss = rss
        if running_lnn is not None:
            self.running_lnn = running_lnn
        if start_time is not None:
            self.start_time = start_time
        if state is not None:
            self.state = state
        if transfer_size is not None:
            self.transfer_size = transfer_size
        if transfer_time is not None:
            self.transfer_time = transfer_time

    @property
    def average_network_latency(self):
        """Gets the average_network_latency of this MetadataiqStatusStatusConsumer.  # noqa: E501

        Average network latency (in milliseconds) with remote host during last data transfer. Default is 0.  # noqa: E501

        :return: The average_network_latency of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :rtype: int
        """
        return self._average_network_latency

    @average_network_latency.setter
    def average_network_latency(self, average_network_latency):
        """Sets the average_network_latency of this MetadataiqStatusStatusConsumer.

        Average network latency (in milliseconds) with remote host during last data transfer. Default is 0.  # noqa: E501

        :param average_network_latency: The average_network_latency of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                average_network_latency is not None and average_network_latency > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `average_network_latency`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                average_network_latency is not None and average_network_latency < 0):  # noqa: E501
            raise ValueError("Invalid value for `average_network_latency`, must be a value greater than or equal to `0`")  # noqa: E501

        self._average_network_latency = average_network_latency

    @property
    def average_transfer_time(self):
        """Gets the average_transfer_time of this MetadataiqStatusStatusConsumer.  # noqa: E501

        Average transfer time (in milliseconds) with remote host during last data transfer. Default is 0.  # noqa: E501

        :return: The average_transfer_time of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :rtype: int
        """
        return self._average_transfer_time

    @average_transfer_time.setter
    def average_transfer_time(self, average_transfer_time):
        """Sets the average_transfer_time of this MetadataiqStatusStatusConsumer.

        Average transfer time (in milliseconds) with remote host during last data transfer. Default is 0.  # noqa: E501

        :param average_transfer_time: The average_transfer_time of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                average_transfer_time is not None and average_transfer_time > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `average_transfer_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                average_transfer_time is not None and average_transfer_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `average_transfer_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._average_transfer_time = average_transfer_time

    @property
    def cpu_usage_pct(self):
        """Gets the cpu_usage_pct of this MetadataiqStatusStatusConsumer.  # noqa: E501

        The CPU usage percentage that the MetadataIQ current Consumer Cycle consumed while transferring data to the database. Default is 0.  # noqa: E501

        :return: The cpu_usage_pct of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :rtype: int
        """
        return self._cpu_usage_pct

    @cpu_usage_pct.setter
    def cpu_usage_pct(self, cpu_usage_pct):
        """Sets the cpu_usage_pct of this MetadataiqStatusStatusConsumer.

        The CPU usage percentage that the MetadataIQ current Consumer Cycle consumed while transferring data to the database. Default is 0.  # noqa: E501

        :param cpu_usage_pct: The cpu_usage_pct of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                cpu_usage_pct is not None and cpu_usage_pct > 100):  # noqa: E501
            raise ValueError("Invalid value for `cpu_usage_pct`, must be a value less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cpu_usage_pct is not None and cpu_usage_pct < 0):  # noqa: E501
            raise ValueError("Invalid value for `cpu_usage_pct`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cpu_usage_pct = cpu_usage_pct

    @property
    def end_time(self):
        """Gets the end_time of this MetadataiqStatusStatusConsumer.  # noqa: E501

        Time when the MetadataIQ current Consumer Cycle ended.   # noqa: E501

        :return: The end_time of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this MetadataiqStatusStatusConsumer.

        Time when the MetadataIQ current Consumer Cycle ended.   # noqa: E501

        :param end_time: The end_time of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                end_time is not None and end_time > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `end_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                end_time is not None and end_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `end_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._end_time = end_time

    @property
    def maximum_network_latency(self):
        """Gets the maximum_network_latency of this MetadataiqStatusStatusConsumer.  # noqa: E501

        Maximum network latency (in milliseconds) with remote host during last data transfer. Default is 0.  # noqa: E501

        :return: The maximum_network_latency of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :rtype: int
        """
        return self._maximum_network_latency

    @maximum_network_latency.setter
    def maximum_network_latency(self, maximum_network_latency):
        """Sets the maximum_network_latency of this MetadataiqStatusStatusConsumer.

        Maximum network latency (in milliseconds) with remote host during last data transfer. Default is 0.  # noqa: E501

        :param maximum_network_latency: The maximum_network_latency of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                maximum_network_latency is not None and maximum_network_latency > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `maximum_network_latency`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                maximum_network_latency is not None and maximum_network_latency < 0):  # noqa: E501
            raise ValueError("Invalid value for `maximum_network_latency`, must be a value greater than or equal to `0`")  # noqa: E501

        self._maximum_network_latency = maximum_network_latency

    @property
    def rss(self):
        """Gets the rss of this MetadataiqStatusStatusConsumer.  # noqa: E501

        The RSS (Resident Set Size) that the MetadataIQ current Consumer Cycle consumed while transferring data to the database in bytes. Default is 0.  # noqa: E501

        :return: The rss of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :rtype: int
        """
        return self._rss

    @rss.setter
    def rss(self, rss):
        """Sets the rss of this MetadataiqStatusStatusConsumer.

        The RSS (Resident Set Size) that the MetadataIQ current Consumer Cycle consumed while transferring data to the database in bytes. Default is 0.  # noqa: E501

        :param rss: The rss of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                rss is not None and rss > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `rss`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                rss is not None and rss < 0):  # noqa: E501
            raise ValueError("Invalid value for `rss`, must be a value greater than or equal to `0`")  # noqa: E501

        self._rss = rss

    @property
    def running_lnn(self):
        """Gets the running_lnn of this MetadataiqStatusStatusConsumer.  # noqa: E501

        The LNN on which the MetadataIQ Producer is currently running.  # noqa: E501

        :return: The running_lnn of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :rtype: str
        """
        return self._running_lnn

    @running_lnn.setter
    def running_lnn(self, running_lnn):
        """Sets the running_lnn of this MetadataiqStatusStatusConsumer.

        The LNN on which the MetadataIQ Producer is currently running.  # noqa: E501

        :param running_lnn: The running_lnn of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :type: str
        """

        self._running_lnn = running_lnn

    @property
    def start_time(self):
        """Gets the start_time of this MetadataiqStatusStatusConsumer.  # noqa: E501

        Time when the MetadataIQ Current Consumer Cycle started. Default is 0.  # noqa: E501

        :return: The start_time of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MetadataiqStatusStatusConsumer.

        Time when the MetadataIQ Current Consumer Cycle started. Default is 0.  # noqa: E501

        :param start_time: The start_time of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                start_time is not None and start_time > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                start_time is not None and start_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this MetadataiqStatusStatusConsumer.  # noqa: E501

        State of the MetadataIQ current Consumer Cycle.  # noqa: E501

        :return: The state of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MetadataiqStatusStatusConsumer.

        State of the MetadataIQ current Consumer Cycle.  # noqa: E501

        :param state: The state of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :type: str
        """
        allowed_values = ["Waiting for Data", "Exporting Data"]  # noqa: E501
        if (self._configuration.client_side_validation and
                state not in allowed_values):
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def transfer_size(self):
        """Gets the transfer_size of this MetadataiqStatusStatusConsumer.  # noqa: E501

        The size (in bytes) that the MetadataIQ current Consumer Cycle transferred to the database. Default is 0.  # noqa: E501

        :return: The transfer_size of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :rtype: int
        """
        return self._transfer_size

    @transfer_size.setter
    def transfer_size(self, transfer_size):
        """Sets the transfer_size of this MetadataiqStatusStatusConsumer.

        The size (in bytes) that the MetadataIQ current Consumer Cycle transferred to the database. Default is 0.  # noqa: E501

        :param transfer_size: The transfer_size of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                transfer_size is not None and transfer_size > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `transfer_size`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                transfer_size is not None and transfer_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `transfer_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._transfer_size = transfer_size

    @property
    def transfer_time(self):
        """Gets the transfer_time of this MetadataiqStatusStatusConsumer.  # noqa: E501

        Time it took for the MetadataIQ current Consumer Cycle to transfer data to the database in milliseconds. Default is 0.  # noqa: E501

        :return: The transfer_time of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :rtype: int
        """
        return self._transfer_time

    @transfer_time.setter
    def transfer_time(self, transfer_time):
        """Sets the transfer_time of this MetadataiqStatusStatusConsumer.

        Time it took for the MetadataIQ current Consumer Cycle to transfer data to the database in milliseconds. Default is 0.  # noqa: E501

        :param transfer_time: The transfer_time of this MetadataiqStatusStatusConsumer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                transfer_time is not None and transfer_time > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `transfer_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                transfer_time is not None and transfer_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `transfer_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._transfer_time = transfer_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataiqStatusStatusConsumer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataiqStatusStatusConsumer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetadataiqStatusStatusConsumer):
            return True

        return self.to_dict() != other.to_dict()
