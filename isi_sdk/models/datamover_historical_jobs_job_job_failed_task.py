# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class DatamoverHistoricalJobsJobJobFailedTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_msg': 'str',
        'id': 'int',
        'task_state': 'str',
        'task_type': 'str'
    }

    attribute_map = {
        'error_msg': 'error_msg',
        'id': 'id',
        'task_state': 'task_state',
        'task_type': 'task_type'
    }

    def __init__(self, error_msg=None, id=None, task_state=None, task_type=None, _configuration=None):  # noqa: E501
        """DatamoverHistoricalJobsJobJobFailedTask - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._error_msg = None
        self._id = None
        self._task_state = None
        self._task_type = None
        self.discriminator = None

        self.error_msg = error_msg
        self.id = id
        self.task_state = task_state
        self.task_type = task_type

    @property
    def error_msg(self):
        """Gets the error_msg of this DatamoverHistoricalJobsJobJobFailedTask.  # noqa: E501

        Error message  # noqa: E501

        :return: The error_msg of this DatamoverHistoricalJobsJobJobFailedTask.  # noqa: E501
        :rtype: str
        """
        return self._error_msg

    @error_msg.setter
    def error_msg(self, error_msg):
        """Sets the error_msg of this DatamoverHistoricalJobsJobJobFailedTask.

        Error message  # noqa: E501

        :param error_msg: The error_msg of this DatamoverHistoricalJobsJobJobFailedTask.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and error_msg is None:
            raise ValueError("Invalid value for `error_msg`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                error_msg is not None and len(error_msg) > 1024):
            raise ValueError("Invalid value for `error_msg`, length must be less than or equal to `1024`")  # noqa: E501
        if (self._configuration.client_side_validation and
                error_msg is not None and len(error_msg) < 1):
            raise ValueError("Invalid value for `error_msg`, length must be greater than or equal to `1`")  # noqa: E501

        self._error_msg = error_msg

    @property
    def id(self):
        """Gets the id of this DatamoverHistoricalJobsJobJobFailedTask.  # noqa: E501

        Task identifier  # noqa: E501

        :return: The id of this DatamoverHistoricalJobsJobJobFailedTask.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatamoverHistoricalJobsJobJobFailedTask.

        Task identifier  # noqa: E501

        :param id: The id of this DatamoverHistoricalJobsJobJobFailedTask.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and id > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and id < 0):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def task_state(self):
        """Gets the task_state of this DatamoverHistoricalJobsJobJobFailedTask.  # noqa: E501

        Task state  # noqa: E501

        :return: The task_state of this DatamoverHistoricalJobsJobJobFailedTask.  # noqa: E501
        :rtype: str
        """
        return self._task_state

    @task_state.setter
    def task_state(self, task_state):
        """Sets the task_state of this DatamoverHistoricalJobsJobJobFailedTask.

        Task state  # noqa: E501

        :param task_state: The task_state of this DatamoverHistoricalJobsJobJobFailedTask.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and task_state is None:
            raise ValueError("Invalid value for `task_state`, must not be `None`")  # noqa: E501
        allowed_values = ["invalid", "pending", "running", "paused", "finished", "cancelled", "failed", "failed-fatal", "last"]  # noqa: E501
        if (self._configuration.client_side_validation and
                task_state not in allowed_values):
            raise ValueError(
                "Invalid value for `task_state` ({0}), must be one of {1}"  # noqa: E501
                .format(task_state, allowed_values)
            )

        self._task_state = task_state

    @property
    def task_type(self):
        """Gets the task_type of this DatamoverHistoricalJobsJobJobFailedTask.  # noqa: E501

        Task type  # noqa: E501

        :return: The task_type of this DatamoverHistoricalJobsJobJobFailedTask.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this DatamoverHistoricalJobsJobJobFailedTask.

        Task type  # noqa: E501

        :param task_type: The task_type of this DatamoverHistoricalJobsJobJobFailedTask.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and task_type is None:
            raise ValueError("Invalid value for `task_type`, must not be `None`")  # noqa: E501
        allowed_values = ["invalid", "dir xfer by id", "dir xfer by name", "file xfer by id", "file xfer by name", "batch file xfer by id", "batch execute", "inc inodes scan", "inc dir change", "test task", "inc late list", "root task ds create", "root task ds base copy", "root task ds inc copy", "root task ds expire", "last"]  # noqa: E501
        if (self._configuration.client_side_validation and
                task_type not in allowed_values):
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatamoverHistoricalJobsJobJobFailedTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatamoverHistoricalJobsJobJobFailedTask):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatamoverHistoricalJobsJobJobFailedTask):
            return True

        return self.to_dict() != other.to_dict()
