# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class JobJobDomainmarkParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delete': 'bool',
        'root': 'str',
        'type': 'str'
    }

    attribute_map = {
        'delete': 'delete',
        'root': 'root',
        'type': 'type'
    }

    def __init__(self, delete=None, root=None, type=None, _configuration=None):  # noqa: E501
        """JobJobDomainmarkParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._delete = None
        self._root = None
        self._type = None
        self.discriminator = None

        if delete is not None:
            self.delete = delete
        self.root = root
        self.type = type

    @property
    def delete(self):
        """Gets the delete of this JobJobDomainmarkParams.  # noqa: E501

        Whether this is a delete operation.  # noqa: E501

        :return: The delete of this JobJobDomainmarkParams.  # noqa: E501
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this JobJobDomainmarkParams.

        Whether this is a delete operation.  # noqa: E501

        :param delete: The delete of this JobJobDomainmarkParams.  # noqa: E501
        :type: bool
        """

        self._delete = delete

    @property
    def root(self):
        """Gets the root of this JobJobDomainmarkParams.  # noqa: E501


        :return: The root of this JobJobDomainmarkParams.  # noqa: E501
        :rtype: str
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this JobJobDomainmarkParams.


        :param root: The root of this JobJobDomainmarkParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and root is None:
            raise ValueError("Invalid value for `root`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                root is not None and len(root) > 4096):
            raise ValueError("Invalid value for `root`, length must be less than or equal to `4096`")  # noqa: E501
        if (self._configuration.client_side_validation and
                root is not None and len(root) < 4):
            raise ValueError("Invalid value for `root`, length must be greater than or equal to `4`")  # noqa: E501
        if (self._configuration.client_side_validation and
                root is not None and not re.search(r'^\/ifs$|^\/ifs\/', root)):  # noqa: E501
            raise ValueError(r"Invalid value for `root`, must be a follow pattern or equal to `/^\/ifs$|^\/ifs\//`")  # noqa: E501

        self._root = root

    @property
    def type(self):
        """Gets the type of this JobJobDomainmarkParams.  # noqa: E501

        The type of domain.  # noqa: E501

        :return: The type of this JobJobDomainmarkParams.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobJobDomainmarkParams.

        The type of domain.  # noqa: E501

        :param type: The type of this JobJobDomainmarkParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["SnapRevert", "SyncIQ", "Worm"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobJobDomainmarkParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobJobDomainmarkParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobJobDomainmarkParams):
            return True

        return self.to_dict() != other.to_dict()
