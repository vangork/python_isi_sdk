# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from isi_sdk.configuration import Configuration


class ConfigImportCreateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'components': 'str',
        'export_id': 'str',
        'rules': 'ConfigImportRules'
    }

    attribute_map = {
        'components': 'components',
        'export_id': 'export_id',
        'rules': 'rules'
    }

    def __init__(self, components=None, export_id=None, rules=None, _configuration=None):  # noqa: E501
        """ConfigImportCreateParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._components = None
        self._export_id = None
        self._rules = None
        self.discriminator = None

        if components is not None:
            self.components = components
        self.export_id = export_id
        if rules is not None:
            self.rules = rules

    @property
    def components(self):
        """Gets the components of this ConfigImportCreateParams.  # noqa: E501

        Specifies the components which will be imported.  # noqa: E501

        :return: The components of this ConfigImportCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this ConfigImportCreateParams.

        Specifies the components which will be imported.  # noqa: E501

        :param components: The components of this ConfigImportCreateParams.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                components is not None and len(components) > 8192):
            raise ValueError("Invalid value for `components`, length must be less than or equal to `8192`")  # noqa: E501
        if (self._configuration.client_side_validation and
                components is not None and len(components) < 1):
            raise ValueError("Invalid value for `components`, length must be greater than or equal to `1`")  # noqa: E501

        self._components = components

    @property
    def export_id(self):
        """Gets the export_id of this ConfigImportCreateParams.  # noqa: E501

        The export ID given to the task.  # noqa: E501

        :return: The export_id of this ConfigImportCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._export_id

    @export_id.setter
    def export_id(self, export_id):
        """Sets the export_id of this ConfigImportCreateParams.

        The export ID given to the task.  # noqa: E501

        :param export_id: The export_id of this ConfigImportCreateParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and export_id is None:
            raise ValueError("Invalid value for `export_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                export_id is not None and len(export_id) > 255):
            raise ValueError("Invalid value for `export_id`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                export_id is not None and len(export_id) < 14):
            raise ValueError("Invalid value for `export_id`, length must be greater than or equal to `14`")  # noqa: E501

        self._export_id = export_id

    @property
    def rules(self):
        """Gets the rules of this ConfigImportCreateParams.  # noqa: E501

          # noqa: E501

        :return: The rules of this ConfigImportCreateParams.  # noqa: E501
        :rtype: ConfigImportRules
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this ConfigImportCreateParams.

          # noqa: E501

        :param rules: The rules of this ConfigImportCreateParams.  # noqa: E501
        :type: ConfigImportRules
        """

        self._rules = rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigImportCreateParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigImportCreateParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigImportCreateParams):
            return True

        return self.to_dict() != other.to_dict()
