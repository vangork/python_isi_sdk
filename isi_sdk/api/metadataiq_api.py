# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from isi_sdk.api_client import ApiClient


class MetadataiqApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_metadataiq_reset_item(self, metadataiq_reset_item, **kwargs):  # noqa: E501
        """create_metadataiq_reset_item  # noqa: E501

        Resend all metadata under the configured path to the database from a new snapshot. While this operation is in progress, it will block incremental updates to the database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_metadataiq_reset_item(metadataiq_reset_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Empty metadataiq_reset_item: (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_metadataiq_reset_item_with_http_info(metadataiq_reset_item, **kwargs)  # noqa: E501
        else:
            (data) = self.create_metadataiq_reset_item_with_http_info(metadataiq_reset_item, **kwargs)  # noqa: E501
            return data

    def create_metadataiq_reset_item_with_http_info(self, metadataiq_reset_item, **kwargs):  # noqa: E501
        """create_metadataiq_reset_item  # noqa: E501

        Resend all metadata under the configured path to the database from a new snapshot. While this operation is in progress, it will block incremental updates to the database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_metadataiq_reset_item_with_http_info(metadataiq_reset_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Empty metadataiq_reset_item: (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadataiq_reset_item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_metadataiq_reset_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadataiq_reset_item' is set
        if ('metadataiq_reset_item' not in params or
                params['metadataiq_reset_item'] is None):
            raise ValueError("Missing the required parameter `metadataiq_reset_item` when calling `create_metadataiq_reset_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'metadataiq_reset_item' in params:
            body_params = params['metadataiq_reset_item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/21/metadataiq/reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_metadataiq_reset(self, **kwargs):  # noqa: E501
        """delete_metadataiq_reset  # noqa: E501

        Reset MetadataIQ to factory defaults. This means the daemons are disabled, the settings are reset, and any artifacts on cluster are cleared.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_metadataiq_reset(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_metadataiq_reset_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_metadataiq_reset_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_metadataiq_reset_with_http_info(self, **kwargs):  # noqa: E501
        """delete_metadataiq_reset  # noqa: E501

        Reset MetadataIQ to factory defaults. This means the daemons are disabled, the settings are reset, and any artifacts on cluster are cleared.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_metadataiq_reset_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_metadataiq_reset" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/21/metadataiq/reset', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadataiq_certificate(self, **kwargs):  # noqa: E501
        """get_metadataiq_certificate  # noqa: E501

        Retrieve a Metadataiq CA certificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadataiq_certificate(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MetadataiqCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metadataiq_certificate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_metadataiq_certificate_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_metadataiq_certificate_with_http_info(self, **kwargs):  # noqa: E501
        """get_metadataiq_certificate  # noqa: E501

        Retrieve a Metadataiq CA certificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadataiq_certificate_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MetadataiqCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadataiq_certificate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/22/metadataiq/certificate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataiqCertificate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadataiq_settings(self, **kwargs):  # noqa: E501
        """get_metadataiq_settings  # noqa: E501

        View MetadataIQ settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadataiq_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MetadataiqSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metadataiq_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_metadataiq_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_metadataiq_settings_with_http_info(self, **kwargs):  # noqa: E501
        """get_metadataiq_settings  # noqa: E501

        View MetadataIQ settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadataiq_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MetadataiqSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadataiq_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/21/metadataiq/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataiqSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadataiq_status(self, **kwargs):  # noqa: E501
        """get_metadataiq_status  # noqa: E501

        View MetadataIQ current Cycle Status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadataiq_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MetadataiqStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metadataiq_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_metadataiq_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_metadataiq_status_with_http_info(self, **kwargs):  # noqa: E501
        """get_metadataiq_status  # noqa: E501

        View MetadataIQ current Cycle Status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadataiq_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MetadataiqStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadataiq_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/22/metadataiq/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataiqStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_metadataiq_settings(self, metadataiq_settings, **kwargs):  # noqa: E501
        """update_metadataiq_settings  # noqa: E501

        Modify a subset of MetadataIQ settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_metadataiq_settings(metadataiq_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MetadataiqSettingsSettings metadataiq_settings: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_metadataiq_settings_with_http_info(metadataiq_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.update_metadataiq_settings_with_http_info(metadataiq_settings, **kwargs)  # noqa: E501
            return data

    def update_metadataiq_settings_with_http_info(self, metadataiq_settings, **kwargs):  # noqa: E501
        """update_metadataiq_settings  # noqa: E501

        Modify a subset of MetadataIQ settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_metadataiq_settings_with_http_info(metadataiq_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MetadataiqSettingsSettings metadataiq_settings: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadataiq_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_metadataiq_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadataiq_settings' is set
        if ('metadataiq_settings' not in params or
                params['metadataiq_settings'] is None):
            raise ValueError("Missing the required parameter `metadataiq_settings` when calling `update_metadataiq_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'metadataiq_settings' in params:
            body_params = params['metadataiq_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/21/metadataiq/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
