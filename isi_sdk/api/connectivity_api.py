# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 22
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from isi_sdk.api_client import ApiClient


class ConnectivityApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_connectivity_data_item(self, connectivity_data_item, **kwargs):  # noqa: E501
        """create_connectivity_data_item  # noqa: E501

        Connectivity task response from Dell Technologies connectivity services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_connectivity_data_item(connectivity_data_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportassistDataItem connectivity_data_item: (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_connectivity_data_item_with_http_info(connectivity_data_item, **kwargs)  # noqa: E501
        else:
            (data) = self.create_connectivity_data_item_with_http_info(connectivity_data_item, **kwargs)  # noqa: E501
            return data

    def create_connectivity_data_item_with_http_info(self, connectivity_data_item, **kwargs):  # noqa: E501
        """create_connectivity_data_item  # noqa: E501

        Connectivity task response from Dell Technologies connectivity services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_connectivity_data_item_with_http_info(connectivity_data_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportassistDataItem connectivity_data_item: (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connectivity_data_item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_connectivity_data_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connectivity_data_item' is set
        if ('connectivity_data_item' not in params or
                params['connectivity_data_item'] is None):
            raise ValueError("Missing the required parameter `connectivity_data_item` when calling `create_connectivity_data_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'connectivity_data_item' in params:
            body_params = params['connectivity_data_item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/21/connectivity/data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_connectivity_payload_item(self, connectivity_payload_item, **kwargs):  # noqa: E501
        """create_connectivity_payload_item  # noqa: E501

        Start a payload request task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_connectivity_payload_item(connectivity_payload_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportassistPayloadItem connectivity_payload_item: (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_connectivity_payload_item_with_http_info(connectivity_payload_item, **kwargs)  # noqa: E501
        else:
            (data) = self.create_connectivity_payload_item_with_http_info(connectivity_payload_item, **kwargs)  # noqa: E501
            return data

    def create_connectivity_payload_item_with_http_info(self, connectivity_payload_item, **kwargs):  # noqa: E501
        """create_connectivity_payload_item  # noqa: E501

        Start a payload request task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_connectivity_payload_item_with_http_info(connectivity_payload_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportassistPayloadItem connectivity_payload_item: (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connectivity_payload_item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_connectivity_payload_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connectivity_payload_item' is set
        if ('connectivity_payload_item' not in params or
                params['connectivity_payload_item'] is None):
            raise ValueError("Missing the required parameter `connectivity_payload_item` when calling `create_connectivity_payload_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'connectivity_payload_item' in params:
            body_params = params['connectivity_payload_item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/21/connectivity/payload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_connectivity_task_item(self, connectivity_task_item, **kwargs):  # noqa: E501
        """create_connectivity_task_item  # noqa: E501

        Create a Connectivity task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_connectivity_task_item(connectivity_task_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportassistTaskItem connectivity_task_item: (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_connectivity_task_item_with_http_info(connectivity_task_item, **kwargs)  # noqa: E501
        else:
            (data) = self.create_connectivity_task_item_with_http_info(connectivity_task_item, **kwargs)  # noqa: E501
            return data

    def create_connectivity_task_item_with_http_info(self, connectivity_task_item, **kwargs):  # noqa: E501
        """create_connectivity_task_item  # noqa: E501

        Create a Connectivity task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_connectivity_task_item_with_http_info(connectivity_task_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportassistTaskItem connectivity_task_item: (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connectivity_task_item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_connectivity_task_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connectivity_task_item' is set
        if ('connectivity_task_item' not in params or
                params['connectivity_task_item'] is None):
            raise ValueError("Missing the required parameter `connectivity_task_item` when calling `create_connectivity_task_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'connectivity_task_item' in params:
            body_params = params['connectivity_task_item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/21/connectivity/task', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_connectivity_task_by_id(self, connectivity_task_id, **kwargs):  # noqa: E501
        """delete_connectivity_task_by_id  # noqa: E501

        Delete a Connectivity task by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_connectivity_task_by_id(connectivity_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connectivity_task_id: Delete a Connectivity task by ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_connectivity_task_by_id_with_http_info(connectivity_task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_connectivity_task_by_id_with_http_info(connectivity_task_id, **kwargs)  # noqa: E501
            return data

    def delete_connectivity_task_by_id_with_http_info(self, connectivity_task_id, **kwargs):  # noqa: E501
        """delete_connectivity_task_by_id  # noqa: E501

        Delete a Connectivity task by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_connectivity_task_by_id_with_http_info(connectivity_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connectivity_task_id: Delete a Connectivity task by ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connectivity_task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_connectivity_task_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connectivity_task_id' is set
        if ('connectivity_task_id' not in params or
                params['connectivity_task_id'] is None):
            raise ValueError("Missing the required parameter `connectivity_task_id` when calling `delete_connectivity_task_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'connectivity_task_id' in params:
            path_params['ConnectivityTaskId'] = params['connectivity_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/21/connectivity/task/{ConnectivityTaskId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_connectivity_license(self, **kwargs):  # noqa: E501
        """get_connectivity_license  # noqa: E501

        License activation status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connectivity_license(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SupportassistLicense
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_connectivity_license_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_connectivity_license_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_connectivity_license_with_http_info(self, **kwargs):  # noqa: E501
        """get_connectivity_license  # noqa: E501

        License activation status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connectivity_license_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SupportassistLicense
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connectivity_license" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/21/connectivity/license', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportassistLicense',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_connectivity_settings(self, **kwargs):  # noqa: E501
        """get_connectivity_settings  # noqa: E501

        List settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connectivity_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConnectivitySettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_connectivity_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_connectivity_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_connectivity_settings_with_http_info(self, **kwargs):  # noqa: E501
        """get_connectivity_settings  # noqa: E501

        List settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connectivity_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConnectivitySettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connectivity_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/21/connectivity/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectivitySettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_connectivity_status(self, **kwargs):  # noqa: E501
        """get_connectivity_status  # noqa: E501

        Get status arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connectivity_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConnectivityStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_connectivity_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_connectivity_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_connectivity_status_with_http_info(self, **kwargs):  # noqa: E501
        """get_connectivity_status  # noqa: E501

        Get status arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connectivity_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConnectivityStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connectivity_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/22/connectivity/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectivityStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_connectivity_task_by_id(self, connectivity_task_id, **kwargs):  # noqa: E501
        """get_connectivity_task_by_id  # noqa: E501

        Get the status of a Connectivity task by ID or all tasks from the specified source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connectivity_task_by_id(connectivity_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connectivity_task_id: Get the status of a Connectivity task by ID or all tasks from the specified source. (required)
        :return: SupportassistTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_connectivity_task_by_id_with_http_info(connectivity_task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_connectivity_task_by_id_with_http_info(connectivity_task_id, **kwargs)  # noqa: E501
            return data

    def get_connectivity_task_by_id_with_http_info(self, connectivity_task_id, **kwargs):  # noqa: E501
        """get_connectivity_task_by_id  # noqa: E501

        Get the status of a Connectivity task by ID or all tasks from the specified source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connectivity_task_by_id_with_http_info(connectivity_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connectivity_task_id: Get the status of a Connectivity task by ID or all tasks from the specified source. (required)
        :return: SupportassistTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connectivity_task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connectivity_task_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connectivity_task_id' is set
        if ('connectivity_task_id' not in params or
                params['connectivity_task_id'] is None):
            raise ValueError("Missing the required parameter `connectivity_task_id` when calling `get_connectivity_task_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'connectivity_task_id' in params:
            path_params['ConnectivityTaskId'] = params['connectivity_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/21/connectivity/task/{ConnectivityTaskId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportassistTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_connectivity_terms(self, **kwargs):  # noqa: E501
        """get_connectivity_terms  # noqa: E501

        The Telemetry Notice text for Dell Technologies connectivity services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connectivity_terms(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SupportassistTerms
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_connectivity_terms_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_connectivity_terms_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_connectivity_terms_with_http_info(self, **kwargs):  # noqa: E501
        """get_connectivity_terms  # noqa: E501

        The Telemetry Notice text for Dell Technologies connectivity services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connectivity_terms_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SupportassistTerms
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connectivity_terms" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/21/connectivity/terms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportassistTerms',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_connectivity_task(self, **kwargs):  # noqa: E501
        """list_connectivity_task  # noqa: E501

        Get all Connectivity tasks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_connectivity_task(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SupportassistTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_connectivity_task_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_connectivity_task_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_connectivity_task_with_http_info(self, **kwargs):  # noqa: E501
        """list_connectivity_task  # noqa: E501

        Get all Connectivity tasks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_connectivity_task_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SupportassistTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_connectivity_task" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/21/connectivity/task', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportassistTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_connectivity_settings(self, connectivity_settings, **kwargs):  # noqa: E501
        """update_connectivity_settings  # noqa: E501

        Modify one or more settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_connectivity_settings(connectivity_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectivitySettingsExtended connectivity_settings: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_connectivity_settings_with_http_info(connectivity_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.update_connectivity_settings_with_http_info(connectivity_settings, **kwargs)  # noqa: E501
            return data

    def update_connectivity_settings_with_http_info(self, connectivity_settings, **kwargs):  # noqa: E501
        """update_connectivity_settings  # noqa: E501

        Modify one or more settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_connectivity_settings_with_http_info(connectivity_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectivitySettingsExtended connectivity_settings: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connectivity_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_connectivity_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connectivity_settings' is set
        if ('connectivity_settings' not in params or
                params['connectivity_settings'] is None):
            raise ValueError("Missing the required parameter `connectivity_settings` when calling `update_connectivity_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'connectivity_settings' in params:
            body_params = params['connectivity_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/21/connectivity/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_connectivity_status(self, connectivity_status, **kwargs):  # noqa: E501
        """update_connectivity_status  # noqa: E501

        Modify status arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_connectivity_status(connectivity_status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectivityStatusExtended connectivity_status: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_connectivity_status_with_http_info(connectivity_status, **kwargs)  # noqa: E501
        else:
            (data) = self.update_connectivity_status_with_http_info(connectivity_status, **kwargs)  # noqa: E501
            return data

    def update_connectivity_status_with_http_info(self, connectivity_status, **kwargs):  # noqa: E501
        """update_connectivity_status  # noqa: E501

        Modify status arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_connectivity_status_with_http_info(connectivity_status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectivityStatusExtended connectivity_status: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connectivity_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_connectivity_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connectivity_status' is set
        if ('connectivity_status' not in params or
                params['connectivity_status'] is None):
            raise ValueError("Missing the required parameter `connectivity_status` when calling `update_connectivity_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'connectivity_status' in params:
            body_params = params['connectivity_status']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/22/connectivity/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_connectivity_terms(self, connectivity_terms, **kwargs):  # noqa: E501
        """update_connectivity_terms  # noqa: E501

        Setting Telemetry Notice accepted or rejected.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_connectivity_terms(connectivity_terms, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportassistTermsExtended connectivity_terms: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_connectivity_terms_with_http_info(connectivity_terms, **kwargs)  # noqa: E501
        else:
            (data) = self.update_connectivity_terms_with_http_info(connectivity_terms, **kwargs)  # noqa: E501
            return data

    def update_connectivity_terms_with_http_info(self, connectivity_terms, **kwargs):  # noqa: E501
        """update_connectivity_terms  # noqa: E501

        Setting Telemetry Notice accepted or rejected.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_connectivity_terms_with_http_info(connectivity_terms, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportassistTermsExtended connectivity_terms: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connectivity_terms']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_connectivity_terms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connectivity_terms' is set
        if ('connectivity_terms' not in params or
                params['connectivity_terms'] is None):
            raise ValueError("Missing the required parameter `connectivity_terms` when calling `update_connectivity_terms`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'connectivity_terms' in params:
            body_params = params['connectivity_terms']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/21/connectivity/terms', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
